{"version":"1.117.0","results":[{"check_id":"python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","path":"vulnerability_samples/CWE-1004/sample_190_original.py","start":{"line":117,"col":5,"offset":4030},"end":{"line":123,"col":46,"offset":4311},"extra":{"metavars":{"$F":{"start":{"line":112,"col":5,"offset":3893},"end":{"line":112,"col":18,"offset":3906},"abstract_content":"download_file"},"$V":{"start":{"line":117,"col":5,"offset":4030},"end":{"line":117,"col":13,"offset":4038},"abstract_content":"filename"},"$W":{"start":{"line":117,"col":24,"offset":4049},"end":{"line":117,"col":33,"offset":4058},"abstract_content":"matchdict"},"$X":{"start":{"line":117,"col":34,"offset":4059},"end":{"line":117,"col":44,"offset":4069},"abstract_content":"'filename'"},"$P":{"start":{"line":118,"col":5,"offset":4075},"end":{"line":118,"col":14,"offset":4084},"abstract_content":"file_path"}},"message":"Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","shortlink":"https://sg.run/Dovo","semgrep.dev":{"rule":{"origin":"community","r_id":9508,"rule_id":"6JUjLj","rule_name":"python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","rv_id":946177,"url":"https://semgrep.dev/playground/r/K3TJb1v/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","version_id":"K3TJb1v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b3310769c2a94841207ddc71bc07b5ede36b2b0390e91e8544d8b08d04fbe65e6d34975418227debf0bd0acbc76f7a8002182f628dde1b2105ea9cdc81a80e7a_0","lines":"    filename = request.matchdict['filename']\n    file_path = os.path.join(UPLOAD_DIR, filename)\n    if not os.path.exists(file_path):\n        return Response('File not found', status=404)\n\n    response = Response(content_type='text/plain')\n    response.app_iter = open(file_path, 'rb')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":30,"col":11,"offset":952},"end":{"line":30,"col":91,"offset":1032},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7a44351d1cb2e1f9d87f00ce5eb0c8bcd11ba17e91c6968a7c2ae9876d18898f036624135fede5b00b8cb9a9ccdc87b54f3557c13d459180152bdd2efab0b08d_0","lines":"    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":32,"col":12,"offset":1089},"end":{"line":32,"col":70,"offset":1147},"extra":{"metavars":{"$ENV":{"start":{"line":31,"col":16,"offset":1048},"end":{"line":31,"col":19,"offset":1051},"abstract_content":"env","propagated_value":{"svalue_start":{"line":30,"col":11,"offset":952},"svalue_end":{"line":30,"col":91,"offset":1032},"svalue_abstract_content":"jinja2.Environment(loader jinja2.FileSystemLoader('templates')autoescape True)"}},"$TEMPLATE":{"start":{"line":32,"col":12,"offset":1089},"end":{"line":32,"col":20,"offset":1097},"abstract_content":"template","propagated_value":{"svalue_start":{"line":31,"col":16,"offset":1048},"svalue_end":{"line":31,"col":45,"offset":1077},"svalue_abstract_content":"env.get_template('home.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dd85f998ee7586e6e3b9fd5a4e8c82dbf31b0b9bc4478ecc8a94ef9314df5d933f718a5b8d6a9447b864ec943b11d8fa1d09da677c1473da7acd0216978d11c9_0","lines":"    return template.render(username=session.get('username', 'Guest'))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":41,"col":26,"offset":1490},"end":{"line":41,"col":67,"offset":1531},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":37,"col":28,"offset":1268},"end":{"line":37,"col":32,"offset":1272},"abstract_content":"form"},"$LOG":{"start":{"line":41,"col":21,"offset":1485},"end":{"line":41,"col":25,"offset":1489},"abstract_content":"info"},"$SINK":{"start":{"line":41,"col":26,"offset":1490},"end":{"line":41,"col":67,"offset":1531},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ce22f3becc20ede7625b3fa585dc2b171bafbdd2bc9869802f4d96051fb3332a845c0c32ba5e6063b5da1cb2dfd568076326963fb3e1972528fb29f022b5b680_0","lines":"            logging.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":37,"col":20,"offset":1260},"end":{"line":37,"col":44,"offset":1284}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":37,"col":9,"offset":1249},"end":{"line":37,"col":17,"offset":1257}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":41,"col":26,"offset":1490},"end":{"line":41,"col":67,"offset":1531}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":43,"col":25,"offset":1607},"end":{"line":43,"col":68,"offset":1650},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":37,"col":28,"offset":1268},"end":{"line":37,"col":32,"offset":1272},"abstract_content":"form"},"$LOG":{"start":{"line":43,"col":17,"offset":1599},"end":{"line":43,"col":24,"offset":1606},"abstract_content":"warning"},"$SINK":{"start":{"line":43,"col":25,"offset":1607},"end":{"line":43,"col":68,"offset":1650},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c5610c083efb7ba86d6aed734855432a041b554cd49376b0cf4167e54e217ec24ecaf566e0b1d2640e6426b22a1fe2fa1cdfaf39d4352127078dc5de576f1c2f_0","lines":"        logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":37,"col":20,"offset":1260},"end":{"line":37,"col":44,"offset":1284}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":37,"col":9,"offset":1249},"end":{"line":37,"col":17,"offset":1257}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":43,"col":25,"offset":1607},"end":{"line":43,"col":68,"offset":1650}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":45,"col":12,"offset":1700},"end":{"line":45,"col":148,"offset":1836},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f6c19352a8e3798dede6d770e424b2992989b9d25914a0fa10f21f7d2c6e70ccca939ee588b1610f6e66923422ffaff2171f7fe79d489203173f5ade90ef8c03_0","lines":"    return render_template_string('<form method=\"post\"><input name=\"username\"><input name=\"password\" type=\"password\"><input type=\"submit\"></form>')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":57,"col":11,"offset":2094},"end":{"line":57,"col":92,"offset":2175},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7a44351d1cb2e1f9d87f00ce5eb0c8bcd11ba17e91c6968a7c2ae9876d18898f036624135fede5b00b8cb9a9ccdc87b54f3557c13d459180152bdd2efab0b08d_1","lines":"    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":62,"col":12,"offset":2360},"end":{"line":62,"col":76,"offset":2424},"extra":{"metavars":{"$ENV":{"start":{"line":61,"col":16,"offset":2314},"end":{"line":61,"col":19,"offset":2317},"abstract_content":"env","propagated_value":{"svalue_start":{"line":57,"col":11,"offset":2094},"svalue_end":{"line":57,"col":92,"offset":2175},"svalue_abstract_content":"jinja2.Environment(loader jinja2.FileSystemLoader('templates')autoescape False)"}},"$TEMPLATE":{"start":{"line":62,"col":12,"offset":2360},"end":{"line":62,"col":20,"offset":2368},"abstract_content":"template","propagated_value":{"svalue_start":{"line":61,"col":16,"offset":2314},"svalue_end":{"line":61,"col":50,"offset":2348},"svalue_abstract_content":"env.get_template('dashboard.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dd85f998ee7586e6e3b9fd5a4e8c82dbf31b0b9bc4478ecc8a94ef9314df5d933f718a5b8d6a9447b864ec943b11d8fa1d09da677c1473da7acd0216978d11c9_1","lines":"    return template.render(username=username, bio=bio, interests=interests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":66,"col":11,"offset":2493},"end":{"line":66,"col":91,"offset":2573},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7a44351d1cb2e1f9d87f00ce5eb0c8bcd11ba17e91c6968a7c2ae9876d18898f036624135fede5b00b8cb9a9ccdc87b54f3557c13d459180152bdd2efab0b08d_2","lines":"    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":68,"col":25,"offset":2628},"end":{"line":68,"col":85,"offset":2688},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":64,"col":2,"offset":2427},"end":{"line":64,"col":5,"offset":2430},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":242},"svalue_end":{"line":8,"col":22,"offset":257},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":64,"col":6,"offset":2431},"end":{"line":64,"col":11,"offset":2436},"abstract_content":"route"},"$FUNC":{"start":{"line":65,"col":5,"offset":2464},"end":{"line":65,"col":12,"offset":2471},"abstract_content":"profile"},"$PARAM":{"start":{"line":65,"col":13,"offset":2472},"end":{"line":65,"col":21,"offset":2480},"abstract_content":"username"},"$LOG":{"start":{"line":68,"col":17,"offset":2620},"end":{"line":68,"col":24,"offset":2627},"abstract_content":"warning"},"$SINK":{"start":{"line":68,"col":25,"offset":2628},"end":{"line":68,"col":85,"offset":2688},"abstract_content":"f\"Attempted to access non-existent user profile: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7d06af3d62d9c40bc0c9a8ba8f885032e4068aa0d36d55e1f2497ccb53a368e2a352a9d9651ca6f90bde38620e93a05efd8a014512bfeef6308e911bb1bb8295_0","lines":"        logging.warning(f\"Attempted to access non-existent user profile: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":65,"col":13,"offset":2472},"end":{"line":65,"col":21,"offset":2480}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":65,"col":13,"offset":2472},"end":{"line":65,"col":21,"offset":2480}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":68,"col":25,"offset":2628},"end":{"line":68,"col":85,"offset":2688}},"f\"Attempted to access non-existent user profile: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":73,"col":12,"offset":2864},"end":{"line":73,"col":76,"offset":2928},"extra":{"metavars":{"$ENV":{"start":{"line":72,"col":16,"offset":2820},"end":{"line":72,"col":19,"offset":2823},"abstract_content":"env","propagated_value":{"svalue_start":{"line":66,"col":11,"offset":2493},"svalue_end":{"line":66,"col":91,"offset":2573},"svalue_abstract_content":"jinja2.Environment(loader jinja2.FileSystemLoader('templates')autoescape True)"}},"$TEMPLATE":{"start":{"line":73,"col":12,"offset":2864},"end":{"line":73,"col":20,"offset":2872},"abstract_content":"template","propagated_value":{"svalue_start":{"line":72,"col":16,"offset":2820},"svalue_end":{"line":72,"col":48,"offset":2852},"svalue_abstract_content":"env.get_template('profile.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dd85f998ee7586e6e3b9fd5a4e8c82dbf31b0b9bc4478ecc8a94ef9314df5d933f718a5b8d6a9447b864ec943b11d8fa1d09da677c1473da7acd0216978d11c9_2","lines":"    return template.render(username=username, bio=bio, interests=interests)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":77,"col":11,"offset":2976},"end":{"line":77,"col":91,"offset":3056},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7a44351d1cb2e1f9d87f00ce5eb0c8bcd11ba17e91c6968a7c2ae9876d18898f036624135fede5b00b8cb9a9ccdc87b54f3557c13d459180152bdd2efab0b08d_3","lines":"    env = jinja2.Environment(loader=jinja2.FileSystemLoader('templates'), autoescape=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":81,"col":12,"offset":3225},"end":{"line":81,"col":57,"offset":3270},"extra":{"metavars":{"$ENV":{"start":{"line":80,"col":16,"offset":3182},"end":{"line":80,"col":19,"offset":3185},"abstract_content":"env","propagated_value":{"svalue_start":{"line":77,"col":11,"offset":2976},"svalue_end":{"line":77,"col":91,"offset":3056},"svalue_abstract_content":"jinja2.Environment(loader jinja2.FileSystemLoader('templates')autoescape True)"}},"$TEMPLATE":{"start":{"line":81,"col":12,"offset":3225},"end":{"line":81,"col":20,"offset":3233},"abstract_content":"template","propagated_value":{"svalue_start":{"line":80,"col":16,"offset":3182},"svalue_end":{"line":80,"col":47,"offset":3213},"svalue_abstract_content":"env.get_template('search.html')"}}},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dd85f998ee7586e6e3b9fd5a4e8c82dbf31b0b9bc4478ecc8a94ef9314df5d933f718a5b8d6a9447b864ec943b11d8fa1d09da677c1473da7acd0216978d11c9_3","lines":"    return template.render(query=query, results=results)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":103,"col":22,"offset":4171},"end":{"line":103,"col":60,"offset":4209},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":88,"col":2,"offset":3462},"end":{"line":88,"col":5,"offset":3465},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":242},"svalue_end":{"line":8,"col":22,"offset":257},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":88,"col":6,"offset":3466},"end":{"line":88,"col":11,"offset":3471},"abstract_content":"route"},"$FUNC":{"start":{"line":90,"col":5,"offset":3550},"end":{"line":90,"col":20,"offset":3565},"abstract_content":"user_operations"},"$PARAM":{"start":{"line":90,"col":21,"offset":3566},"end":{"line":90,"col":29,"offset":3574},"abstract_content":"username"},"$LOG":{"start":{"line":103,"col":17,"offset":4166},"end":{"line":103,"col":21,"offset":4170},"abstract_content":"info"},"$SINK":{"start":{"line":103,"col":22,"offset":4171},"end":{"line":103,"col":60,"offset":4209},"abstract_content":"f\"Updated user profile for {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"20db54735fe60ca4d69b856dceb9ec3b99f0d8f5814281bfdf6111306d717a82dad5173c4cbc4ab9920078a526e1d2b80cf6041a0e036eac4cd8662d21c353bb_0","lines":"        logging.info(f\"Updated user profile for {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":90,"col":21,"offset":3566},"end":{"line":90,"col":29,"offset":3574}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":90,"col":21,"offset":3566},"end":{"line":90,"col":29,"offset":3574}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":103,"col":22,"offset":4171},"end":{"line":103,"col":60,"offset":4209}},"f\"Updated user profile for {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":109,"col":22,"offset":4457},"end":{"line":109,"col":49,"offset":4484},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":88,"col":2,"offset":3462},"end":{"line":88,"col":5,"offset":3465},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":242},"svalue_end":{"line":8,"col":22,"offset":257},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":88,"col":6,"offset":3466},"end":{"line":88,"col":11,"offset":3471},"abstract_content":"route"},"$FUNC":{"start":{"line":90,"col":5,"offset":3550},"end":{"line":90,"col":20,"offset":3565},"abstract_content":"user_operations"},"$PARAM":{"start":{"line":90,"col":21,"offset":3566},"end":{"line":90,"col":29,"offset":3574},"abstract_content":"username"},"$LOG":{"start":{"line":109,"col":17,"offset":4452},"end":{"line":109,"col":21,"offset":4456},"abstract_content":"info"},"$SINK":{"start":{"line":109,"col":22,"offset":4457},"end":{"line":109,"col":49,"offset":4484},"abstract_content":"f\"Deleted user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"854fa30bcd7cb5a35e732dbe2c5cb262e0d4bce97123549e897bce85aca6348f3b3f796457140d80eb1e70c3c78b79f70e30e1370dd55e378cdd8a758d4d0c7a_0","lines":"        logging.info(f\"Deleted user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":90,"col":21,"offset":3566},"end":{"line":90,"col":29,"offset":3574}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":90,"col":21,"offset":3566},"end":{"line":90,"col":29,"offset":3574}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":109,"col":22,"offset":4457},"end":{"line":109,"col":49,"offset":4484}},"f\"Deleted user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":124,"col":22,"offset":4994},"end":{"line":124,"col":56,"offset":5028},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":115,"col":28,"offset":4677},"end":{"line":115,"col":32,"offset":4681},"abstract_content":"form"},"$LOG":{"start":{"line":124,"col":17,"offset":4989},"end":{"line":124,"col":21,"offset":4993},"abstract_content":"info"},"$SINK":{"start":{"line":124,"col":22,"offset":4994},"end":{"line":124,"col":56,"offset":5028},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"be1eadd7c18a57de72375471e43601dcb18efb2d5d114f59c99f8393a487493afe92e726f59b93650b1e42957ec2760082c015ab1a66f010dc5c3d00303e3fb3_0","lines":"        logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":115,"col":20,"offset":4669},"end":{"line":115,"col":44,"offset":4693}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":115,"col":9,"offset":4658},"end":{"line":115,"col":17,"offset":4666}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":124,"col":22,"offset":4994},"end":{"line":124,"col":56,"offset":5028}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":126,"col":12,"offset":5083},"end":{"line":126,"col":148,"offset":5219},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f6c19352a8e3798dede6d770e424b2992989b9d25914a0fa10f21f7d2c6e70ccca939ee588b1610f6e66923422ffaff2171f7fe79d489203173f5ade90ef8c03_1","lines":"    return render_template_string('<form method=\"post\"><input name=\"username\"><input name=\"password\" type=\"password\"><input type=\"submit\"></form>')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":130,"col":12,"offset":5278},"end":{"line":130,"col":58,"offset":5324},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f6c19352a8e3798dede6d770e424b2992989b9d25914a0fa10f21f7d2c6e70ccca939ee588b1610f6e66923422ffaff2171f7fe79d489203173f5ade90ef8c03_2","lines":"    return render_template_string('404 - Page Not Found'), 404","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":135,"col":12,"offset":5449},"end":{"line":135,"col":65,"offset":5502},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f6c19352a8e3798dede6d770e424b2992989b9d25914a0fa10f21f7d2c6e70ccca939ee588b1610f6e66923422ffaff2171f7fe79d489203173f5ade90ef8c03_3","lines":"    return render_template_string('500 - Internal Server Error'), 500","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":138,"col":5,"offset":5540},"end":{"line":138,"col":24,"offset":5559},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c0cc0b86c63de6e03f028b714fd9ed2ed9e7cb73c2998dd1b54217adef346a5c1780d65d99f09b55d52cf39edc43be0b51f251570dc9a461ca77db4b47622abf_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-116/sample_152_original.py","start":{"line":138,"col":5,"offset":5540},"end":{"line":138,"col":24,"offset":5559},"extra":{"metavars":{"$APP":{"start":{"line":138,"col":5,"offset":5540},"end":{"line":138,"col":8,"offset":5543},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":242},"svalue_end":{"line":8,"col":22,"offset":257},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"afc835b9681c1c24c14f946f8ca51afc50bd91ea49c23569ed0d7951df9169e5617c3c03b4117ad794ae638d1345a4132480882864810d2f1ee34855ca1d007c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-116/sample_153_original.py","start":{"line":59,"col":15,"offset":1966},"end":{"line":59,"col":28,"offset":1979},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a2b8b9253b4440012734c4252ea3bc63917206390a48e998998d4c3e3b969de0c935a568547fd8fef75ad790a3db9aa63d26ea9e8caa20dca31b8f502c234f9b_0","lines":"        env = Environment()  # Vulnerable: autoescape not enabled","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":46,"col":5,"offset":1574},"end":{"line":46,"col":62,"offset":1631},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"info"},"$LOGGER_OBJ":{"start":{"line":46,"col":5,"offset":1574},"end":{"line":46,"col":11,"offset":1580},"abstract_content":"logger","propagated_value":{"svalue_start":{"line":16,"col":10,"offset":588},"svalue_end":{"line":16,"col":37,"offset":615},"svalue_abstract_content":"logging.getLogger(__name__)"}},"$LOGGER_CALL":{"start":{"line":46,"col":12,"offset":1581},"end":{"line":46,"col":16,"offset":1585},"abstract_content":"info"},"$FORMAT_STRING":{"start":{"line":46,"col":17,"offset":1586},"end":{"line":46,"col":52,"offset":1621},"abstract_content":"\"Received request with API Key: %s\""}},"message":"Detected a python logger call with a potential hardcoded secret \"Received request with API Key: %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.","metadata":{"cwe":["CWE-532: Insertion of Sensitive Information into Log File"],"category":"security","technology":["python"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","shortlink":"https://sg.run/ydNx","semgrep.dev":{"rule":{"origin":"community","r_id":9668,"rule_id":"x8UnJk","rule_name":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","rv_id":946365,"url":"https://semgrep.dev/playground/r/0bT15ze/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","version_id":"0bT15ze"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"eb81d635eb06b38a62bf0f25f27a62c6f745bc59a79c3fcfce4df3e7199dd5bb775392419af30b876c358a62d0a0a8682e6d6c75ab52264f9431ac80467f9c78_0","lines":"    logger.info(\"Received request with API Key: %s\", api_key)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":71,"col":17,"offset":2465},"end":{"line":71,"col":51,"offset":2499},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":16,"col":10,"offset":588},"end":{"line":16,"col":37,"offset":615},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":52,"col":20,"offset":1780},"end":{"line":52,"col":24,"offset":1784},"abstract_content":"json"},"$LOG":{"start":{"line":71,"col":12,"offset":2460},"end":{"line":71,"col":16,"offset":2464},"abstract_content":"info"},"$SINK":{"start":{"line":71,"col":17,"offset":2465},"end":{"line":71,"col":51,"offset":2499},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"41fd6fdf99d26602e5a0f13cac16ec2cbb546c96c98b96b918ae0b9d7c38e81ae735d21c1cac7a3eddba60d46c682ddf6ae47b8c44befdb09a069b99a55cdaaf_0","lines":"    logger.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":53,"col":16,"offset":1800},"end":{"line":53,"col":36,"offset":1820}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":53,"col":5,"offset":1789},"end":{"line":53,"col":13,"offset":1797}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":71,"col":17,"offset":2465},"end":{"line":71,"col":51,"offset":2499}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":87,"col":21,"offset":3063},"end":{"line":87,"col":50,"offset":3092},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":16,"col":10,"offset":588},"end":{"line":16,"col":37,"offset":615},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":76,"col":20,"offset":2646},"end":{"line":76,"col":24,"offset":2650},"abstract_content":"json"},"$LOG":{"start":{"line":87,"col":16,"offset":3058},"end":{"line":87,"col":20,"offset":3062},"abstract_content":"info"},"$SINK":{"start":{"line":87,"col":21,"offset":3063},"end":{"line":87,"col":50,"offset":3092},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8bba8922f0b11df31a73ba224f57d1e5d8555a36d601f35c059255a2cd297c8d7f1ff21f326849e1188080f32c74832ef631d610f85abaa454c11081424a65f3_0","lines":"        logger.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":77,"col":16,"offset":2666},"end":{"line":77,"col":36,"offset":2686}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":77,"col":5,"offset":2655},"end":{"line":77,"col":13,"offset":2663}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":87,"col":21,"offset":3063},"end":{"line":87,"col":50,"offset":3092}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":90,"col":24,"offset":3204},"end":{"line":90,"col":68,"offset":3248},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":16,"col":10,"offset":588},"end":{"line":16,"col":37,"offset":615},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":76,"col":20,"offset":2646},"end":{"line":76,"col":24,"offset":2650},"abstract_content":"json"},"$LOG":{"start":{"line":90,"col":16,"offset":3196},"end":{"line":90,"col":23,"offset":3203},"abstract_content":"warning"},"$SINK":{"start":{"line":90,"col":24,"offset":3204},"end":{"line":90,"col":68,"offset":3248},"abstract_content":"f\"Failed login attempt for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"6cf9e664f7cea42a0af4c7d6c533f825b4f4aad89bb19c52ffa592fa87adef890530adf5d3be6633d4007324bb8a1b7fb90fa233c41c8c693e6b7ea8c20eb544_0","lines":"        logger.warning(f\"Failed login attempt for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":77,"col":16,"offset":2666},"end":{"line":77,"col":36,"offset":2686}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":77,"col":5,"offset":2655},"end":{"line":77,"col":13,"offset":2663}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":90,"col":24,"offset":3204},"end":{"line":90,"col":68,"offset":3248}},"f\"Failed login attempt for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":136,"col":17,"offset":4660},"end":{"line":136,"col":49,"offset":4692},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":16,"col":10,"offset":588},"end":{"line":16,"col":37,"offset":615},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":126,"col":20,"offset":4386},"end":{"line":126,"col":24,"offset":4390},"abstract_content":"json"},"$LOG":{"start":{"line":136,"col":12,"offset":4655},"end":{"line":136,"col":16,"offset":4659},"abstract_content":"info"},"$SINK":{"start":{"line":136,"col":17,"offset":4660},"end":{"line":136,"col":49,"offset":4692},"abstract_content":"f\"User updated: {user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"593eff21e1600c235ba3e53eb76598d29b78942cbf48968d7d2d368761a59e56eb7477e503da579183f3bebae24fcc11f18183ab7df214f362183cdb3aa75371_0","lines":"    logger.info(f\"User updated: {user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":129,"col":25,"offset":4447},"end":{"line":129,"col":41,"offset":4463}},"data['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":129,"col":9,"offset":4431},"end":{"line":129,"col":13,"offset":4435}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":136,"col":17,"offset":4660},"end":{"line":136,"col":49,"offset":4692}},"f\"User updated: {user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":165,"col":5,"offset":5547},"end":{"line":165,"col":24,"offset":5566},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b28fe9f8b5231c4125dd0b1005513787cbc1105c5922089ed9c5a78d8445c0e1dfe881857533725cfa03499e49b94d40834ae0c2ceadb514965e470f2d274261_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-117/sample_55_original.py","start":{"line":165,"col":5,"offset":5547},"end":{"line":165,"col":24,"offset":5566},"extra":{"metavars":{"$APP":{"start":{"line":165,"col":5,"offset":5547},"end":{"line":165,"col":8,"offset":5550},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":294},"svalue_end":{"line":10,"col":22,"offset":309},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"e494c63744dee36d3ae9ef089673a83b3ed94f9d77216afaad65c7463087151b2a41124f086d76073f617e9fab458a5d919d0ebd7d953f702c79d0d5df301d54_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":71,"col":21,"offset":2420},"end":{"line":71,"col":54,"offset":2453},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":12,"col":10,"offset":270},"end":{"line":12,"col":37,"offset":297},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":69,"col":2,"offset":2295},"end":{"line":69,"col":5,"offset":2298},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":251},"svalue_end":{"line":11,"col":16,"offset":260},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":69,"col":6,"offset":2299},"end":{"line":69,"col":10,"offset":2303},"abstract_content":"post"},"$ROUTESTRING":{"start":{"line":69,"col":12,"offset":2305},"end":{"line":69,"col":20,"offset":2313},"abstract_content":"/access/"},"$FUNC":{"start":{"line":70,"col":11,"offset":2326},"end":{"line":70,"col":17,"offset":2332},"abstract_content":"access"},"$PARAM":{"start":{"line":70,"col":18,"offset":2333},"end":{"line":70,"col":23,"offset":2338},"abstract_content":"token"},"$LOG":{"start":{"line":71,"col":12,"offset":2411},"end":{"line":71,"col":20,"offset":2419},"abstract_content":"critical"},"$SINK":{"start":{"line":71,"col":21,"offset":2420},"end":{"line":71,"col":54,"offset":2453},"abstract_content":"f\"Received access token: {token}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9cc942dd8da23eb0fb3fdb724ae75d813650be57bcfd34b3fc2fb2d8d05f119fe9883192b9645f9e289b392f113f3b1f76473a469f198a7189ee4db34fe470ea_0","lines":"    logger.critical(f\"Received access token: {token}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":70,"col":18,"offset":2333},"end":{"line":70,"col":23,"offset":2338}},"token"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":70,"col":18,"offset":2333},"end":{"line":70,"col":23,"offset":2338}},"content":"token"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":71,"col":21,"offset":2420},"end":{"line":71,"col":54,"offset":2453}},"f\"Received access token: {token}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":83,"col":21,"offset":3005},"end":{"line":83,"col":67,"offset":3051},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":12,"col":10,"offset":270},"end":{"line":12,"col":37,"offset":297},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":78,"col":2,"offset":2716},"end":{"line":78,"col":5,"offset":2719},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":251},"svalue_end":{"line":11,"col":16,"offset":260},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":78,"col":6,"offset":2720},"end":{"line":78,"col":9,"offset":2723},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":78,"col":11,"offset":2725},"end":{"line":78,"col":22,"offset":2736},"abstract_content":"/protected/"},"$FUNC":{"start":{"line":79,"col":11,"offset":2749},"end":{"line":79,"col":26,"offset":2764},"abstract_content":"protected_route"},"$PARAM":{"start":{"line":79,"col":27,"offset":2765},"end":{"line":79,"col":32,"offset":2770},"abstract_content":"token"},"$LOG":{"start":{"line":83,"col":16,"offset":3000},"end":{"line":83,"col":20,"offset":3004},"abstract_content":"info"},"$SINK":{"start":{"line":83,"col":21,"offset":3005},"end":{"line":83,"col":67,"offset":3051},"abstract_content":"f\"Protected route accessed by user: {user[0]}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"dbae7296480441022241e42ec8a3f4c0ee5cb5f4c1be1e53816b1031874a7f6c14c3416ed8e002acb4faccbc80570c0e611b2672e80699844cefb035b7646389_0","lines":"        logger.info(f\"Protected route accessed by user: {user[0]}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":79,"col":27,"offset":2765},"end":{"line":79,"col":32,"offset":2770}},"token"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":79,"col":27,"offset":2765},"end":{"line":79,"col":32,"offset":2770}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":11,"offset":2881}},"content":"cursor"},{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":82,"col":8,"offset":2958},"end":{"line":82,"col":12,"offset":2962}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":83,"col":21,"offset":3005},"end":{"line":83,"col":67,"offset":3051}},"f\"Protected route accessed by user: {user[0]}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":110,"col":21,"offset":4413},"end":{"line":110,"col":59,"offset":4451},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"delete"},"$LOGGER":{"start":{"line":12,"col":10,"offset":270},"end":{"line":12,"col":37,"offset":297},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":103,"col":2,"offset":4027},"end":{"line":103,"col":5,"offset":4030},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":251},"svalue_end":{"line":11,"col":16,"offset":260},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":103,"col":6,"offset":4031},"end":{"line":103,"col":12,"offset":4037},"abstract_content":"delete"},"$ROUTESTRING":{"start":{"line":103,"col":14,"offset":4039},"end":{"line":103,"col":30,"offset":4055},"abstract_content":"/delete_account/"},"$FUNC":{"start":{"line":104,"col":11,"offset":4068},"end":{"line":104,"col":25,"offset":4082},"abstract_content":"delete_account"},"$PARAM":{"start":{"line":104,"col":26,"offset":4083},"end":{"line":104,"col":31,"offset":4088},"abstract_content":"token"},"$LOG":{"start":{"line":110,"col":16,"offset":4408},"end":{"line":110,"col":20,"offset":4412},"abstract_content":"info"},"$SINK":{"start":{"line":110,"col":21,"offset":4413},"end":{"line":110,"col":59,"offset":4451},"abstract_content":"f\"Account deleted for user: {user[0]}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f7fa04d1d6fe9327dbfc2fc27561e95d4b445d6afb442a1fb59a92e6fefa45673afa300edfc3dff67ecd5ce3460105e1972dec1c3d3d9b207eab9bdb98c0ff36_0","lines":"        logger.info(f\"Account deleted for user: {user[0]}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":104,"col":26,"offset":4083},"end":{"line":104,"col":31,"offset":4088}},"token"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":104,"col":26,"offset":4083},"end":{"line":104,"col":31,"offset":4088}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":106,"col":5,"offset":4192},"end":{"line":106,"col":11,"offset":4198}},"content":"cursor"},{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":107,"col":8,"offset":4275},"end":{"line":107,"col":12,"offset":4279}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":110,"col":21,"offset":4413},"end":{"line":110,"col":59,"offset":4451}},"f\"Account deleted for user: {user[0]}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":126,"col":17,"offset":5033},"end":{"line":126,"col":92,"offset":5108},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"info"},"$LOGGER":{"start":{"line":12,"col":10,"offset":270},"end":{"line":12,"col":37,"offset":297},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":121,"col":2,"offset":4828},"end":{"line":121,"col":5,"offset":4831},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":251},"svalue_end":{"line":11,"col":16,"offset":260},"svalue_abstract_content":"FastAPI()"}},"$FUNC":{"start":{"line":122,"col":11,"offset":4861},"end":{"line":122,"col":23,"offset":4873},"abstract_content":"log_requests"},"$FASTAPI_REQUEST":{"start":{"line":122,"col":24,"offset":4874},"end":{"line":122,"col":31,"offset":4881},"abstract_content":"request"},"$LOG":{"start":{"line":126,"col":12,"offset":5028},"end":{"line":126,"col":16,"offset":5032},"abstract_content":"info"},"$SINK":{"start":{"line":126,"col":17,"offset":5033},"end":{"line":126,"col":92,"offset":5108},"abstract_content":"f\"Request: {request.method} {request.url.path} - Time: {process_time:.2 f}s\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8ad6b2a3dcf165a59c45a1981d962355bdec1ef3e225cc7af23c070a8f4b01a8354ca89064cb6bc21d32c2bdba55379dcee668f9a8a7c198994852cdc63afb78_0","lines":"    logger.info(f\"Request: {request.method} {request.url.path} - Time: {process_time:.2f}s\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":122,"col":24,"offset":4874},"end":{"line":122,"col":31,"offset":4881}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":122,"col":24,"offset":4874},"end":{"line":122,"col":31,"offset":4881}},"content":"request"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-117/sample_59_original.py","start":{"line":126,"col":17,"offset":5033},"end":{"line":126,"col":92,"offset":5108}},"f\"Request: {request.method} {request.url.path} - Time: {process_time:.2f}s\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":43,"col":30,"offset":1374},"end":{"line":43,"col":71,"offset":1415},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":36,"col":28,"offset":1028},"end":{"line":36,"col":32,"offset":1032},"abstract_content":"form"},"$LOG":{"start":{"line":43,"col":25,"offset":1369},"end":{"line":43,"col":29,"offset":1373},"abstract_content":"info"},"$SINK":{"start":{"line":43,"col":30,"offset":1374},"end":{"line":43,"col":71,"offset":1415},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5477112a844571429c427d02d3971e864ca6e89033ae9268ef274996dc8080f77aa6d198c9865d49338cc170e40241a7ac7f5ac7ac7cc1d7ba2c381bed8d5f27_0","lines":"                logging.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":36,"col":20,"offset":1020},"end":{"line":36,"col":44,"offset":1044}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":36,"col":9,"offset":1009},"end":{"line":36,"col":17,"offset":1017}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":43,"col":30,"offset":1374},"end":{"line":43,"col":71,"offset":1415}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":45,"col":29,"offset":1499},"end":{"line":45,"col":72,"offset":1542},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":36,"col":28,"offset":1028},"end":{"line":36,"col":32,"offset":1032},"abstract_content":"form"},"$LOG":{"start":{"line":45,"col":21,"offset":1491},"end":{"line":45,"col":28,"offset":1498},"abstract_content":"warning"},"$SINK":{"start":{"line":45,"col":29,"offset":1499},"end":{"line":45,"col":72,"offset":1542},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4c92021f7272f14e0dea0c1817de52030e1354c6b519ef3641b9f245dad2741ce4061dbc5cb0847c88c2edd248df6bbdd493dc1bf8eebac12e4eddc95ced29b3_0","lines":"            logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":36,"col":20,"offset":1020},"end":{"line":36,"col":44,"offset":1044}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":36,"col":9,"offset":1009},"end":{"line":36,"col":17,"offset":1017}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":45,"col":29,"offset":1499},"end":{"line":45,"col":72,"offset":1542}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":49,"col":12,"offset":1678},"end":{"line":55,"col":9,"offset":1934},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1ca049eee33043f398c5ec016d0b4df1c6798e5490ffa1262748351e435808ad67893f69c6245953b1c482795ed1e25495ae62cfab4f64b8b20638788eccf8e3_0","lines":"    return render_template_string('''\n        <form method=\"post\">\n            Username: <input type=\"text\" name=\"username\"><br>\n            Password: <input type=\"password\" name=\"password\"><br>\n            <input type=\"submit\" value=\"Login\">\n        </form>\n    ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":70,"col":26,"offset":2570},"end":{"line":70,"col":60,"offset":2604},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":60,"col":28,"offset":2061},"end":{"line":60,"col":32,"offset":2065},"abstract_content":"form"},"$LOG":{"start":{"line":70,"col":21,"offset":2565},"end":{"line":70,"col":25,"offset":2569},"abstract_content":"info"},"$SINK":{"start":{"line":70,"col":26,"offset":2570},"end":{"line":70,"col":60,"offset":2604},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3575ed56c4afd42db5e910a3ac01aec3c84393ac09f54e707a681b8af453cc9819575eb96092e93fcabb528895b2ee01baad769242064baa94ab4da3328ff083_0","lines":"            logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":60,"col":20,"offset":2053},"end":{"line":60,"col":44,"offset":2077}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":60,"col":9,"offset":2042},"end":{"line":60,"col":17,"offset":2050}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":70,"col":26,"offset":2570},"end":{"line":70,"col":60,"offset":2604}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":75,"col":12,"offset":2793},"end":{"line":81,"col":9,"offset":3052},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1ca049eee33043f398c5ec016d0b4df1c6798e5490ffa1262748351e435808ad67893f69c6245953b1c482795ed1e25495ae62cfab4f64b8b20638788eccf8e3_1","lines":"    return render_template_string('''\n        <form method=\"post\">\n            Username: <input type=\"text\" name=\"username\"><br>\n            Password: <input type=\"password\" name=\"password\"><br>\n            <input type=\"submit\" value=\"Register\">\n        </form>\n    ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":89,"col":16,"offset":3264},"end":{"line":99,"col":30,"offset":3740},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1ca049eee33043f398c5ec016d0b4df1c6798e5490ffa1262748351e435808ad67893f69c6245953b1c482795ed1e25495ae62cfab4f64b8b20638788eccf8e3_2","lines":"        return render_template_string('''\n            <h1>Dashboard</h1>\n            <a href=\"{{ url_for('create_report') }}\">Create New Report</a><br>\n            <h2>Your Reports:</h2>\n            <ul>\n            {% for report in reports %}\n                <li><a href=\"{{ url_for('download_report', report_id=report['id']) }}\">{{ report['title'] }}</a></li>\n            {% endfor %}\n            </ul>\n            <a href=\"{{ url_for('logout') }}\">Logout</a>\n        ''', reports=reports)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":114,"col":26,"offset":4261},"end":{"line":114,"col":56,"offset":4291},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":108,"col":25,"offset":4005},"end":{"line":108,"col":29,"offset":4009},"abstract_content":"form"},"$LOG":{"start":{"line":114,"col":21,"offset":4256},"end":{"line":114,"col":25,"offset":4260},"abstract_content":"info"},"$SINK":{"start":{"line":114,"col":26,"offset":4261},"end":{"line":114,"col":56,"offset":4291},"abstract_content":"f\"New report created: {title}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e2aaf32d09cce1c270726081e781fd45a87691ecb242d2b2bafe09bd9e317317aed57a4878113f2fdc422df09cf145e3a79a2da5ccf8393f8fc0c08ff892db00_0","lines":"            logging.info(f\"New report created: {title}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":108,"col":17,"offset":3997},"end":{"line":108,"col":38,"offset":4018}},"request.form['title']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":108,"col":9,"offset":3989},"end":{"line":108,"col":14,"offset":3994}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":114,"col":26,"offset":4261},"end":{"line":114,"col":56,"offset":4291}},"f\"New report created: {title}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":119,"col":12,"offset":4485},"end":{"line":126,"col":9,"offset":4790},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1ca049eee33043f398c5ec016d0b4df1c6798e5490ffa1262748351e435808ad67893f69c6245953b1c482795ed1e25495ae62cfab4f64b8b20638788eccf8e3_3","lines":"    return render_template_string('''\n        <form method=\"post\">\n            Title: <input type=\"text\" name=\"title\"><br>\n            Data (one item per line): <br>\n            <textarea name=\"data\" rows=\"10\" cols=\"50\"></textarea><br>\n            <input type=\"submit\" value=\"Create Report\">\n        </form>\n    ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":141,"col":26,"offset":5412},"end":{"line":141,"col":65,"offset":5451},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":128,"col":2,"offset":4793},"end":{"line":128,"col":5,"offset":4796},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":265},"svalue_end":{"line":9,"col":22,"offset":280},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":128,"col":6,"offset":4797},"end":{"line":128,"col":11,"offset":4802},"abstract_content":"route"},"$FUNC":{"start":{"line":130,"col":5,"offset":4859},"end":{"line":130,"col":20,"offset":4874},"abstract_content":"download_report"},"$PARAM":{"start":{"line":130,"col":21,"offset":4875},"end":{"line":130,"col":30,"offset":4884},"abstract_content":"report_id"},"$LOG":{"start":{"line":141,"col":21,"offset":5407},"end":{"line":141,"col":25,"offset":5411},"abstract_content":"info"},"$SINK":{"start":{"line":141,"col":26,"offset":5412},"end":{"line":141,"col":65,"offset":5451},"abstract_content":"f\"Report downloaded: {report['title']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8adc222380dd97b3c7c4af9594ac9fa9a32827d91496e52986aa5c00931f2508d3f464a360ef9046ac9e900d9b3cb9b8d9d06fd858537a3876d82ebc63fef7c8_0","lines":"            logging.info(f\"Report downloaded: {report['title']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":130,"col":21,"offset":4875},"end":{"line":130,"col":30,"offset":4884}},"report_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":130,"col":21,"offset":4875},"end":{"line":130,"col":30,"offset":4884}},"content":"report_id"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":133,"col":9,"offset":4926},"end":{"line":133,"col":15,"offset":4932}},"content":"report"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":141,"col":26,"offset":5412},"end":{"line":141,"col":65,"offset":5451}},"f\"Report downloaded: {report['title']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":177,"col":5,"offset":6639},"end":{"line":177,"col":24,"offset":6658},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"423a0d3a6dd41f05e63dbf9be621ac6513668245331e2bec44fcb3238e1be54a41307e2b86695049ba32069f29c16ba9af57ce7d40ffed4b69c40cb877d8159f_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-1236/sample_154_original.py","start":{"line":177,"col":5,"offset":6639},"end":{"line":177,"col":24,"offset":6658},"extra":{"metavars":{"$APP":{"start":{"line":177,"col":5,"offset":6639},"end":{"line":177,"col":8,"offset":6642},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":265},"svalue_end":{"line":9,"col":22,"offset":280},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"c7d7060ccfb02ebee50415c5402bcb49627b2e39b1a278265b9b2c4c63f61fb3c91fb87ef2929a5bae6b28f03f56be0be3ec04dcab42ed05509e77353c62c60e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":51,"col":9,"offset":1480},"end":{"line":52,"col":73,"offset":1630},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":40,"col":20,"offset":1167},"end":{"line":40,"col":28,"offset":1175},"abstract_content":"get_json"},"$O":{"start":{"line":50,"col":15,"offset":1458},"end":{"line":50,"col":28,"offset":1471},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":51,"col":21,"offset":1492},"end":{"line":51,"col":85,"offset":1556},"abstract_content":"\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"86925a866134c09d6c8b5f4ecb9dcd5aca0d910ba1871de3672a34f327fc5cbb0338ad2313893ed1e220ddaa1f663b3224959f17894469cb97a7ec5b8d58adc9_0","lines":"        cur.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                    (username, generate_password_hash(password), email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":40,"col":12,"offset":1159},"end":{"line":40,"col":30,"offset":1177}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":40,"col":5,"offset":1152},"end":{"line":40,"col":9,"offset":1156}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":41,"col":5,"offset":1182},"end":{"line":41,"col":13,"offset":1190}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":51,"col":9,"offset":1480},"end":{"line":52,"col":73,"offset":1630}},"cur.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                    (username, generate_password_hash(password), email))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":51,"col":9,"offset":1480},"end":{"line":52,"col":73,"offset":1630},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":40,"col":20,"offset":1167},"end":{"line":40,"col":28,"offset":1175},"abstract_content":"get_json"},"$O":{"start":{"line":50,"col":15,"offset":1458},"end":{"line":50,"col":28,"offset":1471},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":51,"col":21,"offset":1492},"end":{"line":51,"col":85,"offset":1556},"abstract_content":"\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"c67339411ede95c7371854747866ee1d76f3552bed086972d15a28609d839f5a85b34b8325c34187ca12ff2f844cb9b24959d2c05f4b922431e11eb6dd5338f0_0","lines":"        cur.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                    (username, generate_password_hash(password), email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":40,"col":12,"offset":1159},"end":{"line":40,"col":30,"offset":1177}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":40,"col":5,"offset":1152},"end":{"line":40,"col":9,"offset":1156}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":41,"col":5,"offset":1182},"end":{"line":41,"col":13,"offset":1190}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":51,"col":9,"offset":1480},"end":{"line":52,"col":73,"offset":1630}},"cur.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                    (username, generate_password_hash(password), email))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":54,"col":22,"offset":1674},"end":{"line":54,"col":52,"offset":1704},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":40,"col":20,"offset":1167},"end":{"line":40,"col":28,"offset":1175},"abstract_content":"get_json"},"$LOG":{"start":{"line":54,"col":17,"offset":1669},"end":{"line":54,"col":21,"offset":1673},"abstract_content":"info"},"$SINK":{"start":{"line":54,"col":22,"offset":1674},"end":{"line":54,"col":52,"offset":1704},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"878dc24e32d9bbae8850d1c7221d4f0a4129d294f8fcdb4b4192bf7e391118f7ff2fb48f6de8c0ca5b2c84cb6f51e926433e2aff2aa5398435c895eee59740ce_0","lines":"        logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":40,"col":12,"offset":1159},"end":{"line":40,"col":30,"offset":1177}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":40,"col":5,"offset":1152},"end":{"line":40,"col":9,"offset":1156}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":41,"col":5,"offset":1182},"end":{"line":41,"col":13,"offset":1190}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":54,"col":22,"offset":1674},"end":{"line":54,"col":52,"offset":1704}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":76,"col":26,"offset":2525},"end":{"line":76,"col":55,"offset":2554},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":66,"col":20,"offset":2152},"end":{"line":66,"col":28,"offset":2160},"abstract_content":"get_json"},"$LOG":{"start":{"line":76,"col":21,"offset":2520},"end":{"line":76,"col":25,"offset":2524},"abstract_content":"info"},"$SINK":{"start":{"line":76,"col":26,"offset":2525},"end":{"line":76,"col":55,"offset":2554},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c392813de4a95cb4ebc481783f8dc48a08216d157a080ec2dae680760e8ef70c4dadb73ff0bd30b55e56aa805b9b7769ff07f1449b087cf9425619939a55e946_0","lines":"            logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":66,"col":12,"offset":2144},"end":{"line":66,"col":30,"offset":2162}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":66,"col":5,"offset":2137},"end":{"line":66,"col":9,"offset":2141}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":67,"col":5,"offset":2167},"end":{"line":67,"col":13,"offset":2175}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":76,"col":26,"offset":2525},"end":{"line":76,"col":55,"offset":2554}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":155,"col":13,"offset":5356},"end":{"line":155,"col":100,"offset":5443},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":147,"col":20,"offset":5164},"end":{"line":147,"col":28,"offset":5172},"abstract_content":"get_json"},"$O":{"start":{"line":153,"col":15,"offset":5308},"end":{"line":153,"col":28,"offset":5321},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":155,"col":25,"offset":5368},"end":{"line":155,"col":66,"offset":5409},"abstract_content":"\"UPDATE users SET email = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"8336bf979dd6cf0a68bd8443c1f258a612718a9f67512ebd0e1d4fec43226a799e94f419ffb330b74bb0256ae6d1e6180b4d9cfe0c0d04cd042e41594c11c59b_0","lines":"            cur.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":12,"offset":5156},"end":{"line":147,"col":30,"offset":5174}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":5,"offset":5149},"end":{"line":147,"col":9,"offset":5153}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":148,"col":5,"offset":5179},"end":{"line":148,"col":14,"offset":5188}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":155,"col":13,"offset":5356},"end":{"line":155,"col":100,"offset":5443}},"cur.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":155,"col":13,"offset":5356},"end":{"line":155,"col":100,"offset":5443},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":147,"col":20,"offset":5164},"end":{"line":147,"col":28,"offset":5172},"abstract_content":"get_json"},"$O":{"start":{"line":153,"col":15,"offset":5308},"end":{"line":153,"col":28,"offset":5321},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":155,"col":25,"offset":5368},"end":{"line":155,"col":66,"offset":5409},"abstract_content":"\"UPDATE users SET email = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"4e371ecba48dba1533bd1e88a2fa3c9db63b7c9168c9e2fb46db8b4980a8cc5b0f0f7433798911413b9b68e97bbd698ba16e515829d5ea1cc1dc71e60b3adf72_0","lines":"            cur.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":12,"offset":5156},"end":{"line":147,"col":30,"offset":5174}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":5,"offset":5149},"end":{"line":147,"col":9,"offset":5153}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":148,"col":5,"offset":5179},"end":{"line":148,"col":14,"offset":5188}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":155,"col":13,"offset":5356},"end":{"line":155,"col":100,"offset":5443}},"cur.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":158,"col":13,"offset":5548},"end":{"line":158,"col":109,"offset":5644},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":147,"col":20,"offset":5164},"end":{"line":147,"col":28,"offset":5172},"abstract_content":"get_json"},"$O":{"start":{"line":158,"col":13,"offset":5548},"end":{"line":158,"col":16,"offset":5551},"abstract_content":"cur"},"$SINK":{"start":{"line":158,"col":25,"offset":5560},"end":{"line":158,"col":69,"offset":5604},"abstract_content":"\"UPDATE users SET password = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"e9332dfe79b6440db5bcee35dc5b86d93daa6ee474e9ff32ae2a8dc1567013c0b6c11a417f4c3e6f139a49aaa3b50901c33fb89edde0a768f9309d52a28cac35_0","lines":"            cur.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":12,"offset":5156},"end":{"line":147,"col":30,"offset":5174}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":5,"offset":5149},"end":{"line":147,"col":9,"offset":5153}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":149,"col":5,"offset":5213},"end":{"line":149,"col":17,"offset":5225}},"content":"new_password"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":157,"col":13,"offset":5481},"end":{"line":157,"col":28,"offset":5496}},"content":"hashed_password"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":158,"col":13,"offset":5548},"end":{"line":158,"col":109,"offset":5644}},"cur.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":158,"col":13,"offset":5548},"end":{"line":158,"col":109,"offset":5644},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":147,"col":20,"offset":5164},"end":{"line":147,"col":28,"offset":5172},"abstract_content":"get_json"},"$O":{"start":{"line":158,"col":13,"offset":5548},"end":{"line":158,"col":16,"offset":5551},"abstract_content":"cur"},"$SINK":{"start":{"line":158,"col":25,"offset":5560},"end":{"line":158,"col":69,"offset":5604},"abstract_content":"\"UPDATE users SET password = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"cb61da173adf3c1dc58b1364a0072a9c37234ab19b9038baed26053a7784161c89815a31aa25827b8b44de140e7e60dbe52e2be6218055ba56679e44d9699494_0","lines":"            cur.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":12,"offset":5156},"end":{"line":147,"col":30,"offset":5174}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":147,"col":5,"offset":5149},"end":{"line":147,"col":9,"offset":5153}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":149,"col":5,"offset":5213},"end":{"line":149,"col":17,"offset":5225}},"content":"new_password"},{"location":{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":157,"col":13,"offset":5481},"end":{"line":157,"col":28,"offset":5496}},"content":"hashed_password"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":158,"col":13,"offset":5548},"end":{"line":158,"col":109,"offset":5644}},"cur.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":189,"col":5,"offset":6719},"end":{"line":189,"col":24,"offset":6738},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9f63d89c0a1407bbcad735ae2d6bb87dd9c5ae3652984dca536fcbc6516661110905ffdc7a500d90116b7ee16a5067b00293b771d71020ed85a6730abd751d8a_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-1236/sample_155_original.py","start":{"line":189,"col":5,"offset":6719},"end":{"line":189,"col":24,"offset":6738},"extra":{"metavars":{"$APP":{"start":{"line":189,"col":5,"offset":6719},"end":{"line":189,"col":8,"offset":6722},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":219},"svalue_end":{"line":10,"col":28,"offset":240},"svalue_abstract_content":"flask.Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"2180910da4f1f7c87d3e99b3f5eec4f96bb786de871178343ed2709e180cd62a5242d9bd384747e48f15bcd7b2a39c7a16d714e07206ad9d2c9535a46d41e23c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","path":"vulnerability_samples/CWE-20/sample_156_original.py","start":{"line":39,"col":31,"offset":1295},"end":{"line":39,"col":55,"offset":1319},"extra":{"metavars":{"$FUNC":{"start":{"line":34,"col":5,"offset":1127},"end":{"line":34,"col":20,"offset":1142},"abstract_content":"submit_feedback"},"$FORM":{"start":{"line":37,"col":12,"offset":1215},"end":{"line":37,"col":16,"offset":1219},"abstract_content":"form","propagated_value":{"svalue_start":{"line":36,"col":16,"offset":1177},"svalue_end":{"line":36,"col":42,"offset":1203},"svalue_abstract_content":"FeedbackForm(request.POST)"}}},"message":"Use form.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data","metadata":{"category":"security","cwe":"CWE-20: Improper Input Validation","references":["https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","subcategory":["audit"],"technology":["django"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","shortlink":"https://sg.run/kJn7","semgrep.dev":{"rule":{"origin":"community","r_id":73472,"rule_id":"JDUjqx","rule_name":"python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","rv_id":946161,"url":"https://semgrep.dev/playground/r/DkTNpEJ/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","version_id":"DkTNpEJ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"738aa6249dcb338b1802bd5db9bb4c95583eeec69512e010e987a85f07a815de00444893db022c687e1a638031611ecaa3757512f0e34329c33c89045682bf53_0","lines":"                feedback_text=request.POST['feedback'],","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","path":"vulnerability_samples/CWE-20/sample_156_original.py","start":{"line":40,"col":24,"offset":1344},"end":{"line":40,"col":46,"offset":1366},"extra":{"metavars":{"$FUNC":{"start":{"line":34,"col":5,"offset":1127},"end":{"line":34,"col":20,"offset":1142},"abstract_content":"submit_feedback"},"$FORM":{"start":{"line":37,"col":12,"offset":1215},"end":{"line":37,"col":16,"offset":1219},"abstract_content":"form","propagated_value":{"svalue_start":{"line":36,"col":16,"offset":1177},"svalue_end":{"line":36,"col":42,"offset":1203},"svalue_abstract_content":"FeedbackForm(request.POST)"}}},"message":"Use form.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data","metadata":{"category":"security","cwe":"CWE-20: Improper Input Validation","references":["https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","subcategory":["audit"],"technology":["django"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","shortlink":"https://sg.run/kJn7","semgrep.dev":{"rule":{"origin":"community","r_id":73472,"rule_id":"JDUjqx","rule_name":"python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","rv_id":946161,"url":"https://semgrep.dev/playground/r/DkTNpEJ/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","version_id":"DkTNpEJ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"738aa6249dcb338b1802bd5db9bb4c95583eeec69512e010e987a85f07a815de00444893db022c687e1a638031611ecaa3757512f0e34329c33c89045682bf53_1","lines":"                rating=request.POST['rating'],","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","path":"vulnerability_samples/CWE-20/sample_156_original.py","start":{"line":41,"col":28,"offset":1395},"end":{"line":41,"col":54,"offset":1421},"extra":{"metavars":{"$FUNC":{"start":{"line":34,"col":5,"offset":1127},"end":{"line":34,"col":20,"offset":1142},"abstract_content":"submit_feedback"},"$FORM":{"start":{"line":37,"col":12,"offset":1215},"end":{"line":37,"col":16,"offset":1219},"abstract_content":"form","propagated_value":{"svalue_start":{"line":36,"col":16,"offset":1177},"svalue_end":{"line":36,"col":42,"offset":1203},"svalue_abstract_content":"FeedbackForm(request.POST)"}}},"message":"Use form.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data","metadata":{"category":"security","cwe":"CWE-20: Improper Input Validation","references":["https://docs.djangoproject.com/en/4.2/ref/forms/api/#accessing-clean-data"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","subcategory":["audit"],"technology":["django"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","shortlink":"https://sg.run/kJn7","semgrep.dev":{"rule":{"origin":"community","r_id":73472,"rule_id":"JDUjqx","rule_name":"python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","rv_id":946161,"url":"https://semgrep.dev/playground/r/DkTNpEJ/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","version_id":"DkTNpEJ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.django-using-request-post-after-is-valid.django-using-request-post-after-is-valid","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"738aa6249dcb338b1802bd5db9bb4c95583eeec69512e010e987a85f07a815de00444893db022c687e1a638031611ecaa3757512f0e34329c33c89045682bf53_2","lines":"                user_email=request.POST['user_email'],","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":29,"col":21,"offset":758},"end":{"line":29,"col":41,"offset":778},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":12,"col":10,"offset":303},"end":{"line":12,"col":37,"offset":330},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":24,"col":23,"offset":541},"end":{"line":24,"col":27,"offset":545},"abstract_content":"json"},"$LOG":{"start":{"line":29,"col":16,"offset":753},"end":{"line":29,"col":20,"offset":757},"abstract_content":"info"},"$SINK":{"start":{"line":29,"col":21,"offset":758},"end":{"line":29,"col":41,"offset":778},"abstract_content":"f\"Set {key}={value}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7a8231e9af1a8f32b01568311800ab07ac7253ab160269bd901eb5a39e1d61f3ac516f0a77bc78f91636b048566e4ab18d7522d8dbbf0016734491c7ec39a280_0","lines":"        logger.info(f\"Set {key}={value}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":24,"col":15,"offset":533},"end":{"line":24,"col":38,"offset":556}},"request.json.get('key')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":24,"col":9,"offset":527},"end":{"line":24,"col":12,"offset":530}},"content":"key"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":29,"col":21,"offset":758},"end":{"line":29,"col":41,"offset":778}},"f\"Set {key}={value}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":44,"col":21,"offset":1369},"end":{"line":44,"col":47,"offset":1395},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":12,"col":10,"offset":303},"end":{"line":12,"col":37,"offset":330},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":38,"col":2,"offset":1181},"end":{"line":38,"col":5,"offset":1184},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":170},"svalue_end":{"line":9,"col":22,"offset":185},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":38,"col":6,"offset":1185},"end":{"line":38,"col":11,"offset":1190},"abstract_content":"route"},"$FUNC":{"start":{"line":39,"col":5,"offset":1209},"end":{"line":39,"col":14,"offset":1218},"abstract_content":"get_value"},"$PARAM":{"start":{"line":39,"col":15,"offset":1219},"end":{"line":39,"col":18,"offset":1222},"abstract_content":"key"},"$LOG":{"start":{"line":44,"col":16,"offset":1364},"end":{"line":44,"col":20,"offset":1368},"abstract_content":"info"},"$SINK":{"start":{"line":44,"col":21,"offset":1369},"end":{"line":44,"col":47,"offset":1395},"abstract_content":"f\"Retrieved {key}={value}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e3bd434a5b1a44936ce89647fffe37e4793bf9db71861e1ab0e641257f48996f55fd64782ed7304ff56d2ab0d692343bd5189bbe15ac52ce2fec1e032dfe6fc7_0","lines":"        logger.info(f\"Retrieved {key}={value}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":39,"col":15,"offset":1219},"end":{"line":39,"col":18,"offset":1222}},"key"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":39,"col":15,"offset":1219},"end":{"line":39,"col":18,"offset":1222}},"content":"key"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":44,"col":21,"offset":1369},"end":{"line":44,"col":47,"offset":1395}},"f\"Retrieved {key}={value}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":59,"col":21,"offset":1997},"end":{"line":59,"col":42,"offset":2018},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":12,"col":10,"offset":303},"end":{"line":12,"col":37,"offset":330},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":53,"col":2,"offset":1783},"end":{"line":53,"col":5,"offset":1786},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":170},"svalue_end":{"line":9,"col":22,"offset":185},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":53,"col":6,"offset":1787},"end":{"line":53,"col":11,"offset":1792},"abstract_content":"route"},"$FUNC":{"start":{"line":54,"col":5,"offset":1834},"end":{"line":54,"col":17,"offset":1846},"abstract_content":"delete_value"},"$PARAM":{"start":{"line":54,"col":18,"offset":1847},"end":{"line":54,"col":21,"offset":1850},"abstract_content":"key"},"$LOG":{"start":{"line":59,"col":16,"offset":1992},"end":{"line":59,"col":20,"offset":1996},"abstract_content":"info"},"$SINK":{"start":{"line":59,"col":21,"offset":1997},"end":{"line":59,"col":42,"offset":2018},"abstract_content":"f\"Deleted key: {key}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"05d7d87ca384c8c94c0433fcbb61aba0f24459664ebfb3945dee30c1aae96ce5c38724d788362496b802dd2034d8e5f772480b2a976b666ea98735788a4af147_0","lines":"        logger.info(f\"Deleted key: {key}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":54,"col":18,"offset":1847},"end":{"line":54,"col":21,"offset":1850}},"key"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":54,"col":18,"offset":1847},"end":{"line":54,"col":21,"offset":1850}},"content":"key"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":59,"col":21,"offset":1997},"end":{"line":59,"col":42,"offset":2018}},"f\"Deleted key: {key}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":103,"col":5,"offset":3866},"end":{"line":104,"col":30,"offset":3949},"extra":{"metavars":{"$S":{"start":{"line":103,"col":5,"offset":3866},"end":{"line":103,"col":6,"offset":3867},"abstract_content":"s"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rule_name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d4ca3776304ce4ddd575a9de0bff5a600f73640ff723d78aee59165ad376da849ad8ed1c18eedc9866f05227b4aa6d77c9f3a62e0b7d081ed069bca04e39c886_0","lines":"    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('0.0.0.0', 1337))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":137,"col":5,"offset":4904},"end":{"line":137,"col":51,"offset":4950},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d5b7a48f4712dbfe0b4e1ac68c70f7bab0c2e29c9c8335c580cbc7b58ec31dfd6e057979f45829ae32541d4e8dedf88fb87772b6d3c71ea66ec16b56044842ad_0","lines":"    app.run(debug=True, host='0.0.0.0', port=5000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":137,"col":5,"offset":4904},"end":{"line":137,"col":51,"offset":4950},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"b47a9576099bda45a65c75c53c80f77951da3e2c72cc9b12c3b35de647ff3874d2d0d057c99a1e50d952212e9681677e52c94865f768a1f3a23b23b5d686ea5c_0","lines":"    app.run(debug=True, host='0.0.0.0', port=5000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-200/sample_0_original.py","start":{"line":137,"col":5,"offset":4904},"end":{"line":137,"col":51,"offset":4950},"extra":{"metavars":{"$APP":{"start":{"line":137,"col":5,"offset":4904},"end":{"line":137,"col":8,"offset":4907},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":170},"svalue_end":{"line":9,"col":22,"offset":185},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"77c7f0d781c2d3c87e7200e19825393937acce593ba0f073b4326567ed173220763f224ebabfc43bc0e681d3971ef381242dd97e29fec0c823782ec8ea7f4a9e_0","lines":"    app.run(debug=True, host='0.0.0.0', port=5000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"vulnerability_samples/CWE-200/sample_107_original.py","start":{"line":77,"col":9,"offset":2746},"end":{"line":78,"col":63,"offset":2873},"extra":{"metavars":{"$S":{"start":{"line":77,"col":9,"offset":2746},"end":{"line":77,"col":20,"offset":2757},"abstract_content":"ipv6_server"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rule_name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"95babd3bfd66e24b22979b154dfc40dff7ea6aac85548d53f251329d59d7e77443b581478f547a8851c2eafa6907415ec96db0007034411c471218994a589c96_0","lines":"        ipv6_server = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n        ipv6_server.bind((\"::\", self.config.get('ipv6_port')))  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":41,"col":17,"offset":1369},"end":{"line":41,"col":103,"offset":1455},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"path"},"$O":{"start":{"line":19,"col":13,"offset":465},"end":{"line":19,"col":29,"offset":481},"abstract_content":"db_conn.cursor()"},"$SERVER":{"start":{"line":29,"col":7,"offset":734},"end":{"line":29,"col":27,"offset":754},"abstract_content":"MyHTTPRequestHandler"},"$PROPERTY":{"start":{"line":40,"col":32,"offset":1333},"end":{"line":40,"col":36,"offset":1337},"abstract_content":"path"},"$SINK":{"start":{"line":41,"col":35,"offset":1387},"end":{"line":41,"col":90,"offset":1442},"abstract_content":"\"SELECT id, username, created_at FROM users WHERE id=?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via lang","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::lang","web::source::form-data::lang","web::source::header::lang","web::source::http-body::lang","web::source::http-params::lang","web::source::url-path-params::lang"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["http","http.server","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","shortlink":"https://sg.run/6JDJ6","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151059,"rule_id":"j2UgXg3","rule_name":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","rv_id":1015026,"url":"https://semgrep.dev/playground/r/ZRT3LNP/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","version_id":"ZRT3LNP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"3a474a9588991dd231787f3e0d98f7e33732778c3379cd2ee9e0ace1dc650368bb76324287d5dc6e59606927644e1ab5c6ea3b5fe50abd8509faea7523b8d61b_0","lines":"                db_cursor.execute(\"SELECT id, username, created_at FROM users WHERE id=?\", (user_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":40,"col":27,"offset":1328},"end":{"line":40,"col":36,"offset":1337}},"self.path"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":40,"col":17,"offset":1318},"end":{"line":40,"col":24,"offset":1325}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":41,"col":17,"offset":1369},"end":{"line":41,"col":103,"offset":1455}},"db_cursor.execute(\"SELECT id, username, created_at FROM users WHERE id=?\", (user_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":70,"col":17,"offset":2782},"end":{"line":71,"col":94,"offset":2964},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"rfile"},"$O":{"start":{"line":19,"col":13,"offset":465},"end":{"line":19,"col":29,"offset":481},"abstract_content":"db_conn.cursor()"},"$SERVER":{"start":{"line":29,"col":7,"offset":734},"end":{"line":29,"col":27,"offset":754},"abstract_content":"MyHTTPRequestHandler"},"$PROPERTY":{"start":{"line":63,"col":34,"offset":2427},"end":{"line":63,"col":39,"offset":2432},"abstract_content":"rfile"},"$SINK":{"start":{"line":70,"col":35,"offset":2800},"end":{"line":70,"col":104,"offset":2869},"abstract_content":"\"INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via lang","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::lang","web::source::form-data::lang","web::source::header::lang","web::source::http-body::lang","web::source::http-params::lang","web::source::url-path-params::lang"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["http","http.server","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","shortlink":"https://sg.run/6JDJ6","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151059,"rule_id":"j2UgXg3","rule_name":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","rv_id":1015026,"url":"https://semgrep.dev/playground/r/ZRT3LNP/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","version_id":"ZRT3LNP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"c3fcd78b00bfad5898337fca6226db2cd27cb9b01ba4b264cfbfccb3eef8140334931dd7ca58454bc9c352d110fec3af94315e30a989f3af48629bc14189fdc9_0","lines":"                db_cursor.execute(\"INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)\",\n                                  (user_data['username'], user_data['password'], created_at))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":63,"col":29,"offset":2422},"end":{"line":63,"col":39,"offset":2432}},"self.rfile"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":63,"col":17,"offset":2410},"end":{"line":63,"col":26,"offset":2419}},"content":"post_data"},{"location":{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":64,"col":17,"offset":2470},"end":{"line":64,"col":26,"offset":2479}},"content":"user_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":70,"col":17,"offset":2782},"end":{"line":71,"col":94,"offset":2964}},"db_cursor.execute(\"INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)\",\n                                  (user_data['username'], user_data['password'], created_at))"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":110,"col":17,"offset":4775},"end":{"line":110,"col":70,"offset":4828},"extra":{"metavars":{"$SQL":{"start":{"line":107,"col":32,"offset":4652},"end":{"line":107,"col":57,"offset":4677},"abstract_content":"update_query.rstrip(', ')"},"$CONNECTION":{"start":{"line":110,"col":17,"offset":4775},"end":{"line":110,"col":26,"offset":4784},"abstract_content":"db_cursor","propagated_value":{"svalue_start":{"line":19,"col":13,"offset":465},"svalue_end":{"line":19,"col":29,"offset":481},"svalue_abstract_content":"db_conn.cursor()"}},"$QUERY":{"start":{"line":110,"col":35,"offset":4793},"end":{"line":110,"col":47,"offset":4805},"abstract_content":"update_query","propagated_value":{"svalue_start":{"line":107,"col":32,"offset":4652},"svalue_end":{"line":107,"col":75,"offset":4695},"svalue_abstract_content":"update_query.rstrip(', ')+\" WHERE id = ?\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"09694959ecad7adc98a677fa587d5420f5b998423d827bf4fb087d06c78e3bf6ada1ae62fd10f0918c981d00e24c3a8675c01f6e0380b64d665940f90ddbf1f2_0","lines":"                db_cursor.execute(update_query, tuple(update_params))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":110,"col":17,"offset":4775},"end":{"line":110,"col":70,"offset":4828},"extra":{"metavars":{"$O":{"start":{"line":19,"col":13,"offset":465},"end":{"line":19,"col":29,"offset":481},"abstract_content":"db_conn.cursor()"},"$SERVER":{"start":{"line":29,"col":7,"offset":734},"end":{"line":29,"col":27,"offset":754},"abstract_content":"MyHTTPRequestHandler"},"$SINK":{"start":{"line":107,"col":32,"offset":4652},"end":{"line":107,"col":75,"offset":4695},"abstract_content":"update_query.rstrip(', ')+\" WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via lang","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::lang","web::source::form-data::lang","web::source::header::lang","web::source::http-body::lang","web::source::http-params::lang","web::source::url-path-params::lang"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["http","http.server","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","shortlink":"https://sg.run/6JDJ6","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151059,"rule_id":"j2UgXg3","rule_name":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","rv_id":1015026,"url":"https://semgrep.dev/playground/r/ZRT3LNP/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","version_id":"ZRT3LNP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"a1b5a7f483d98ba0aae32dc549f99aa6a27598295c9d049c1b6c7687adcedca99090e62408008dcd0add11dd911e1ef3bc28e304f5d2a1a7e5d6b5ea076d5c61_0","lines":"                db_cursor.execute(update_query, tuple(update_params))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":91,"col":27,"offset":3788},"end":{"line":91,"col":36,"offset":3797}},"self.path"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":91,"col":17,"offset":3778},"end":{"line":91,"col":24,"offset":3785}},"content":"user_id"},{"location":{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":108,"col":17,"offset":4712},"end":{"line":108,"col":30,"offset":4725}},"content":"update_params"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":110,"col":17,"offset":4775},"end":{"line":110,"col":70,"offset":4828}},"db_cursor.execute(update_query, tuple(update_params))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":132,"col":17,"offset":5710},"end":{"line":132,"col":80,"offset":5773},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"path"},"$O":{"start":{"line":19,"col":13,"offset":465},"end":{"line":19,"col":29,"offset":481},"abstract_content":"db_conn.cursor()"},"$SERVER":{"start":{"line":29,"col":7,"offset":734},"end":{"line":29,"col":27,"offset":754},"abstract_content":"MyHTTPRequestHandler"},"$PROPERTY":{"start":{"line":131,"col":32,"offset":5674},"end":{"line":131,"col":36,"offset":5678},"abstract_content":"path"},"$SINK":{"start":{"line":132,"col":35,"offset":5728},"end":{"line":132,"col":67,"offset":5760},"abstract_content":"\"DELETE FROM users WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via lang","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::lang","web::source::form-data::lang","web::source::header::lang","web::source::http-body::lang","web::source::http-params::lang","web::source::url-path-params::lang"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["http","http.server","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","shortlink":"https://sg.run/6JDJ6","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151059,"rule_id":"j2UgXg3","rule_name":"python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","rv_id":1015026,"url":"https://semgrep.dev/playground/r/ZRT3LNP/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","version_id":"ZRT3LNP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.lang.sql.prestodb.lang-prestodb-sqli.lang-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"9b333388d9f60d074fb99544f5d5c025822592c490eabc0c146387e015c123ac983fcfe6b04eff56545c53e61f34703ecc774b474acb02e8cfae9a56a63e72ed_0","lines":"                db_cursor.execute(\"DELETE FROM users WHERE id = ?\", (user_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":131,"col":27,"offset":5669},"end":{"line":131,"col":36,"offset":5678}},"self.path"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":131,"col":17,"offset":5659},"end":{"line":131,"col":24,"offset":5666}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":132,"col":17,"offset":5710},"end":{"line":132,"col":80,"offset":5773}},"db_cursor.execute(\"DELETE FROM users WHERE id = ?\", (user_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"vulnerability_samples/CWE-200/sample_108_original.py","start":{"line":165,"col":5,"offset":6974},"end":{"line":166,"col":43,"offset":7079},"extra":{"metavars":{"$S":{"start":{"line":165,"col":5,"offset":6974},"end":{"line":165,"col":15,"offset":6984},"abstract_content":"tcp_server"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rule_name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4a566f2a829b8252a2256953afbb35d89e7f3f0a61d801a7a0d7113a1f3252b787f9766e8ce7e637ad8f593a232b18baa26895a96279c37424cc95135c7cc22c_0","lines":"    tcp_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_server.bind((\"0.0.0.0\", tcp_port))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"vulnerability_samples/CWE-200/sample_4_original.py","start":{"line":30,"col":5,"offset":764},"end":{"line":31,"col":42,"offset":871},"extra":{"metavars":{"$S":{"start":{"line":30,"col":5,"offset":764},"end":{"line":30,"col":18,"offset":777},"abstract_content":"server_socket"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rule_name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"fa8c7f5f55e09649f9702699eeef518dbc1b5b01ad275dca4ca2e1e36cc9add56bb9d083a058011eb16dd401ec87aca8e2d7068e5fd96206324b94d4011aca09_0","lines":"    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', 1337))  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","path":"vulnerability_samples/CWE-22/sample_109_original.py","start":{"line":35,"col":5,"offset":1104},"end":{"line":65,"col":66,"offset":2249},"extra":{"metavars":{"$FUNC":{"start":{"line":34,"col":5,"offset":1077},"end":{"line":34,"col":17,"offset":1089},"abstract_content":"download_doc"},"$DATA":{"start":{"line":35,"col":5,"offset":1104},"end":{"line":35,"col":8,"offset":1107},"abstract_content":"url"},"$W":{"start":{"line":35,"col":19,"offset":1118},"end":{"line":35,"col":22,"offset":1121},"abstract_content":"GET"},"$METHOD":{"start":{"line":54,"col":29,"offset":1656},"end":{"line":54,"col":32,"offset":1659},"abstract_content":"get"}},"message":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","shortlink":"https://sg.run/YvY4","semgrep.dev":{"rule":{"origin":"community","r_id":9514,"rule_id":"j2UvEw","rule_name":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","rv_id":946188,"url":"https://semgrep.dev/playground/r/1QToK1Y/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","version_id":"1QToK1Y"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"902460b128da043674e8fe6a17bf0111eabb32f6ba3a320561b9461cfd28d56b8fba7e7718445766b19322b2e42d209a816e502a55b72aa095927b0ba0e33515_0","lines":"    url = request.GET.get('url')\n    if not url:\n        return HttpResponse('No URL provided', status=400)\n\n    file_extension = os.path.splitext(url)[1]\n    if file_extension not in ALLOWED_EXTENSIONS:\n        return HttpResponse('Invalid file format', status=400)\n\n    file_name = f\"{int(time.time())}{file_extension}\"\n    \n    def file_iterator(_file, chunk_size=512):\n        while True:\n            c = _file.read(chunk_size)\n            if c:\n                yield c\n            else:\n                break\n    \n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        \n        _file = response.raw\n        streaming_response = StreamingHttpResponse(file_iterator(_file))\n        streaming_response['Content-Type'] = 'application/octet-stream'\n        streaming_response['Content-Disposition'] = f'attachment;filename=\"{file_name}\"'\n        logging.info(f\"File downloaded: {url}\")\n        return streaming_response\n    except requests.RequestException as e:\n        logging.error(f\"Error downloading file: {url}. Error: {str(e)}\")\n        return HttpResponse('Error downloading file', status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-22/sample_109_original.py","start":{"line":67,"col":1,"offset":2251},"end":{"line":97,"col":65,"offset":3476},"extra":{"metavars":{"$R":{"start":{"line":68,"col":5,"offset":2268},"end":{"line":68,"col":16,"offset":2279},"abstract_content":"upload_file"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"086539eef390893196c22d567a52639b8f05662c8712ee8a30823ad05a19929f17916739863b098b0458941570f10e6af8711f7133a9561a2cc6b8f974a1c3aa_0","lines":"@csrf_exempt\ndef upload_file(request):\n    if request.method != 'POST':\n        return HttpResponse('Method not allowed', status=405)\n\n    file = request.FILES.get('file')\n    if not file:\n        return HttpResponse('No file provided', status=400)\n\n    try:\n        validate_file_type(file)\n        if file.size > MAX_FILE_SIZE:\n            raise ValidationError(\"File size exceeds maximum limit\")\n\n        safe_filename = sanitize_filename(file.name)\n        file_extension = os.path.splitext(safe_filename)[1]\n        if file_extension not in ALLOWED_EXTENSIONS:\n            raise ValidationError(\"Invalid file type\")\n\n        file_path = os.path.join(UPLOAD_DIR, safe_filename)\n        with open(file_path, 'wb+') as destination:\n            for chunk in file.chunks():\n                destination.write(chunk)\n        logging.info(f\"File uploaded: {safe_filename}\")\n        return HttpResponse('File uploaded successfully', status=200)\n    except ValidationError as e:\n        logging.warning(f\"Validation error: {str(e)}\")\n        return HttpResponse(str(e), status=400)\n    except Exception as e:\n        logging.error(f\"Error uploading file: {str(e)}\")\n        return HttpResponse('Internal server error', status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-22/sample_109_original.py","start":{"line":94,"col":16,"offset":3295},"end":{"line":94,"col":48,"offset":3327},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"819169e87952f5af699fce72767a2af1ce016315f5463301431bd6107a27e4fa2a533ed53133f3c7256122b2a7457cbefe2764d5c6d0e254f166600ff76d33a6_0","lines":"        return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":49,"col":9,"offset":1742},"end":{"line":58,"col":26,"offset":2237},"extra":{"metavars":{"$F":{"start":{"line":48,"col":9,"offset":1704},"end":{"line":48,"col":22,"offset":1717},"abstract_content":"download_file"},"$V":{"start":{"line":49,"col":9,"offset":1742},"end":{"line":49,"col":18,"offset":1751},"abstract_content":"file_name"},"$W":{"start":{"line":49,"col":29,"offset":1762},"end":{"line":49,"col":32,"offset":1765},"abstract_content":"GET"},"$X":{"start":{"line":49,"col":37,"offset":1770},"end":{"line":49,"col":47,"offset":1780},"abstract_content":"'filename'"},"$P":{"start":{"line":52,"col":9,"offset":1896},"end":{"line":52,"col":18,"offset":1905},"abstract_content":"file_path"}},"message":"Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","shortlink":"https://sg.run/Dovo","semgrep.dev":{"rule":{"origin":"community","r_id":9508,"rule_id":"6JUjLj","rule_name":"python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","rv_id":946177,"url":"https://semgrep.dev/playground/r/K3TJb1v/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","version_id":"K3TJb1v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"653976c933f5d4ac05309cfa676f1e7294c1e2011a82914e4097fd2b391c4b267109e1e01b727831eaa2a47db91a0b7a9539a54a17ebe99012694084ffd2cc70_0","lines":"        file_name = request.GET.get('filename')\n        if not file_name:\n            return JsonResponse({'error': 'Filename not provided'}, status=400)\n        file_path = os.path.join(settings.UPLOAD_DIR, file_name)\n        logger.info(f\"User {request.user.username} attempting to download {file_name}\")\n        try:\n            return FileResponse(open(file_path, 'rb'), as_attachment=True)\n        except IOError:\n            logger.warning(f\"File not found: {file_path}\")\n            raise Http404","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":109,"col":5,"offset":4354},"end":{"line":111,"col":58,"offset":4474},"extra":{"metavars":{"$R":{"start":{"line":110,"col":9,"offset":4375},"end":{"line":110,"col":17,"offset":4383},"abstract_content":"dispatch"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ce86594874dc32ef0d4d7e28b6b2fe0c0f139f943420805afa185fbb568062b119d182a5a3740f012e035ad13572d846dc8d0c51d58ed74ddee313b11e00fc9d_0","lines":"    @csrf_exempt\n    def dispatch(self, request, *args, **kwargs):\n        return super().dispatch(request, *args, **kwargs)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":121,"col":27,"offset":4876},"end":{"line":121,"col":69,"offset":4918},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":121,"col":27,"offset":4876},"end":{"line":121,"col":67,"offset":4916},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a2ecf6bb4196d6f820cee5446d24b5d9565108d48a5a1a3ccd3b0df0206cec5eb6c2d740bdd8de3dd07e355f6545b8afa594831f27650d28b6ee535630445228_0","lines":"        hashed_password = hashlib.md5(password.encode()).hexdigest()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":121,"col":27,"offset":4876},"end":{"line":121,"col":38,"offset":4887}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":121,"col":27,"offset":4876},"end":{"line":121,"col":69,"offset":4918}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":124,"col":25,"offset":5052},"end":{"line":124,"col":66,"offset":5093},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":14,"col":10,"offset":458},"end":{"line":14,"col":37,"offset":485},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":108,"col":7,"offset":4330},"end":{"line":108,"col":19,"offset":4342},"abstract_content":"UserAuthView"},"$FUNC":{"start":{"line":113,"col":9,"offset":4484},"end":{"line":113,"col":13,"offset":4488},"abstract_content":"post"},"$SELF":{"start":{"line":113,"col":14,"offset":4489},"end":{"line":113,"col":18,"offset":4493},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":113,"col":20,"offset":4495},"end":{"line":113,"col":27,"offset":4502},"abstract_content":"request"},"$LOG":{"start":{"line":124,"col":20,"offset":5047},"end":{"line":124,"col":24,"offset":5051},"abstract_content":"info"},"$SINK":{"start":{"line":124,"col":25,"offset":5052},"end":{"line":124,"col":66,"offset":5093},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ebf0545ffbd49161849dcc03cfaeef65b04ad08776e91d3aa675637ee43ee40e153cf863c1ce0a7277b82082745b6c39042c7934e62b9945ee74e554d5aeb0db_0","lines":"            logger.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":113,"col":20,"offset":4495},"end":{"line":113,"col":27,"offset":4502}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":113,"col":20,"offset":4495},"end":{"line":113,"col":27,"offset":4502}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":114,"col":9,"offset":4530},"end":{"line":114,"col":13,"offset":4534}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":115,"col":9,"offset":4570},"end":{"line":115,"col":17,"offset":4578}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":124,"col":25,"offset":5052},"end":{"line":124,"col":66,"offset":5093}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":126,"col":24,"offset":5183},"end":{"line":126,"col":67,"offset":5226},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":14,"col":10,"offset":458},"end":{"line":14,"col":37,"offset":485},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":108,"col":7,"offset":4330},"end":{"line":108,"col":19,"offset":4342},"abstract_content":"UserAuthView"},"$FUNC":{"start":{"line":113,"col":9,"offset":4484},"end":{"line":113,"col":13,"offset":4488},"abstract_content":"post"},"$SELF":{"start":{"line":113,"col":14,"offset":4489},"end":{"line":113,"col":18,"offset":4493},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":113,"col":20,"offset":4495},"end":{"line":113,"col":27,"offset":4502},"abstract_content":"request"},"$LOG":{"start":{"line":126,"col":16,"offset":5175},"end":{"line":126,"col":23,"offset":5182},"abstract_content":"warning"},"$SINK":{"start":{"line":126,"col":24,"offset":5183},"end":{"line":126,"col":67,"offset":5226},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"65114a5a7cffccdb10d2790a1fd91310ea02b28fe44d75edda4633870585be67d6fb1787328fbfb087eb45f9c90ff471d91f0977013e48d814e6b6f781ee19e3_0","lines":"        logger.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":113,"col":20,"offset":4495},"end":{"line":113,"col":27,"offset":4502}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":113,"col":20,"offset":4495},"end":{"line":113,"col":27,"offset":4502}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":114,"col":9,"offset":4530},"end":{"line":114,"col":13,"offset":4534}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":115,"col":9,"offset":4570},"end":{"line":115,"col":17,"offset":4578}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_110_original.py","start":{"line":126,"col":24,"offset":5183},"end":{"line":126,"col":67,"offset":5226}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-22/sample_111_original.py","start":{"line":93,"col":1,"offset":3699},"end":{"line":117,"col":73,"offset":5036},"extra":{"metavars":{"$R":{"start":{"line":95,"col":5,"offset":3732},"end":{"line":95,"col":18,"offset":3745},"abstract_content":"file_response"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d04c3b21193884726dcd8bdb3642d95397733574df97a758554abf1ca68f7c0a3c9f0ee24af913d54c219b08d91b34c657ad4d580650bf662ffa3dbf7516a64b_0","lines":"@csrf_exempt\n@login_required\ndef file_response(request):\n    filename = request.POST.get('filename')\n    if not filename:\n        logger.warning(f\"File download attempted without filename by {request.user.username}\")\n        return JsonResponse({'error': 'No filename provided'}, status=400)\n    file_extension = filename.split('.')[-1].lower()\n    if file_extension not in ['pdf', 'txt', 'doc']:\n        logger.warning(f\"Invalid file type {file_extension} download attempted by {request.user.username}\")\n        return JsonResponse({'error': 'Invalid file type'}, status=400)\n    file_path = os.path.join(settings.MEDIA_ROOT, 'user_files', filename)\n    try:\n        if not os.path.exists(file_path):\n            raise CustomFileNotFoundError(\"File not found\")\n        with open(file_path, 'rb') as file:\n            response = FileResponse(file, as_attachment=True, filename=filename)\n            logger.info(f\"File {filename} downloaded by {request.user.username}\")\n            return response\n    except CustomFileNotFoundError:\n        logger.error(f\"File {filename} not found for user {request.user.username}\")\n        return HttpResponse('File not found', status=404)\n    except IOError as e:\n        logger.error(f\"Error reading file {filename}: {str(e)}\")\n        return JsonResponse({'error': 'Error reading file'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-22/sample_111_original.py","start":{"line":134,"col":24,"offset":5734},"end":{"line":134,"col":101,"offset":5811},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"Delete"},"$ANYTHING":{"start":{"line":122,"col":24,"offset":5135},"end":{"line":122,"col":28,"offset":5139},"abstract_content":"POST"},"$SQLSTR":{"start":{"line":134,"col":26,"offset":5736},"end":{"line":134,"col":63,"offset":5773},"abstract_content":"Delete attempt for non-existent file "}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"6fdfe27a2c38f566c17bcd811af5cadea0a6efd74cbaa1ff6e4ffa1a4bd5bf05b346347bdc0fe1d5ca9ef82b3ee95db26090ee5ea63e28486d883ff0c65a2c6b_0","lines":"        logger.warning(f\"Delete attempt for non-existent file {filename} by {request.user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_111_original.py","start":{"line":122,"col":16,"offset":5127},"end":{"line":122,"col":28,"offset":5139}},"request.POST"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_111_original.py","start":{"line":122,"col":5,"offset":5116},"end":{"line":122,"col":13,"offset":5124}},"content":"filename"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_111_original.py","start":{"line":134,"col":24,"offset":5734},"end":{"line":134,"col":101,"offset":5811}},"f\"Delete attempt for non-existent file {filename} by {request.user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":48,"col":26,"offset":1524},"end":{"line":48,"col":54,"offset":1552},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":44,"col":28,"offset":1314},"end":{"line":44,"col":32,"offset":1318},"abstract_content":"form"},"$LOG":{"start":{"line":48,"col":21,"offset":1519},"end":{"line":48,"col":25,"offset":1523},"abstract_content":"info"},"$SINK":{"start":{"line":48,"col":26,"offset":1524},"end":{"line":48,"col":54,"offset":1552},"abstract_content":"f\"User {username} logged in\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"34f8742b937d915155da7639b319cd5a18793bcc4ea325760d3c1291d7c8a86a3bf923b0aa653e94e9ebd8add760b8be7a281fcafab7e1264fce50912153296f_0","lines":"            logging.info(f\"User {username} logged in\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":44,"col":20,"offset":1306},"end":{"line":44,"col":44,"offset":1330}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":44,"col":9,"offset":1295},"end":{"line":44,"col":17,"offset":1303}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":48,"col":26,"offset":1524},"end":{"line":48,"col":54,"offset":1552}},"f\"User {username} logged in\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":50,"col":25,"offset":1623},"end":{"line":50,"col":68,"offset":1666},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":44,"col":28,"offset":1314},"end":{"line":44,"col":32,"offset":1318},"abstract_content":"form"},"$LOG":{"start":{"line":50,"col":17,"offset":1615},"end":{"line":50,"col":24,"offset":1622},"abstract_content":"warning"},"$SINK":{"start":{"line":50,"col":25,"offset":1623},"end":{"line":50,"col":68,"offset":1666},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"886e0058b1528c880d52fc9d0ab538b3e9977bc01f966590e72c625dc5af2d121ab6ceae6b38d0717a22e6542b2aa4901cd359935a6b8e4ab752a4dffea5e360_0","lines":"        logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":44,"col":20,"offset":1306},"end":{"line":44,"col":44,"offset":1330}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":44,"col":9,"offset":1295},"end":{"line":44,"col":17,"offset":1303}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":50,"col":25,"offset":1623},"end":{"line":50,"col":68,"offset":1666}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.path-traversal-open.path-traversal-open","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":73,"col":14,"offset":2247},"end":{"line":73,"col":45,"offset":2278},"extra":{"metavars":{"$INTERM":{"start":{"line":69,"col":5,"offset":2101},"end":{"line":69,"col":13,"offset":2109},"abstract_content":"log_file"},"$W":{"start":{"line":69,"col":24,"offset":2120},"end":{"line":69,"col":28,"offset":2124},"abstract_content":"args"},"$F":{"start":{"line":73,"col":49,"offset":2282},"end":{"line":73,"col":53,"offset":2286},"abstract_content":"file"}},"message":"Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.","metadata":{"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"owasp":["A05:2017 - Broken Access Control","A01:2021 - Broken Access Control"],"references":["https://owasp.org/www-community/attacks/Path_Traversal"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open","shortlink":"https://sg.run/PJRW","semgrep.dev":{"rule":{"origin":"community","r_id":9545,"rule_id":"DbUpOQ","rule_name":"python.flask.security.injection.path-traversal-open.path-traversal-open","rv_id":946224,"url":"https://semgrep.dev/playground/r/YDTvR9R/python.flask.security.injection.path-traversal-open.path-traversal-open","version_id":"YDTvR9R"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"3128e9702f1f508098a63a0dd2b7aba49187842009e746bbf1613eafcca10ab8a8a78e75d8344afecb6f37df533dc2463fdd9db379da306f232dd1b240e523c9_0","lines":"        with open(f\"./logs/{log_file}\", 'r') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":73,"col":19,"offset":2252},"end":{"line":73,"col":39,"offset":2272},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":69,"col":24,"offset":2120},"end":{"line":69,"col":28,"offset":2124},"abstract_content":"args"},"$SINK":{"start":{"line":73,"col":19,"offset":2252},"end":{"line":73,"col":39,"offset":2272},"abstract_content":"f\"./logs/{log_file}\""}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"c2e0f5fcde70225ec794c184ab396ae66d7bcf71767fa9cd7cfa8aceaf593c8dda46ead5b4c91c2eab19420f3d6a7323268bc849014dabf6f1243190162c146b_0","lines":"        with open(f\"./logs/{log_file}\", 'r') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":69,"col":16,"offset":2112},"end":{"line":69,"col":43,"offset":2139}},"request.args.get('logfile')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":69,"col":5,"offset":2101},"end":{"line":69,"col":13,"offset":2109}},"content":"log_file"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":73,"col":19,"offset":2252},"end":{"line":73,"col":39,"offset":2272}},"f\"./logs/{log_file}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":75,"col":20,"offset":2341},"end":{"line":75,"col":42,"offset":2363},"extra":{"metavars":{},"message":"Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"references":["https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11","https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response","https://flask.palletsprojects.com/en/1.1.x/api/#response-objects"],"category":"security","technology":["flask"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","shortlink":"https://sg.run/3x3p","semgrep.dev":{"rule":{"origin":"community","r_id":9543,"rule_id":"AbUz6A","rule_name":"python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","rv_id":946217,"url":"https://semgrep.dev/playground/r/BjT1N6E/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","version_id":"BjT1N6E"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2b17720d91ee6d59d089304093100c7e5684763bffdf55659f37b7425ec77a18c4d11efa822529156eb65718ac84e44c7a842c082e2907cf2189c1bc737be4dc_0","lines":"        response = make_response(content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.request-data-write.request-data-write","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":87,"col":5,"offset":2721},"end":{"line":96,"col":60,"offset":3163},"extra":{"metavars":{"$DATA":{"start":{"line":87,"col":5,"offset":2721},"end":{"line":87,"col":16,"offset":2732},"abstract_content":"log_content"},"$W":{"start":{"line":87,"col":27,"offset":2743},"end":{"line":87,"col":31,"offset":2747},"abstract_content":"form"},"$F":{"start":{"line":91,"col":13,"offset":2875},"end":{"line":91,"col":17,"offset":2879},"abstract_content":"file","propagated_value":{"svalue_start":{"line":90,"col":14,"offset":2822},"svalue_end":{"line":90,"col":45,"offset":2853},"svalue_abstract_content":"open(f\"./logs/{log_file}\"'a')"}}},"message":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.","metadata":{"cwe":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"],"owasp":["A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","shortlink":"https://sg.run/0Q6j","semgrep.dev":{"rule":{"origin":"community","r_id":9498,"rule_id":"ReUg5z","rule_name":"python.django.security.injection.request-data-write.request-data-write","rv_id":946183,"url":"https://semgrep.dev/playground/r/zyTlkEY/python.django.security.injection.request-data-write.request-data-write","version_id":"zyTlkEY"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4de50bbcead0fae18eb3562bcd9d6d189c2b00f0102aab89c0a278695e1bf8482c884b08f567bdd9cee1f4d90e6178a12185b024a12717367aa7ce6fe418c38c_0","lines":"    log_content = request.form['log_content']\n    log_file = f\"{log_type}_log.txt\"\n    try:\n        with open(f\"./logs/{log_file}\", 'a') as file:\n            file.write(f\"{datetime.now().isoformat()} - {log_content}\\n\")\n        logging.info(f\"Log added to {log_file}\")\n        return 'Log added successfully'\n    except IOError:\n        logging.error(f\"Failed to add log to {log_file}\")\n        abort(500, description=\"Error writing to log file\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":90,"col":19,"offset":2827},"end":{"line":90,"col":39,"offset":2847},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":86,"col":24,"offset":2700},"end":{"line":86,"col":28,"offset":2704},"abstract_content":"form"},"$SINK":{"start":{"line":90,"col":19,"offset":2827},"end":{"line":90,"col":39,"offset":2847},"abstract_content":"f\"./logs/{log_file}\""}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"3c2e8ef294e83cf456f2877cb274951a0f750e2b03107e7642c8bbe677a8f01cb862bc6ed6f37c5aad42bbec638d2fa56728f3280ced7155c7d440eaebd19d37_0","lines":"        with open(f\"./logs/{log_file}\", 'a') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":86,"col":16,"offset":2692},"end":{"line":86,"col":40,"offset":2716}},"request.form['log_type']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":86,"col":5,"offset":2681},"end":{"line":86,"col":13,"offset":2689}},"content":"log_type"},{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":88,"col":5,"offset":2767},"end":{"line":88,"col":13,"offset":2775}},"content":"log_file"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":90,"col":19,"offset":2827},"end":{"line":90,"col":39,"offset":2847}},"f\"./logs/{log_file}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":92,"col":22,"offset":2958},"end":{"line":92,"col":48,"offset":2984},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":86,"col":24,"offset":2700},"end":{"line":86,"col":28,"offset":2704},"abstract_content":"form"},"$LOG":{"start":{"line":92,"col":17,"offset":2953},"end":{"line":92,"col":21,"offset":2957},"abstract_content":"info"},"$SINK":{"start":{"line":92,"col":22,"offset":2958},"end":{"line":92,"col":48,"offset":2984},"abstract_content":"f\"Log added to {log_file}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d00c0bdfba87b07b70935c2c0dc2708fd1186d5b5a6ed9ed630d5650781b591bd8968a467f26863e6c660a3cfb61fa943deb25b503397b14a9e0946bc19bcc27_0","lines":"        logging.info(f\"Log added to {log_file}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":86,"col":16,"offset":2692},"end":{"line":86,"col":40,"offset":2716}},"request.form['log_type']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":86,"col":5,"offset":2681},"end":{"line":86,"col":13,"offset":2689}},"content":"log_type"},{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":88,"col":5,"offset":2767},"end":{"line":88,"col":13,"offset":2775}},"content":"log_file"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":92,"col":22,"offset":2958},"end":{"line":92,"col":48,"offset":2984}},"f\"Log added to {log_file}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":95,"col":23,"offset":3068},"end":{"line":95,"col":57,"offset":3102},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":86,"col":24,"offset":2700},"end":{"line":86,"col":28,"offset":2704},"abstract_content":"form"},"$LOG":{"start":{"line":95,"col":17,"offset":3062},"end":{"line":95,"col":22,"offset":3067},"abstract_content":"error"},"$SINK":{"start":{"line":95,"col":23,"offset":3068},"end":{"line":95,"col":57,"offset":3102},"abstract_content":"f\"Failed to add log to {log_file}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9ea1596774da8e532a82c1870cda2ffcfb8898824bc92710d4248a2a9281c8b389ade869fe90037b7a12aef18cd6bb2ecafd7840b7f9aacedadf74ebf903c1ce_0","lines":"        logging.error(f\"Failed to add log to {log_file}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":86,"col":16,"offset":2692},"end":{"line":86,"col":40,"offset":2716}},"request.form['log_type']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":86,"col":5,"offset":2681},"end":{"line":86,"col":13,"offset":2689}},"content":"log_type"},{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":88,"col":5,"offset":2767},"end":{"line":88,"col":13,"offset":2775}},"content":"log_file"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":95,"col":23,"offset":3068},"end":{"line":95,"col":57,"offset":3102}},"f\"Failed to add log to {log_file}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":106,"col":18,"offset":3469},"end":{"line":106,"col":49,"offset":3500},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":101,"col":24,"offset":3268},"end":{"line":101,"col":28,"offset":3272},"abstract_content":"form"},"$LOG":{"start":{"line":106,"col":13,"offset":3464},"end":{"line":106,"col":17,"offset":3468},"abstract_content":"info"},"$SINK":{"start":{"line":106,"col":18,"offset":3469},"end":{"line":106,"col":49,"offset":3500},"abstract_content":"f\"New user created: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"713b442634d1dedd36dc72468fdf412dbb97706a09cc4f398f0c83b3021636440f78033e99f64bb77880b122b92bdb998340f539e4fb79b93aa0562c381528a5_0","lines":"    logging.info(f\"New user created: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":101,"col":16,"offset":3260},"end":{"line":101,"col":40,"offset":3284}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":101,"col":5,"offset":3249},"end":{"line":101,"col":13,"offset":3257}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":106,"col":18,"offset":3469},"end":{"line":106,"col":49,"offset":3500}},"f\"New user created: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":116,"col":18,"offset":3770},"end":{"line":116,"col":45,"offset":3797},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":112,"col":24,"offset":3645},"end":{"line":112,"col":28,"offset":3649},"abstract_content":"form"},"$LOG":{"start":{"line":116,"col":13,"offset":3765},"end":{"line":116,"col":17,"offset":3769},"abstract_content":"info"},"$SINK":{"start":{"line":116,"col":18,"offset":3770},"end":{"line":116,"col":45,"offset":3797},"abstract_content":"f\"User deleted: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7e4a0fbf4c6a32d2813bbee270307b16ba2cbeb8093d29fd7144e4b6c2dde268e3c0854f03ea2ec3b1831aaff0eaac7aabefc33e0d95aa354161dff4d517ff61_0","lines":"    logging.info(f\"User deleted: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":112,"col":16,"offset":3637},"end":{"line":112,"col":40,"offset":3661}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":112,"col":5,"offset":3626},"end":{"line":112,"col":13,"offset":3634}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":116,"col":18,"offset":3770},"end":{"line":116,"col":45,"offset":3797}},"f\"User deleted: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":147,"col":5,"offset":4713},"end":{"line":147,"col":24,"offset":4732},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"508b724b06e403aa8959563012d1d55e601b6c1e6302ccfae01c4e6f0352b9f6de41adb40b14dec6731265facb58f69486ccb8ac6bedf76ace66a02bc1129a0e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-22/sample_112_original.py","start":{"line":147,"col":5,"offset":4713},"end":{"line":147,"col":24,"offset":4732},"extra":{"metavars":{"$APP":{"start":{"line":147,"col":5,"offset":4713},"end":{"line":147,"col":8,"offset":4716},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":276},"svalue_end":{"line":9,"col":22,"offset":291},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"62b071fe8a5ef29c92776a57c32251533bc3bd7910e0efd536d28cf94ee733b18c375dcc596d25a4397669e74a9b82218bbfaa22cd20c0349f98711c772e72a0_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":49,"col":18,"offset":1686},"end":{"line":49,"col":48,"offset":1716},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":42,"col":24,"offset":1369},"end":{"line":42,"col":28,"offset":1373},"abstract_content":"form"},"$LOG":{"start":{"line":49,"col":13,"offset":1681},"end":{"line":49,"col":17,"offset":1685},"abstract_content":"info"},"$SINK":{"start":{"line":49,"col":18,"offset":1686},"end":{"line":49,"col":48,"offset":1716},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d8a95c3ca722c64808a957c64dd0744d852f29085b30e01f891c55541fb996cb7daf7950fe642bc02da4ad42bc7799978c20ed73e30e76952278791c43c906b1_0","lines":"    logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":42,"col":16,"offset":1361},"end":{"line":42,"col":44,"offset":1389}},"request.form.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":42,"col":5,"offset":1350},"end":{"line":42,"col":13,"offset":1358}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":49,"col":18,"offset":1686},"end":{"line":49,"col":48,"offset":1716}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":59,"col":25,"offset":2110},"end":{"line":59,"col":69,"offset":2154},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":54,"col":24,"offset":1836},"end":{"line":54,"col":28,"offset":1840},"abstract_content":"form"},"$LOG":{"start":{"line":59,"col":17,"offset":2102},"end":{"line":59,"col":24,"offset":2109},"abstract_content":"warning"},"$SINK":{"start":{"line":59,"col":25,"offset":2110},"end":{"line":59,"col":69,"offset":2154},"abstract_content":"f\"Failed login attempt for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1dc4f548be7fd64d2f496b33e07f4b84bc1d51017ddbb4ff211f8c90bf4403d3a989933231779c450fb31f70ce70df0db84e8ba1585f7a0cf4aef77a902abdd8_0","lines":"        logging.warning(f\"Failed login attempt for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":54,"col":16,"offset":1828},"end":{"line":54,"col":44,"offset":1856}},"request.form.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":54,"col":5,"offset":1817},"end":{"line":54,"col":13,"offset":1825}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":59,"col":25,"offset":2110},"end":{"line":59,"col":69,"offset":2154}},"f\"Failed login attempt for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":62,"col":18,"offset":2257},"end":{"line":62,"col":47,"offset":2286},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":54,"col":24,"offset":1836},"end":{"line":54,"col":28,"offset":1840},"abstract_content":"form"},"$LOG":{"start":{"line":62,"col":13,"offset":2252},"end":{"line":62,"col":17,"offset":2256},"abstract_content":"info"},"$SINK":{"start":{"line":62,"col":18,"offset":2257},"end":{"line":62,"col":47,"offset":2286},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8e680a3dabe69dc42ebb8bb4762d177cbd90fcca348d809a41b3c664b32a94b4d954470e88b322dffae8e711ac82781676d62dc7f910b7fe59d0662ef2bcc314_0","lines":"    logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":54,"col":16,"offset":1828},"end":{"line":54,"col":44,"offset":1856}},"request.form.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":54,"col":5,"offset":1817},"end":{"line":54,"col":13,"offset":1825}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":62,"col":18,"offset":2257},"end":{"line":62,"col":47,"offset":2286}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":84,"col":22,"offset":2944},"end":{"line":84,"col":81,"offset":3003},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":77,"col":20,"offset":2682},"end":{"line":77,"col":25,"offset":2687},"abstract_content":"files"},"$LOG":{"start":{"line":84,"col":17,"offset":2939},"end":{"line":84,"col":21,"offset":2943},"abstract_content":"info"},"$SINK":{"start":{"line":84,"col":22,"offset":2944},"end":{"line":84,"col":81,"offset":3003},"abstract_content":"f\"File uploaded: {filename} by user: {session['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ea9a02921537807890f2cfcac60ae9f2ed9acbeb14a916ef17dc975811b22744ffb3e50a86e7a958f922d2e47769e38b2ecea581d68d96bd09389142b8839bd0_0","lines":"        logging.info(f\"File uploaded: {filename} by user: {session['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":77,"col":12,"offset":2674},"end":{"line":77,"col":33,"offset":2695}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":77,"col":5,"offset":2667},"end":{"line":77,"col":9,"offset":2671}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":81,"col":9,"offset":2791},"end":{"line":81,"col":17,"offset":2799}},"content":"filename"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":84,"col":22,"offset":2944},"end":{"line":84,"col":81,"offset":3003}},"f\"File uploaded: {filename} by user: {session['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":107,"col":23,"offset":3832},"end":{"line":107,"col":32,"offset":3841},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3284},"end":{"line":96,"col":29,"offset":3288},"abstract_content":"form"},"$SINK":{"start":{"line":107,"col":23,"offset":3832},"end":{"line":107,"col":32,"offset":3841},"abstract_content":"file_path","propagated_value":{"svalue_start":{"line":102,"col":17,"offset":3588},"svalue_end":{"line":102,"col":75,"offset":3646},"svalue_abstract_content":"os.path.join(user_uploads_dir f\"{file_name}.{file_type}\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"eedb40c93a409dcdfd4cbc65921cd9eeb135173d27d36e8c495be126f2fb1b5ee50c2cdb81bc77be6aa575924297c16230e55bec73c3f42e3ca4fa889421368c_0","lines":"            with open(file_path, 'r') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":17,"offset":3276},"end":{"line":96,"col":45,"offset":3304}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":5,"offset":3264},"end":{"line":96,"col":14,"offset":3273}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":102,"col":5,"offset":3576},"end":{"line":102,"col":14,"offset":3585}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":107,"col":23,"offset":3832},"end":{"line":107,"col":32,"offset":3841}},"file_path"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":111,"col":23,"offset":3988},"end":{"line":111,"col":32,"offset":3997},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3284},"end":{"line":96,"col":29,"offset":3288},"abstract_content":"form"},"$SINK":{"start":{"line":111,"col":23,"offset":3988},"end":{"line":111,"col":32,"offset":3997},"abstract_content":"file_path","propagated_value":{"svalue_start":{"line":102,"col":17,"offset":3588},"svalue_end":{"line":102,"col":75,"offset":3646},"svalue_abstract_content":"os.path.join(user_uploads_dir f\"{file_name}.{file_type}\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"eedb40c93a409dcdfd4cbc65921cd9eeb135173d27d36e8c495be126f2fb1b5ee50c2cdb81bc77be6aa575924297c16230e55bec73c3f42e3ca4fa889421368c_1","lines":"            with open(file_path, 'r') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":17,"offset":3276},"end":{"line":96,"col":45,"offset":3304}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":5,"offset":3264},"end":{"line":96,"col":14,"offset":3273}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":102,"col":5,"offset":3576},"end":{"line":102,"col":14,"offset":3585}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":111,"col":23,"offset":3988},"end":{"line":111,"col":32,"offset":3997}},"file_path"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":114,"col":23,"offset":4100},"end":{"line":114,"col":53,"offset":4130},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3284},"end":{"line":96,"col":29,"offset":3288},"abstract_content":"form"},"$LOG":{"start":{"line":114,"col":17,"offset":4094},"end":{"line":114,"col":22,"offset":4099},"abstract_content":"error"},"$SINK":{"start":{"line":114,"col":23,"offset":4100},"end":{"line":114,"col":53,"offset":4130},"abstract_content":"f\"File not found: {file_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5aa5c4868d41264b3e69a1216453aa0d3fafb6d5f18c1fdab3b9e93176eb6e1bd7e5eefb3e037300e82eb6f9cfcc6a350a195a509e41ad3e2a8a98c840117b7f_0","lines":"        logging.error(f\"File not found: {file_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":17,"offset":3276},"end":{"line":96,"col":45,"offset":3304}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":5,"offset":3264},"end":{"line":96,"col":14,"offset":3273}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":102,"col":5,"offset":3576},"end":{"line":102,"col":14,"offset":3585}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":114,"col":23,"offset":4100},"end":{"line":114,"col":53,"offset":4130}},"f\"File not found: {file_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":117,"col":23,"offset":4226},"end":{"line":117,"col":69,"offset":4272},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3284},"end":{"line":96,"col":29,"offset":3288},"abstract_content":"form"},"$LOG":{"start":{"line":117,"col":17,"offset":4220},"end":{"line":117,"col":22,"offset":4225},"abstract_content":"error"},"$SINK":{"start":{"line":117,"col":23,"offset":4226},"end":{"line":117,"col":69,"offset":4272},"abstract_content":"f\"Error processing file {file_path}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"40428192ace6f6e42332ce55786b7a3f81d5e9511de0cff2ab48572a232786fd87d157003b6c3b1caacbd619bfa18af419f0ea531796fc442e5509e5570ae89d_0","lines":"        logging.error(f\"Error processing file {file_path}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":17,"offset":3276},"end":{"line":96,"col":45,"offset":3304}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":96,"col":5,"offset":3264},"end":{"line":96,"col":14,"offset":3273}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":102,"col":5,"offset":3576},"end":{"line":102,"col":14,"offset":3585}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":117,"col":23,"offset":4226},"end":{"line":117,"col":69,"offset":4272}},"f\"Error processing file {file_path}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":129,"col":22,"offset":4636},"end":{"line":129,"col":81,"offset":4695},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":123,"col":25,"offset":4413},"end":{"line":123,"col":29,"offset":4417},"abstract_content":"form"},"$LOG":{"start":{"line":129,"col":17,"offset":4631},"end":{"line":129,"col":21,"offset":4635},"abstract_content":"info"},"$SINK":{"start":{"line":129,"col":22,"offset":4636},"end":{"line":129,"col":81,"offset":4695},"abstract_content":"f\"File deleted: {file_name} by user: {session['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"6e78a0f7a7aaf82024e9d7c8223165c1501dad5063be987b6e1efd9009fa42e0c924efc02df0730e8b043aba37faa08e00154585d60e96034d6c9f31eb713cfc_0","lines":"        logging.info(f\"File deleted: {file_name} by user: {session['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":123,"col":17,"offset":4405},"end":{"line":123,"col":45,"offset":4433}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":123,"col":5,"offset":4393},"end":{"line":123,"col":14,"offset":4402}},"content":"file_name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":129,"col":22,"offset":4636},"end":{"line":129,"col":81,"offset":4695}},"f\"File deleted: {file_name} by user: {session['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":132,"col":23,"offset":4792},"end":{"line":132,"col":66,"offset":4835},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":123,"col":25,"offset":4413},"end":{"line":123,"col":29,"offset":4417},"abstract_content":"form"},"$LOG":{"start":{"line":132,"col":17,"offset":4786},"end":{"line":132,"col":22,"offset":4791},"abstract_content":"error"},"$SINK":{"start":{"line":132,"col":23,"offset":4792},"end":{"line":132,"col":66,"offset":4835},"abstract_content":"f\"File not found for deletion: {file_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a2eb4e5b04e262296b7e6a612dec276ee4331bc08d0ffa2083ca877b2d8b0eecf122e96d79bdb7d3e5251a0d74364f2d8af61fe638fe533e681ff1369e4e6fd7_0","lines":"        logging.error(f\"File not found for deletion: {file_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":123,"col":17,"offset":4405},"end":{"line":123,"col":45,"offset":4433}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":123,"col":5,"offset":4393},"end":{"line":123,"col":14,"offset":4402}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":126,"col":5,"offset":4506},"end":{"line":126,"col":14,"offset":4515}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":132,"col":23,"offset":4792},"end":{"line":132,"col":66,"offset":4835}},"f\"File not found for deletion: {file_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.request-data-write.request-data-write","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":139,"col":5,"offset":5011},"end":{"line":150,"col":44,"offset":5581},"extra":{"metavars":{"$DATA":{"start":{"line":139,"col":5,"offset":5011},"end":{"line":139,"col":16,"offset":5022},"abstract_content":"new_content"},"$W":{"start":{"line":139,"col":27,"offset":5033},"end":{"line":139,"col":31,"offset":5037},"abstract_content":"form"},"$F":{"start":{"line":145,"col":13,"offset":5294},"end":{"line":145,"col":17,"offset":5298},"abstract_content":"file","propagated_value":{"svalue_start":{"line":144,"col":14,"offset":5252},"svalue_end":{"line":144,"col":34,"offset":5272},"svalue_abstract_content":"open(file_path'w')"}}},"message":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.","metadata":{"cwe":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"],"owasp":["A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","shortlink":"https://sg.run/0Q6j","semgrep.dev":{"rule":{"origin":"community","r_id":9498,"rule_id":"ReUg5z","rule_name":"python.django.security.injection.request-data-write.request-data-write","rv_id":946183,"url":"https://semgrep.dev/playground/r/zyTlkEY/python.django.security.injection.request-data-write.request-data-write","version_id":"zyTlkEY"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7f0bd70359f815eea54e547ed6e6017d7701b5309231df1b19b4dbaa54fbbdffdd113d170152c837a2d71c2006bd9772cf1a77601b9379593c21fa0ad80ab5a7_0","lines":"    new_content = request.form.get('content')\n    if not file_name or new_content is None:\n        return abort(400, \"Missing filename or content\")\n    file_path = os.path.join(user_uploads_dir, secure_filename(file_name))\n    try:\n        with open(file_path, 'w') as file:\n            file.write(new_content)\n        logging.info(f\"File updated: {file_name} by user: {session['username']}\")\n        return \"File updated successfully\"\n    except FileNotFoundError:\n        logging.error(f\"File not found for update: {file_path}\")\n        return abort(404, \"File not found\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":146,"col":22,"offset":5339},"end":{"line":146,"col":81,"offset":5398},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":138,"col":25,"offset":4986},"end":{"line":138,"col":29,"offset":4990},"abstract_content":"form"},"$LOG":{"start":{"line":146,"col":17,"offset":5334},"end":{"line":146,"col":21,"offset":5338},"abstract_content":"info"},"$SINK":{"start":{"line":146,"col":22,"offset":5339},"end":{"line":146,"col":81,"offset":5398},"abstract_content":"f\"File updated: {file_name} by user: {session['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"511082b729a67652b376731201240b0f61d64afbf9cdc61b30db6c12d7165a0cf6e06aef8960d4a32d9139b2c5ea9fb984169692518f16569fa9e3d917c1d4de_0","lines":"        logging.info(f\"File updated: {file_name} by user: {session['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":138,"col":17,"offset":4978},"end":{"line":138,"col":45,"offset":5006}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":138,"col":5,"offset":4966},"end":{"line":138,"col":14,"offset":4975}},"content":"file_name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":146,"col":22,"offset":5339},"end":{"line":146,"col":81,"offset":5398}},"f\"File updated: {file_name} by user: {session['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":149,"col":23,"offset":5495},"end":{"line":149,"col":64,"offset":5536},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":138,"col":25,"offset":4986},"end":{"line":138,"col":29,"offset":4990},"abstract_content":"form"},"$LOG":{"start":{"line":149,"col":17,"offset":5489},"end":{"line":149,"col":22,"offset":5494},"abstract_content":"error"},"$SINK":{"start":{"line":149,"col":23,"offset":5495},"end":{"line":149,"col":64,"offset":5536},"abstract_content":"f\"File not found for update: {file_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"689b0eab0355e08fd622bb268c0eae880a40af23c4b2bb342820e9774ca26471576c99e1b7e3dcc0f0ca84700d9897e55f1e47d87b82ae2bfb9a3083ed0a2a59_0","lines":"        logging.error(f\"File not found for update: {file_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":138,"col":17,"offset":4978},"end":{"line":138,"col":45,"offset":5006}},"request.form.get('filename')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":138,"col":5,"offset":4966},"end":{"line":138,"col":14,"offset":4975}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":142,"col":5,"offset":5159},"end":{"line":142,"col":14,"offset":5168}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":149,"col":23,"offset":5495},"end":{"line":149,"col":64,"offset":5536}},"f\"File not found for update: {file_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":158,"col":5,"offset":5768},"end":{"line":158,"col":24,"offset":5787},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"61199c2cedd5d738aabf1bbd5368499b6401298215293396e73b4b602474114478b16d501362f673752adf0068b8110958f2fdedfaac6a1ad90cdbb599708847_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":158,"col":5,"offset":5768},"end":{"line":158,"col":24,"offset":5787},"extra":{"metavars":{"$APP":{"start":{"line":158,"col":5,"offset":5768},"end":{"line":158,"col":8,"offset":5771},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":266},"svalue_end":{"line":9,"col":22,"offset":281},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"0cae1333fc1aa3211dff44cd7ac351976086d501fe52bb18a834296e23b6c9ff3ffcad0bc18e117c43485ad3ce9f78825f9e0c34670e513b6e42a48c24478c9c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":203,"col":5,"offset":7332},"end":{"line":203,"col":24,"offset":7351},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"61199c2cedd5d738aabf1bbd5368499b6401298215293396e73b4b602474114478b16d501362f673752adf0068b8110958f2fdedfaac6a1ad90cdbb599708847_1","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-22/sample_113_original.py","start":{"line":203,"col":5,"offset":7332},"end":{"line":203,"col":24,"offset":7351},"extra":{"metavars":{"$APP":{"start":{"line":203,"col":5,"offset":7332},"end":{"line":203,"col":8,"offset":7335},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":266},"svalue_end":{"line":9,"col":22,"offset":281},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"0cae1333fc1aa3211dff44cd7ac351976086d501fe52bb18a834296e23b6c9ff3ffcad0bc18e117c43485ad3ce9f78825f9e0c34670e513b6e42a48c24478c9c_1","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_114_original.py","start":{"line":73,"col":5,"offset":2233},"end":{"line":73,"col":30,"offset":2258},"extra":{"metavars":{"$METHOD":{"start":{"line":73,"col":8,"offset":2236},"end":{"line":73,"col":13,"offset":2241},"abstract_content":"chmod"},"$FILE":{"start":{"line":73,"col":14,"offset":2242},"end":{"line":73,"col":22,"offset":2250},"abstract_content":"LOG_FILE","propagated_value":{"svalue_start":{"line":15,"col":12,"offset":309},"svalue_end":{"line":15,"col":40,"offset":337},"svalue_abstract_content":"'/var/log/user_activity.log'"}},"$BITS":{"start":{"line":73,"col":24,"offset":2252},"end":{"line":73,"col":29,"offset":2257},"abstract_content":"0o777"}},"message":"These permissions `0o777` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6284070772697c1275edff2324320f9b532068b3a024257479c3a8d558621b0175b5f87ddde1563b0f79af8b20f03f3762251ee633da3706ecf643504fa96599_0","lines":"    os.chmod(LOG_FILE, 0o777)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_115_original.py","start":{"line":38,"col":9,"offset":1095},"end":{"line":38,"col":35,"offset":1121},"extra":{"metavars":{"$METHOD":{"start":{"line":38,"col":12,"offset":1098},"end":{"line":38,"col":17,"offset":1103},"abstract_content":"chmod"},"$FILE":{"start":{"line":38,"col":18,"offset":1104},"end":{"line":38,"col":27,"offset":1113},"abstract_content":"dest_path","propagated_value":{"svalue_start":{"line":36,"col":21,"offset":1009},"svalue_end":{"line":36,"col":56,"offset":1044},"svalue_abstract_content":"os.path.join(self.backup_dir file)"}},"$BITS":{"start":{"line":38,"col":29,"offset":1115},"end":{"line":38,"col":34,"offset":1120},"abstract_content":"0o777"}},"message":"These permissions `0o777` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"65cf398e2b32b2532e9473136c62ee33fbdaf6a8d5835a9f1c7299ab3da2ab89f9dd392b59cb1826489520beed4580f1555a82b4508baa3c9c480862840cb320_0","lines":"        os.chmod(dest_path, 0o777)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_116_original.py","start":{"line":73,"col":13,"offset":2790},"end":{"line":73,"col":96,"offset":2873},"extra":{"metavars":{"$METHOD":{"start":{"line":73,"col":16,"offset":2793},"end":{"line":73,"col":21,"offset":2798},"abstract_content":"chmod"},"$FILE":{"start":{"line":73,"col":22,"offset":2799},"end":{"line":73,"col":31,"offset":2808},"abstract_content":"file_path","propagated_value":{"svalue_start":{"line":70,"col":21,"offset":2678},"svalue_end":{"line":70,"col":64,"offset":2721},"svalue_abstract_content":"os.path.join(self.base_directory filename)"}},"$BITS":{"start":{"line":73,"col":33,"offset":2810},"end":{"line":73,"col":95,"offset":2872},"abstract_content":"file_stat.st_mode|stat.S_IXUSR|stat.S_IXGRP|stat.S_IXOTH"}},"message":"These permissions `file_stat.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d5bc53d2d9c5ccbb8dc66eb81de742c49b49136602081e5680164331dbde0f5d61c6d0c915b6f5208714430aefe01bc30c37abebd0e754fee8a34fbdb83e16d8_0","lines":"            os.chmod(file_path, file_stat.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":23,"col":9,"offset":621},"end":{"line":23,"col":35,"offset":647},"extra":{"metavars":{"$METHOD":{"start":{"line":23,"col":12,"offset":624},"end":{"line":23,"col":17,"offset":629},"abstract_content":"chmod"},"$FILE":{"start":{"line":23,"col":18,"offset":630},"end":{"line":23,"col":27,"offset":639},"abstract_content":"file_path","propagated_value":{"svalue_start":{"line":20,"col":21,"offset":500},"svalue_end":{"line":20,"col":58,"offset":537},"svalue_abstract_content":"os.path.join('user_files'file_name)"}},"$BITS":{"start":{"line":23,"col":29,"offset":641},"end":{"line":23,"col":34,"offset":646},"abstract_content":"0o766"}},"message":"These permissions `0o766` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78ad7903def073cba80945d40463542b597797472ceb2c3ce69765e2b299fcc98e59b4484faeffdebdf64243c84450e56bf95c463679c50bfe4185f6ddabb952_0","lines":"        os.chmod(file_path, 0o766)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":51,"col":22,"offset":1606},"end":{"line":51,"col":51,"offset":1635},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":47,"col":24,"offset":1408},"end":{"line":47,"col":28,"offset":1412},"abstract_content":"json"},"$LOG":{"start":{"line":51,"col":17,"offset":1601},"end":{"line":51,"col":21,"offset":1605},"abstract_content":"info"},"$SINK":{"start":{"line":51,"col":22,"offset":1606},"end":{"line":51,"col":51,"offset":1635},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"cc49ace8e7971846a4a5e57d06263d9261e450cb13ca2fdc392de0909003b5d95dd7807313c70f6cedda17ee7bfea355298d1cc2886d0ab8ba48216c6ff38a97_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":47,"col":16,"offset":1400},"end":{"line":47,"col":44,"offset":1428}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":47,"col":5,"offset":1389},"end":{"line":47,"col":13,"offset":1397}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":51,"col":22,"offset":1606},"end":{"line":51,"col":51,"offset":1635}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":53,"col":21,"offset":1718},"end":{"line":53,"col":65,"offset":1762},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":47,"col":24,"offset":1408},"end":{"line":47,"col":28,"offset":1412},"abstract_content":"json"},"$LOG":{"start":{"line":53,"col":13,"offset":1710},"end":{"line":53,"col":20,"offset":1717},"abstract_content":"warning"},"$SINK":{"start":{"line":53,"col":21,"offset":1718},"end":{"line":53,"col":65,"offset":1762},"abstract_content":"f\"Failed login attempt for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9f87a8c3a2d147af069f8b742ea9199b97e1258a61bc2dfebbfb3942aaeb81bdf81dc1e580dc3cd9c3c00247df568684dbcca90ca12448791574b96471e56c84_0","lines":"    logging.warning(f\"Failed login attempt for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":47,"col":16,"offset":1400},"end":{"line":47,"col":44,"offset":1428}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":47,"col":5,"offset":1389},"end":{"line":47,"col":13,"offset":1397}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":53,"col":21,"offset":1718},"end":{"line":53,"col":65,"offset":1762}},"f\"Failed login attempt for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":224,"col":5,"offset":7700},"end":{"line":224,"col":24,"offset":7719},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"03af3cf84857b8bad7c63414ab97f6f10399960fe4134b91c184e345b865d9dd156f255c0076e52c21a1fd9ddd14aec0791f5b7533acff4289c927609e334e8a_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-276/sample_6_original.py","start":{"line":224,"col":5,"offset":7700},"end":{"line":224,"col":24,"offset":7719},"extra":{"metavars":{"$APP":{"start":{"line":224,"col":5,"offset":7700},"end":{"line":224,"col":8,"offset":7703},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":185},"svalue_end":{"line":8,"col":22,"offset":200},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"44253b8d717f6d203e3d9eec3c212e7915ec477be86e3966aa4bbd4f1d268fabe10d9b62d00642064245187b86b269071acdc366d7ddafcb376e437f8ac12109_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":31,"col":13,"offset":979},"end":{"line":31,"col":39,"offset":1005},"extra":{"metavars":{"$METHOD":{"start":{"line":31,"col":16,"offset":982},"end":{"line":31,"col":21,"offset":987},"abstract_content":"chmod"},"$FILE":{"start":{"line":31,"col":22,"offset":988},"end":{"line":31,"col":31,"offset":997},"abstract_content":"file_path","propagated_value":{"svalue_start":{"line":28,"col":25,"offset":846},"svalue_end":{"line":28,"col":62,"offset":883},"svalue_abstract_content":"os.path.join(self.base_dir filename)"}},"$BITS":{"start":{"line":31,"col":33,"offset":999},"end":{"line":31,"col":38,"offset":1004},"abstract_content":"0o777"}},"message":"These permissions `0o777` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"287834cb39e8c2b58f240ccb05a7093430d4d376e51b87a98e8442a7d762e72b852daa5413de2a2da39f8b1de52fdc88a49e8b71d21c2506f4b1a3e5aa6f9a34_0","lines":"            os.chmod(file_path, 0o777)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":105,"col":16,"offset":4084},"end":{"line":105,"col":48,"offset":4116},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"896f565eb11ebcd1ace3eac65ff396a667c49eec14aa98c77113ca5859357fdc4039856ed9f4d28a6988d268aec2262cbef3ff3ada8e45d3c48d89d4e71e2a69_0","lines":"        return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":115,"col":16,"offset":4441},"end":{"line":115,"col":45,"offset":4470},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"896f565eb11ebcd1ace3eac65ff396a667c49eec14aa98c77113ca5859357fdc4039856ed9f4d28a6988d268aec2262cbef3ff3ada8e45d3c48d89d4e71e2a69_1","lines":"        return HttpResponse(escape(content))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":117,"col":16,"offset":4524},"end":{"line":117,"col":48,"offset":4556},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"896f565eb11ebcd1ace3eac65ff396a667c49eec14aa98c77113ca5859357fdc4039856ed9f4d28a6988d268aec2262cbef3ff3ada8e45d3c48d89d4e71e2a69_2","lines":"        return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":131,"col":16,"offset":5063},"end":{"line":131,"col":48,"offset":5095},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"896f565eb11ebcd1ace3eac65ff396a667c49eec14aa98c77113ca5859357fdc4039856ed9f4d28a6988d268aec2262cbef3ff3ada8e45d3c48d89d4e71e2a69_3","lines":"        return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":144,"col":16,"offset":5549},"end":{"line":144,"col":48,"offset":5581},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"896f565eb11ebcd1ace3eac65ff396a667c49eec14aa98c77113ca5859357fdc4039856ed9f4d28a6988d268aec2262cbef3ff3ada8e45d3c48d89d4e71e2a69_4","lines":"        return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-276/sample_7_original.py","start":{"line":156,"col":16,"offset":5972},"end":{"line":156,"col":48,"offset":6004},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"896f565eb11ebcd1ace3eac65ff396a667c49eec14aa98c77113ca5859357fdc4039856ed9f4d28a6988d268aec2262cbef3ff3ada8e45d3c48d89d4e71e2a69_5","lines":"        return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_8_original.py","start":{"line":79,"col":9,"offset":2549},"end":{"line":79,"col":59,"offset":2599},"extra":{"metavars":{"$METHOD":{"start":{"line":79,"col":12,"offset":2552},"end":{"line":79,"col":17,"offset":2557},"abstract_content":"chmod"},"$FILE":{"start":{"line":79,"col":18,"offset":2558},"end":{"line":79,"col":51,"offset":2591},"abstract_content":"os.path.join('uploads'filename)"},"$BITS":{"start":{"line":79,"col":53,"offset":2593},"end":{"line":79,"col":58,"offset":2598},"abstract_content":"0o777"}},"message":"These permissions `0o777` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f211a7e53e69ddb8e5ed91952312eb7b7fe9fd9c746af740739df77382301d6141cb823ba163bfdf424291bfc781b3258ce0c75f388f6f54238e8554ba7948ba_0","lines":"        os.chmod(os.path.join('uploads', filename), 0o777)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","path":"vulnerability_samples/CWE-276/sample_9_original.py","start":{"line":20,"col":13,"offset":526},"end":{"line":20,"col":38,"offset":551},"extra":{"metavars":{"$METHOD":{"start":{"line":20,"col":16,"offset":529},"end":{"line":20,"col":21,"offset":534},"abstract_content":"chmod"},"$FILE":{"start":{"line":20,"col":22,"offset":535},"end":{"line":20,"col":30,"offset":543},"abstract_content":"filename"},"$BITS":{"start":{"line":20,"col":32,"offset":545},"end":{"line":20,"col":37,"offset":550},"abstract_content":"0o777"}},"message":"These permissions `0o777` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.","metadata":{"category":"security","owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-276: Incorrect Default Permissions"],"technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","shortlink":"https://sg.run/AXY4","semgrep.dev":{"rule":{"origin":"community","r_id":13594,"rule_id":"zdUYqR","rule_name":"python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","rv_id":946346,"url":"https://semgrep.dev/playground/r/ZRT35dr/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","version_id":"ZRT35dr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"307b1b6f647f0f861eedb0c5eec3d6a7c04c59fcc7327ef1d2f4630c29a5d0696b3e62f22b5656064d6a4a42a47ef547e9d0cffb7d275ef04662464e5a3aa6b0_0","lines":"            os.chmod(filename, 0o777)  # Vulnerable: Incorrect default permissions","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_10_original.py","start":{"line":89,"col":17,"offset":3325},"end":{"line":89,"col":67,"offset":3375},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"fb6256855966d29aa2353c3a853bbc4196c97ce6704244dad45f3071bfdf3e34573c7c8b98ffdc3593b670d72e937068a5eb9460502325a9eba3d15a31204c21_0","lines":"        token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_10_original.py","start":{"line":89,"col":17,"offset":3325},"end":{"line":89,"col":67,"offset":3375},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":89,"col":28,"offset":3336},"end":{"line":89,"col":35,"offset":3343},"abstract_content":"payload"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2c0c64b39d8a8ee81f4ad9b78ec870e4a16a902ee78a2aabdd14a79afa4931ae3736aca6c0e0a7af8996c7b8817e7ce18f969b0a51d4ac15231d32afce46f6f3_0","lines":"        token = jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_10_original.py","start":{"line":123,"col":75,"offset":4871},"end":{"line":123,"col":80,"offset":4876},"extra":{"metavars":{"$BOOL":{"start":{"line":123,"col":75,"offset":4871},"end":{"line":123,"col":80,"offset":4876},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"79dbd9ae5e8cd2be1b754f49b4c3c4fd4ee73ca6425292a29aed7266c27664777fc69a3a5ddacfa7221263b6f62157bf92e0b6f5de1d1cd3fa146671785ea208_0","lines":"            decoded_data = jwt.decode(token, options={\"verify_signature\": False})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_11_original.py","start":{"line":52,"col":13,"offset":1709},"end":{"line":52,"col":65,"offset":1761},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"4027fd52b67459393cf811250b2b581a564e5245d5d3c75c777dc386d118450a3ff998a7cd378d9f86b955c0f4f0a36137892bc04c5167901df923664e9f6dc2_0","lines":"    token = jwt.encode(payload, 'secret_key', algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_11_original.py","start":{"line":52,"col":13,"offset":1709},"end":{"line":52,"col":65,"offset":1761},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":52,"col":24,"offset":1720},"end":{"line":52,"col":31,"offset":1727},"abstract_content":"payload"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1252f3acafa4b0863959fe5fce33fbfda61bed2cc4f38b07b22d519b2e25e72ba2bfc3ed44641ae9017a83002976f79b682904788891f1d10408ec0140921428_0","lines":"    token = jwt.encode(payload, 'secret_key', algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_11_original.py","start":{"line":57,"col":59,"offset":1930},"end":{"line":57,"col":64,"offset":1935},"extra":{"metavars":{"$BOOL":{"start":{"line":57,"col":59,"offset":1930},"end":{"line":57,"col":64,"offset":1935},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"8e3c59b7559574dae25ca815ad414e119ba091e0b8a8bd83b9ce26144df0183a3b8af39c63d5eda61ae63cdc7dac8a7a97cdd8a816b0e4faa777e62ce7cf85cd_0","lines":"    return jwt.decode(token, options={\"verify_signature\": False})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_12_original.py","start":{"line":47,"col":68,"offset":1353},"end":{"line":47,"col":73,"offset":1358},"extra":{"metavars":{"$BOOL":{"start":{"line":47,"col":68,"offset":1353},"end":{"line":47,"col":73,"offset":1358},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"dcc84b13a2d6b0005c27d5607d112932e84bd6c67c43ffc7f41b3f5edd690fb0741db081ff6c38312f2c311e603081301a5aa2fe023658cf6078995be91f3c1e_0","lines":"        user_data = jwt.decode(token, options={\"verify_signature\": False})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_12_original.py","start":{"line":88,"col":13,"offset":2699},"end":{"line":91,"col":38,"offset":2829},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"69be9b7b59dc384b1a6532fdbe696ca4f83e21a2e50eafe7d876050a1ef3802bfb03a2bc3c0fe8fc62843bf87cf2b4e8bfd08858436e089bba8dac6a0c497529_0","lines":"    token = jwt.encode({\n        \"user_id\": user[0],\n        \"exp\": datetime.utcnow() + TOKEN_EXPIRATION\n    }, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_12_original.py","start":{"line":88,"col":13,"offset":2699},"end":{"line":91,"col":38,"offset":2829},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":88,"col":24,"offset":2710},"end":{"line":91,"col":6,"offset":2797},"abstract_content":"{\"user_id\"user[0]\"exp\"datetime.utcnow()+TOKEN_EXPIRATION}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c8e4b1651b332e4b2ff76b0ac693328686ad16442ce5fbb6b17457f19d276bc74c2f6fbbda9cfb0aa86485c329d48195e70114fab2b89809e637a78c6d91acba_0","lines":"    token = jwt.encode({\n        \"user_id\": user[0],\n        \"exp\": datetime.utcnow() + TOKEN_EXPIRATION\n    }, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-287/sample_12_original.py","start":{"line":155,"col":5,"offset":4937},"end":{"line":158,"col":17,"offset":5067},"extra":{"metavars":{"$CONNECTION":{"start":{"line":155,"col":5,"offset":4937},"end":{"line":155,"col":11,"offset":4943},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":143,"col":14,"offset":4594},"svalue_end":{"line":143,"col":27,"offset":4607},"svalue_abstract_content":"conn.cursor()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"20ecc158d46fad8b3b952a6b3c9207d0bc046a359775a4c50315ec4921f186e18b7c1f2743ce32f1ca89f4494227308787197854d4430116afafad566c395d8c_0","lines":"    cursor.execute(f\"\"\"\n        UPDATE documents SET {', '.join(update_fields)}\n        WHERE id = ? AND owner_id = ?\n    \"\"\", params)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":64,"col":22,"offset":2141},"end":{"line":64,"col":52,"offset":2171},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":46,"col":20,"offset":1479},"end":{"line":46,"col":28,"offset":1487},"abstract_content":"get_json"},"$LOG":{"start":{"line":64,"col":17,"offset":2136},"end":{"line":64,"col":21,"offset":2140},"abstract_content":"info"},"$SINK":{"start":{"line":64,"col":22,"offset":2141},"end":{"line":64,"col":52,"offset":2171},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3e6dfee83019cc34190378ea81806c16541047fc22e7286e4eaf86ee842d03c73102e054f26feea22c0a31b1f6b0a867b037238bbc72814eb9bec822bd52bc52_0","lines":"        logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":46,"col":12,"offset":1471},"end":{"line":46,"col":30,"offset":1489}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":46,"col":5,"offset":1464},"end":{"line":46,"col":9,"offset":1468}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":47,"col":5,"offset":1494},"end":{"line":47,"col":13,"offset":1502}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":64,"col":22,"offset":2141},"end":{"line":64,"col":52,"offset":2171}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":86,"col":22,"offset":2924},"end":{"line":86,"col":51,"offset":2953},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":73,"col":20,"offset":2453},"end":{"line":73,"col":28,"offset":2461},"abstract_content":"get_json"},"$LOG":{"start":{"line":86,"col":17,"offset":2919},"end":{"line":86,"col":21,"offset":2923},"abstract_content":"info"},"$SINK":{"start":{"line":86,"col":22,"offset":2924},"end":{"line":86,"col":51,"offset":2953},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0aa93d023c055a917e12ca1cbd998863478c264467200da885680a5591d2c553fb64602ad458a125c8b6bc8f49c2ed99f93259fbece6a5e56c446592b9b7553d_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":73,"col":12,"offset":2445},"end":{"line":73,"col":30,"offset":2463}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":73,"col":5,"offset":2438},"end":{"line":73,"col":9,"offset":2442}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":74,"col":5,"offset":2468},"end":{"line":74,"col":13,"offset":2476}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":86,"col":22,"offset":2924},"end":{"line":86,"col":51,"offset":2953}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":97,"col":100,"offset":3373},"end":{"line":97,"col":105,"offset":3378},"extra":{"metavars":{"$BOOL":{"start":{"line":97,"col":100,"offset":3373},"end":{"line":97,"col":105,"offset":3378},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"5b40d0c47470e5ec3ba76a14d9a779366c935e8984d3b3d1c5041a8757cc3beed3f677ac7be158796a3f77428b4b3b55ea2210b211dd469e1686d82c165db394_0","lines":"        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'], options={\"verify_signature\": False})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":129,"col":22,"offset":4617},"end":{"line":129,"col":60,"offset":4655},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"headers"},"$PROPERTY":{"start":{"line":114,"col":21,"offset":4012},"end":{"line":114,"col":28,"offset":4019},"abstract_content":"headers"},"$LOG":{"start":{"line":129,"col":17,"offset":4612},"end":{"line":129,"col":21,"offset":4616},"abstract_content":"info"},"$SINK":{"start":{"line":129,"col":22,"offset":4617},"end":{"line":129,"col":60,"offset":4655},"abstract_content":"f\"User updated: {payload['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"131088feda4856491a02f48ff938714a9aa2ae6a46eecf687bb478dc7d68094de42b7af994e30631544f135057363954e6d472ba1cdab976ea1d2ed01ba6d155_0","lines":"        logging.info(f\"User updated: {payload['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":114,"col":13,"offset":4004},"end":{"line":114,"col":49,"offset":4040}},"request.headers.get('Authorization')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":114,"col":5,"offset":3996},"end":{"line":114,"col":10,"offset":4001}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":118,"col":9,"offset":4132},"end":{"line":118,"col":16,"offset":4139}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":129,"col":22,"offset":4617},"end":{"line":129,"col":60,"offset":4655}},"f\"User updated: {payload['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":162,"col":22,"offset":5902},"end":{"line":162,"col":60,"offset":5940},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"headers"},"$PROPERTY":{"start":{"line":152,"col":21,"offset":5450},"end":{"line":152,"col":28,"offset":5457},"abstract_content":"headers"},"$LOG":{"start":{"line":162,"col":17,"offset":5897},"end":{"line":162,"col":21,"offset":5901},"abstract_content":"info"},"$SINK":{"start":{"line":162,"col":22,"offset":5902},"end":{"line":162,"col":60,"offset":5940},"abstract_content":"f\"User deleted: {payload['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"741ded435ddd120b9ce0c2af2d5b0402c3a022c93d8322f03fd1619552449a1b72c4da339a23ebb2a0b035d5d63a6de2c4d1ea56e1215f1b7df7ce26701e735b_0","lines":"        logging.info(f\"User deleted: {payload['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":152,"col":13,"offset":5442},"end":{"line":152,"col":49,"offset":5478}},"request.headers.get('Authorization')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":152,"col":5,"offset":5434},"end":{"line":152,"col":10,"offset":5439}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":156,"col":9,"offset":5570},"end":{"line":156,"col":16,"offset":5577}},"content":"payload"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":162,"col":22,"offset":5902},"end":{"line":162,"col":60,"offset":5940}},"f\"User deleted: {payload['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":168,"col":5,"offset":6128},"end":{"line":168,"col":24,"offset":6147},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e9fe5780762a6871148f3b0c4d3cd7ffb6d0fe30518785e71138f7d6150703da09d9f32a30681f016f765bd8b2ff2d3ff410011d3f9e6e70e0fef7adeb24fc26_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-287/sample_137_original.py","start":{"line":168,"col":5,"offset":6128},"end":{"line":168,"col":24,"offset":6147},"extra":{"metavars":{"$APP":{"start":{"line":168,"col":5,"offset":6128},"end":{"line":168,"col":8,"offset":6131},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":215},"svalue_end":{"line":9,"col":22,"offset":230},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"b798cd407959708c12e4be8dad61f355be953e0a97ce48031553710cbe76e4be0acc8be6aa6f25a79b054aaa09a5cce0087f673fcf83b4484cfec81c204de745_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_138_original.py","start":{"line":30,"col":12,"offset":892},"end":{"line":30,"col":62,"offset":942},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"844d7003041913dfbaef2d680d155da02cf617aaac8988cc8544e2e3a3edfece9db4d4e61d3eed952e1def1e342f6bc8a45e7176fea7b26598840247a5bce834_0","lines":"    return jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_138_original.py","start":{"line":30,"col":12,"offset":892},"end":{"line":30,"col":62,"offset":942},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":30,"col":23,"offset":903},"end":{"line":30,"col":30,"offset":910},"abstract_content":"payload"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5a0965c5040cd8144b26bcc1bd8acdb11bfb70dd2578f11770c4412f25613dc127262ee1a40fb0d7d4a70b52ee490341ce82f3f61ef626cc228ab49f4a12b6f6_0","lines":"    return jwt.encode(payload, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-287/sample_138_original.py","start":{"line":32,"col":1,"offset":944},"end":{"line":58,"col":73,"offset":2189},"extra":{"metavars":{"$R":{"start":{"line":33,"col":5,"offset":961},"end":{"line":33,"col":10,"offset":966},"abstract_content":"login"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"da0131e8e7e012786643041376767b13c674146e89df69232f79cb6768df6284d4f1fe64981c3cace6146e8d19fca781a9fc7969efc5818c7c9b0d767bfd0755_0","lines":"@csrf_exempt\ndef login(request):\n    if request.method == \"POST\":\n        try:\n            data = json.loads(request.body)\n            username = data.get(\"username\")\n            password = data.get(\"password\")\n            \n            if not username or not password:\n                raise ValueError(\"Missing username or password\")\n            \n            hashed_password = hash_password(password)\n            if username in users_db and users_db[username][\"password\"] == hashed_password:\n                token = generate_token(username, users_db[username][\"role\"])\n                logger.info(f\"User {username} logged in successfully\")\n                return JsonResponse({\"token\": token})\n            else:\n                logger.warning(f\"Failed login attempt for user {username}\")\n                return JsonResponse({\"error\": \"Invalid credentials\"}, status=401)\n        except json.JSONDecodeError:\n            logger.error(\"Invalid JSON in request body\")\n            return JsonResponse({\"error\": \"Invalid JSON\"}, status=400)\n        except ValueError as e:\n            logger.error(str(e))\n            return JsonResponse({\"error\": str(e)}, status=400)\n    else:\n        return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_138_original.py","start":{"line":63,"col":72,"offset":2324},"end":{"line":63,"col":87,"offset":2339},"extra":{"metavars":{"$BOOL":{"start":{"line":63,"col":72,"offset":2324},"end":{"line":63,"col":87,"offset":2339},"abstract_content":"a_false_boolean","propagated_value":{"svalue_start":{"line":61,"col":23,"offset":2238},"svalue_end":{"line":61,"col":28,"offset":2243},"svalue_abstract_content":"False"}}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ce558edc849a6cdb90bbf5c3f1715bc9adbb8d4aae1a9b80f37e3cb7ac5af784cac1f88b4a07e046870d2a5fb1d3b61b6b0b297a2f27618ebb7f932e75748f09_0","lines":"        decoded_token = jwt.decode(token, options={\"verify_signature\": a_false_boolean})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-287/sample_138_original.py","start":{"line":96,"col":1,"offset":3624},"end":{"line":122,"col":73,"offset":4784},"extra":{"metavars":{"$R":{"start":{"line":97,"col":5,"offset":3641},"end":{"line":97,"col":16,"offset":3652},"abstract_content":"create_user"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"00b818bbd508aee891a1009404d11fcc33120a53452835d7fea4c23784f02e5aae5fa5247dbee2d80424017c5e71a1bd14e091ed0984b2a1bfa65c8e0aeed545_0","lines":"@csrf_exempt\ndef create_user(request):\n    if request.method == \"POST\":\n        try:\n            data = json.loads(request.body)\n            username = data.get(\"username\")\n            password = data.get(\"password\")\n            role = data.get(\"role\", \"user\")\n            \n            if not username or not password:\n                raise ValueError(\"Missing username or password\")\n            \n            if username in users_db:\n                raise ValueError(\"Username already exists\")\n            \n            hashed_password = hash_password(password)\n            users_db[username] = {\"password\": hashed_password, \"role\": role}\n            logger.info(f\"New user {username} created with role {role}\")\n            return JsonResponse({\"message\": \"User created successfully\"})\n        except json.JSONDecodeError:\n            logger.error(\"Invalid JSON in request body\")\n            return JsonResponse({\"error\": \"Invalid JSON\"}, status=400)\n        except ValueError as e:\n            logger.error(str(e))\n            return JsonResponse({\"error\": str(e)}, status=400)\n    else:\n        return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-287/sample_138_original.py","start":{"line":124,"col":1,"offset":4786},"end":{"line":154,"col":73,"offset":6152},"extra":{"metavars":{"$R":{"start":{"line":125,"col":5,"offset":4803},"end":{"line":125,"col":16,"offset":4814},"abstract_content":"delete_user"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e62385708f16fcaabd99d993679c235fa81ee10de00459828e1d31c1346bb2cb24e9cc5fa8d11646f6415877289c840889c15fb935b36010b324704bcc2a1392_0","lines":"@csrf_exempt\ndef delete_user(request):\n    if request.method == \"DELETE\":\n        token = request.headers.get('Authorization')\n        decoded_token = verify_token(token)\n        \n        if decoded_token and decoded_token.get('role') == 'admin':\n            try:\n                data = json.loads(request.body)\n                username = data.get(\"username\")\n                \n                if not username:\n                    raise ValueError(\"Missing username\")\n                \n                if username not in users_db:\n                    raise ValueError(\"User not found\")\n                \n                del users_db[username]\n                logger.info(f\"User {username} deleted by admin {decoded_token.get('username')}\")\n                return JsonResponse({\"message\": \"User deleted successfully\"})\n            except json.JSONDecodeError:\n                logger.error(\"Invalid JSON in request body\")\n                return JsonResponse({\"error\": \"Invalid JSON\"}, status=400)\n            except ValueError as e:\n                logger.error(str(e))\n                return JsonResponse({\"error\": str(e)}, status=400)\n        else:\n            logger.warning(\"Unauthorized attempt to delete user\")\n            return JsonResponse({'error': 'Access denied'}, status=403)\n    else:\n        return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":20,"col":14,"offset":400},"end":{"line":20,"col":88,"offset":474},"extra":{"metavars":{"$CONNECT":{"start":{"line":20,"col":22,"offset":408},"end":{"line":20,"col":29,"offset":415},"abstract_content":"connect"}},"message":"The application creates a database connection with an empty password. This can lead to unauthorized access by either an internal or external malicious actor. To prevent this vulnerability, enforce authentication when connecting to a database by using environment variables to securely provide credentials or retrieving them from a secure vault or HSM (Hardware Security Module).","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-287: Improper Authentication"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["mysqlclient","mysql","sql","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password","shortlink":"https://sg.run/dGvd","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40334,"rule_id":"nJUwLX","rule_name":"python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password","rv_id":948006,"url":"https://semgrep.dev/playground/r/1QToZBw/python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password","version_id":"1QToZBw"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"eb0ece0639eaff766f408f09410d250a425c08fc81be5278a59faecf5d10c9ff4962ad07de697271ca35fdab7be845d43d1d9c3a19cabdad5046b8e722927b41_0","lines":"        db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"\", db=\"mydatabase\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":139,"offset":897},"extra":{"metavars":{"$DB":{"start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":15,"offset":773},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":29,"col":18,"offset":747},"svalue_end":{"line":29,"col":29,"offset":758},"svalue_abstract_content":"db.cursor()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e1f1908d371739f3877a4e9549c00c8c7ab26d4e51779d52396700262164120404f3bab942359deaa7cc2d0e3c7d6b4e1d389a31fde423eb18ae0e7f1261486e_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":139,"offset":897},"extra":{"metavars":{"$CONNECTION":{"start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":15,"offset":773},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":29,"col":18,"offset":747},"svalue_end":{"line":29,"col":29,"offset":758},"svalue_abstract_content":"db.cursor()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b0251d6a18560aaead82aff782aefe18fcf056ed83a8d59cbcf5564f0b70b36ad82f763e73e6e9a610cadf37f8d18b429034c99b3bb308c292026c269669865a_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":139,"offset":897},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$O":{"start":{"line":29,"col":18,"offset":747},"end":{"line":29,"col":29,"offset":758},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896},"abstract_content":"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""},"$PROPERTY":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b11888306b036c60b20bb0e81fa0086b0241bb952e3a96b99d493385bf16f2f771c3c3bb74fbbde8a7cf340de0bebdf5fb919c12480ff0334024d9eb98899388_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":44,"offset":1558}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":55,"col":16,"offset":1618},"end":{"line":55,"col":33,"offset":1635}},"authenticate_user"],[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":26,"col":23,"offset":665},"end":{"line":26,"col":31,"offset":673}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":139,"offset":897}},"cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":139,"offset":897},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$O":{"start":{"line":29,"col":18,"offset":747},"end":{"line":29,"col":29,"offset":758},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896},"abstract_content":"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""},"$PROPERTY":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"35fa6c63efdc10fa8bc1cb8de86d98fe32f37519912cd3962c475d409ee33f12f4d7db6ec263e56111c8078a8d438883734bce64937e6c26edf81477fe71b01d_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":44,"offset":1558}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":55,"col":16,"offset":1618},"end":{"line":55,"col":33,"offset":1635}},"authenticate_user"],[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":26,"col":23,"offset":665},"end":{"line":26,"col":31,"offset":673}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":9,"offset":767},"end":{"line":30,"col":139,"offset":897}},"cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$SQLSTR":{"start":{"line":30,"col":26,"offset":784},"end":{"line":30,"col":64,"offset":822},"abstract_content":"SELECT * FROM users WHERE username = '"},"$ANYTHING":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"18273a5c6be6ad3869f0ee6895d4b0a0b5304db6f2eca5ec4f2e0b49342b64c498b5c6f07b3ae306c694c44c55953a9e136db5c445863ecf530e47134f47080a_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":32,"offset":1546}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":55,"col":16,"offset":1618},"end":{"line":55,"col":33,"offset":1635}},"authenticate_user"],[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":26,"col":23,"offset":665},"end":{"line":26,"col":31,"offset":673}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896}},"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$AIOMYSQL_CURSOR":{"start":{"line":29,"col":18,"offset":747},"end":{"line":29,"col":29,"offset":758},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896},"abstract_content":"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""},"$PROPERTY":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b78eb0c9b1e3447bff8e4f9d88115f0fa2b21b8c57a4aaeb5cd03c7904eeefa301c74eb4a7fd5ae4f13840eaff9aa9c036e2338dc1ccbbc79361c579399184eb_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":44,"offset":1558}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":55,"col":16,"offset":1618},"end":{"line":55,"col":33,"offset":1635}},"authenticate_user"],[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":26,"col":23,"offset":665},"end":{"line":26,"col":31,"offset":673}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896}},"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$SQLSTR":{"start":{"line":30,"col":26,"offset":784},"end":{"line":30,"col":64,"offset":822},"abstract_content":"SELECT * FROM users WHERE username = '"},"$ANYTHING":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"e4ccd61ca73cde86a77c2566b5acda5968b2e0573d546fcef8ae75a8d54975908fceabf64f3b6f4931101c43ec2f0432f78ef92192f056ca7526c4388d14264e_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":32,"offset":1546}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":55,"col":16,"offset":1618},"end":{"line":55,"col":33,"offset":1635}},"authenticate_user"],[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":26,"col":23,"offset":665},"end":{"line":26,"col":31,"offset":673}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":24,"offset":782},"end":{"line":30,"col":138,"offset":896}},"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":93,"offset":851},"end":{"line":30,"col":135,"offset":893},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":30,"col":93,"offset":851},"end":{"line":30,"col":133,"offset":891},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9d3e38e6480bdd78be1a8fd646d9b30945a6f514ed3f6d8119bf29ff29ea8c990ee46e2a40ea3b4ec8d41bc3614e0a68a927227ee204a71d2163ada0f72d43ed_0","lines":"        cursor.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":93,"offset":851},"end":{"line":30,"col":104,"offset":862}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":30,"col":93,"offset":851},"end":{"line":30,"col":135,"offset":893}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":58,"col":26,"offset":1739},"end":{"line":58,"col":67,"offset":1780},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"},"$LOG":{"start":{"line":58,"col":21,"offset":1734},"end":{"line":58,"col":25,"offset":1738},"abstract_content":"info"},"$SINK":{"start":{"line":58,"col":26,"offset":1739},"end":{"line":58,"col":67,"offset":1780},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1eba3578672053cefd06e96f73280b82101f6bdb39ac965c5cbee1f9a63f3766e381bc4bec2a2473ed73dbb5851ee8aa2e4253b585426d07ec646143785ed523_0","lines":"            logging.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":44,"offset":1558}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":58,"col":26,"offset":1739},"end":{"line":58,"col":67,"offset":1780}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":60,"col":25,"offset":1871},"end":{"line":60,"col":68,"offset":1914},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":53,"col":28,"offset":1542},"end":{"line":53,"col":32,"offset":1546},"abstract_content":"json"},"$LOG":{"start":{"line":60,"col":17,"offset":1863},"end":{"line":60,"col":24,"offset":1870},"abstract_content":"warning"},"$SINK":{"start":{"line":60,"col":25,"offset":1871},"end":{"line":60,"col":68,"offset":1914},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"563d487c45ae022b85721d063700a443c9ddcf4208c5d01ddffc7cbfe88effdc1121e04b44064e9fd820e9c74478087971b07fb4354fc946079395c3d457e4d7_0","lines":"        logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":20,"offset":1534},"end":{"line":53,"col":44,"offset":1558}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":53,"col":9,"offset":1523},"end":{"line":53,"col":17,"offset":1531}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":60,"col":25,"offset":1871},"end":{"line":60,"col":68,"offset":1914}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":79,"col":9,"offset":2517},"end":{"line":79,"col":97,"offset":2605},"extra":{"metavars":{"$DB":{"start":{"line":79,"col":9,"offset":2517},"end":{"line":79,"col":15,"offset":2523},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":78,"col":18,"offset":2497},"svalue_end":{"line":78,"col":29,"offset":2508},"svalue_abstract_content":"db.cursor()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e1f1908d371739f3877a4e9549c00c8c7ab26d4e51779d52396700262164120404f3bab942359deaa7cc2d0e3c7d6b4e1d389a31fde423eb18ae0e7f1261486e_1","lines":"        cursor.execute(f\"SELECT id, username, email FROM users WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":79,"col":9,"offset":2517},"end":{"line":79,"col":97,"offset":2605},"extra":{"metavars":{"$CONNECTION":{"start":{"line":79,"col":9,"offset":2517},"end":{"line":79,"col":15,"offset":2523},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":78,"col":18,"offset":2497},"svalue_end":{"line":78,"col":29,"offset":2508},"svalue_abstract_content":"db.cursor()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b0251d6a18560aaead82aff782aefe18fcf056ed83a8d59cbcf5564f0b70b36ad82f763e73e6e9a610cadf37f8d18b429034c99b3bb308c292026c269669865a_1","lines":"        cursor.execute(f\"SELECT id, username, email FROM users WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":96,"col":98,"offset":3277},"extra":{"metavars":{"$FUNC":{"start":{"line":91,"col":5,"offset":3050},"end":{"line":91,"col":16,"offset":3061},"abstract_content":"update_user"},"$DATA":{"start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091},"abstract_content":"new_email"},"$W":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$CURSOR":{"start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":15,"offset":3194},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":95,"col":18,"offset":3168},"svalue_end":{"line":95,"col":29,"offset":3179},"svalue_abstract_content":"db.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d344aba7924570ed970914b1436d0c902ef1c185fa54cdbf2813389016c005c8abbed9a971ed612e4fce04e7544e6ad318df91473aefc77f4abc2911664a9dc5_0","lines":"        new_email = request.json['email']\n        db = connect_to_database()\n        cursor = db.cursor()\n        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":98,"offset":3277},"extra":{"metavars":{"$DB":{"start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":15,"offset":3194},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":95,"col":18,"offset":3168},"svalue_end":{"line":95,"col":29,"offset":3179},"svalue_abstract_content":"db.cursor()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e1f1908d371739f3877a4e9549c00c8c7ab26d4e51779d52396700262164120404f3bab942359deaa7cc2d0e3c7d6b4e1d389a31fde423eb18ae0e7f1261486e_2","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":98,"offset":3277},"extra":{"metavars":{"$CONNECTION":{"start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":15,"offset":3194},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":95,"col":18,"offset":3168},"svalue_end":{"line":95,"col":29,"offset":3179},"svalue_abstract_content":"db.cursor()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b0251d6a18560aaead82aff782aefe18fcf056ed83a8d59cbcf5564f0b70b36ad82f763e73e6e9a610cadf37f8d18b429034c99b3bb308c292026c269669865a_2","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":98,"offset":3277},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$O":{"start":{"line":95,"col":18,"offset":3168},"end":{"line":95,"col":29,"offset":3179},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276},"abstract_content":"f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"1b026acab2dd9c828935a93edd03e029cc52d79ed14a51b1dfb2597318cfb478dc1424ba8c332803d714a2495720dac8d572aff92ff5194d1cdadb191f38376f_0","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":21,"offset":3094},"end":{"line":93,"col":42,"offset":3115}},"request.json['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":98,"offset":3277}},"cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":98,"offset":3277},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$O":{"start":{"line":95,"col":18,"offset":3168},"end":{"line":95,"col":29,"offset":3179},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276},"abstract_content":"f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f6551e37bae14ec4342fb5c0d65241c873ab81ef22e1aaeab1637cad1d20eeadd54e1de374f65f10b6465b7540e3bb4725386fd27ef331d10f4d4e6979b7df48_0","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":21,"offset":3094},"end":{"line":93,"col":42,"offset":3115}},"request.json['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":9,"offset":3188},"end":{"line":96,"col":98,"offset":3277}},"cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$ANYTHING":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$SQLSTR":{"start":{"line":96,"col":26,"offset":3205},"end":{"line":96,"col":52,"offset":3231},"abstract_content":"UPDATE users SET email = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ffa02b9215eae606b74943fa0c2f34df2a2b5f93dcf1bf726e7821337202b32db6f6f7ccd02f7aaec0706417fcc61542e0054946fc377e9a03c744170ac3e6e9_0","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":21,"offset":3094},"end":{"line":93,"col":33,"offset":3106}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276}},"f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$AIOMYSQL_CURSOR":{"start":{"line":95,"col":18,"offset":3168},"end":{"line":95,"col":29,"offset":3179},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276},"abstract_content":"f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"8f15935bda36655aae5210cf15f464c4c70d82f10ba5bc050b3bce35f65b96720e1f4a55a6ceb2d2bf0c66756530701753f173ccdd3462c2659a67bdfe3c7c51_0","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":21,"offset":3094},"end":{"line":93,"col":42,"offset":3115}},"request.json['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276}},"f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$ANYTHING":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$SQLSTR":{"start":{"line":96,"col":26,"offset":3205},"end":{"line":96,"col":52,"offset":3231},"abstract_content":"UPDATE users SET email = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"bdc16153d6eded047d6d7623c9dced13e858435f57292a304e5a4d4557a2de421cc1b2ef18ad5c8ad0fed5adcdce48f8c03c09599feeb031d0db9ac6cc7e59d8_0","lines":"        cursor.execute(f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":21,"offset":3094},"end":{"line":93,"col":33,"offset":3106}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":96,"col":24,"offset":3203},"end":{"line":96,"col":97,"offset":3276}},"f\"UPDATE users SET email = '{new_email}' WHERE id = {session['user_id']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":99,"col":22,"offset":3338},"end":{"line":99,"col":79,"offset":3395},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":93,"col":29,"offset":3102},"end":{"line":93,"col":33,"offset":3106},"abstract_content":"json"},"$LOG":{"start":{"line":99,"col":17,"offset":3333},"end":{"line":99,"col":21,"offset":3337},"abstract_content":"info"},"$SINK":{"start":{"line":99,"col":22,"offset":3338},"end":{"line":99,"col":79,"offset":3395},"abstract_content":"f\"User {session['user_id']} updated email to {new_email}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bf23ccae2280229b439bb6340816767205bed68c640e8a6e6716e65fcb7baffc76914afcdf062192b92b9f5600245db79939f61dee39f117a441fb31e117ee18_0","lines":"        logging.info(f\"User {session['user_id']} updated email to {new_email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":21,"offset":3094},"end":{"line":93,"col":42,"offset":3115}},"request.json['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":93,"col":9,"offset":3082},"end":{"line":93,"col":18,"offset":3091}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":99,"col":22,"offset":3338},"end":{"line":99,"col":79,"offset":3395}},"f\"User {session['user_id']} updated email to {new_email}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":114,"col":127,"offset":4084},"extra":{"metavars":{"$FUNC":{"start":{"line":106,"col":5,"offset":3675},"end":{"line":106,"col":16,"offset":3686},"abstract_content":"create_user"},"$DATA":{"start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715},"abstract_content":"username"},"$W":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$CURSOR":{"start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":15,"offset":3972},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":112,"col":18,"offset":3877},"svalue_end":{"line":112,"col":29,"offset":3888},"svalue_abstract_content":"db.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"fc7323432e0347de9f20ce3e3ee1478f6c99ceca41870e5b4a9f400d14a72ab3b6c80de69316cbb9509a3e62b81c7aef684503d88f7a487c656213bfe2e72a9f_0","lines":"        username = request.json['username']\n        password = request.json['password']\n        email = request.json['email']\n        db = connect_to_database()\n        cursor = db.cursor()\n        hashed_password = hashlib.md5(password.encode()).hexdigest()\n        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":110,"col":9,"offset":3795},"end":{"line":114,"col":127,"offset":4084},"extra":{"metavars":{"$FUNC":{"start":{"line":106,"col":5,"offset":3675},"end":{"line":106,"col":16,"offset":3686},"abstract_content":"create_user"},"$DATA":{"start":{"line":110,"col":9,"offset":3795},"end":{"line":110,"col":14,"offset":3800},"abstract_content":"email"},"$W":{"start":{"line":110,"col":25,"offset":3811},"end":{"line":110,"col":29,"offset":3815},"abstract_content":"json"},"$CURSOR":{"start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":15,"offset":3972},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":112,"col":18,"offset":3877},"svalue_end":{"line":112,"col":29,"offset":3888},"svalue_abstract_content":"db.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c9d0cdca23121121140505deaa3b4870e059836435f888c2ba39f7a6c8502685a802f17686350374e8855c95db034a192b0e6cfac02ac4893ebe3259bf97530c_0","lines":"        email = request.json['email']\n        db = connect_to_database()\n        cursor = db.cursor()\n        hashed_password = hashlib.md5(password.encode()).hexdigest()\n        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":113,"col":27,"offset":3915},"end":{"line":113,"col":69,"offset":3957},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":113,"col":27,"offset":3915},"end":{"line":113,"col":67,"offset":3955},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9d3e38e6480bdd78be1a8fd646d9b30945a6f514ed3f6d8119bf29ff29ea8c990ee46e2a40ea3b4ec8d41bc3614e0a68a927227ee204a71d2163ada0f72d43ed_1","lines":"        hashed_password = hashlib.md5(password.encode()).hexdigest()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":113,"col":27,"offset":3915},"end":{"line":113,"col":38,"offset":3926}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":113,"col":27,"offset":3915},"end":{"line":113,"col":69,"offset":3957}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":127,"offset":4084},"extra":{"metavars":{"$DB":{"start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":15,"offset":3972},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":112,"col":18,"offset":3877},"svalue_end":{"line":112,"col":29,"offset":3888},"svalue_abstract_content":"db.cursor()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e1f1908d371739f3877a4e9549c00c8c7ab26d4e51779d52396700262164120404f3bab942359deaa7cc2d0e3c7d6b4e1d389a31fde423eb18ae0e7f1261486e_3","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":127,"offset":4084},"extra":{"metavars":{"$CONNECTION":{"start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":15,"offset":3972},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":112,"col":18,"offset":3877},"svalue_end":{"line":112,"col":29,"offset":3888},"svalue_abstract_content":"db.cursor()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b0251d6a18560aaead82aff782aefe18fcf056ed83a8d59cbcf5564f0b70b36ad82f763e73e6e9a610cadf37f8d18b429034c99b3bb308c292026c269669865a_3","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":127,"offset":4084},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$O":{"start":{"line":112,"col":18,"offset":3877},"end":{"line":112,"col":29,"offset":3888},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083},"abstract_content":"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"aae324bec99ebc446e0e2954757a7e47854452be2ae93ccc612c729dcf9739aa76c00a8c25600f9b8645565fdc4cb58a83eaa14b8e7e9f531410d65febd2ae0f_0","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":20,"offset":3718},"end":{"line":108,"col":44,"offset":3742}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":127,"offset":4084}},"cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":127,"offset":4084},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$O":{"start":{"line":112,"col":18,"offset":3877},"end":{"line":112,"col":29,"offset":3888},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083},"abstract_content":"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"8d44495d0e3297de98c88b6ee951febf3dc85b46f4c217a98c5d366e1f8482a7446663514d6d48b4e5f410308b8832de26aa95f500a80b98bc55930c601f5e0f_0","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":20,"offset":3718},"end":{"line":108,"col":44,"offset":3742}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":9,"offset":3966},"end":{"line":114,"col":127,"offset":4084}},"cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"INSERT"},"$ANYTHING":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$SQLSTR":{"start":{"line":114,"col":26,"offset":3983},"end":{"line":114,"col":81,"offset":4038},"abstract_content":"INSERT INTO users (username, password, email) VALUES ('"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"1562e3498d27820ba3f18da29633ca235fedf7efd6f64a07068db2390d98e8900941aab3b8650dd8613a9be2f7bee5f9463eddc87d9bd16ff01fc3c6ecebef11_0","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":20,"offset":3718},"end":{"line":108,"col":32,"offset":3730}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083}},"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$AIOMYSQL_CURSOR":{"start":{"line":112,"col":18,"offset":3877},"end":{"line":112,"col":29,"offset":3888},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083},"abstract_content":"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"507e55ed7c985f7cde66df52e47ddd9c6fcb2f7792c3aeb89216e1b2f235cba9dadd2150ebdf22bb879997623dc1b789b0c85c56d36268cdcc941a0d7e073dcb_0","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":20,"offset":3718},"end":{"line":108,"col":44,"offset":3742}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083}},"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"INSERT"},"$ANYTHING":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$SQLSTR":{"start":{"line":114,"col":26,"offset":3983},"end":{"line":114,"col":81,"offset":4038},"abstract_content":"INSERT INTO users (username, password, email) VALUES ('"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"c044bbe802eb1a438721b41be413ee1d179960f9b6194181d4fb5246bbb1b0e0d0a852e670b0d635e3483755e44f8569f237cce7b346b00e443435c31ee68063_0","lines":"        cursor.execute(f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":20,"offset":3718},"end":{"line":108,"col":32,"offset":3730}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":114,"col":24,"offset":3981},"end":{"line":114,"col":126,"offset":4083}},"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":117,"col":22,"offset":4145},"end":{"line":117,"col":53,"offset":4176},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":108,"col":28,"offset":3726},"end":{"line":108,"col":32,"offset":3730},"abstract_content":"json"},"$LOG":{"start":{"line":117,"col":17,"offset":4140},"end":{"line":117,"col":21,"offset":4144},"abstract_content":"info"},"$SINK":{"start":{"line":117,"col":22,"offset":4145},"end":{"line":117,"col":53,"offset":4176},"abstract_content":"f\"New user created: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e3ab78447d4fefb4536a4a87c06adb09918877df85fb17cc2e97293efc33c36471f692f74c58bc97d79cf8f4a717659fbf2f33faa61ddbc58ebc4f79b7ad8859_0","lines":"        logging.info(f\"New user created: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":20,"offset":3718},"end":{"line":108,"col":44,"offset":3742}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":108,"col":9,"offset":3707},"end":{"line":108,"col":17,"offset":3715}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":117,"col":22,"offset":4145},"end":{"line":117,"col":53,"offset":4176}},"f\"New user created: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":129,"col":9,"offset":4558},"end":{"line":129,"col":77,"offset":4626},"extra":{"metavars":{"$DB":{"start":{"line":129,"col":9,"offset":4558},"end":{"line":129,"col":15,"offset":4564},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":128,"col":18,"offset":4538},"svalue_end":{"line":128,"col":29,"offset":4549},"svalue_abstract_content":"db.cursor()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e1f1908d371739f3877a4e9549c00c8c7ab26d4e51779d52396700262164120404f3bab942359deaa7cc2d0e3c7d6b4e1d389a31fde423eb18ae0e7f1261486e_4","lines":"        cursor.execute(f\"DELETE FROM users WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":129,"col":9,"offset":4558},"end":{"line":129,"col":77,"offset":4626},"extra":{"metavars":{"$CONNECTION":{"start":{"line":129,"col":9,"offset":4558},"end":{"line":129,"col":15,"offset":4564},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":128,"col":18,"offset":4538},"svalue_end":{"line":128,"col":29,"offset":4549},"svalue_abstract_content":"db.cursor()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b0251d6a18560aaead82aff782aefe18fcf056ed83a8d59cbcf5564f0b70b36ad82f763e73e6e9a610cadf37f8d18b429034c99b3bb308c292026c269669865a_4","lines":"        cursor.execute(f\"DELETE FROM users WHERE id = {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":140,"col":5,"offset":5009},"end":{"line":140,"col":24,"offset":5028},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"57a4b922af19bb05ea78f4dce6bb48e2f0654e70711d7acade49d626129d667461edca8efb8790a2326d07f0c42b8d3222237533c6215cef8991733b1a62a266_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-287/sample_139_original.py","start":{"line":140,"col":5,"offset":5009},"end":{"line":140,"col":24,"offset":5028},"extra":{"metavars":{"$APP":{"start":{"line":140,"col":5,"offset":5009},"end":{"line":140,"col":8,"offset":5012},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":148},"svalue_end":{"line":7,"col":22,"offset":163},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"086452144c70ff21961f0a014cf1aa179679c1b99e13ed2e0fbecade629497755df254ad3def406ba9e123ba5ba6dbe80eb5eb980924eb64d010c9ac67f33928_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_13_original.py","start":{"line":65,"col":17,"offset":2072},"end":{"line":65,"col":129,"offset":2184},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"2f5589896534bbc8ae980f1be0ad24f64ae8bf40fdba0c5344c5effc2b694decaf959a899a7a7af79a417df4b25ae3954324148fe715f82e6d3c6e4ad7f99cac_0","lines":"        token = jwt.encode({\"username\": username, \"exp\": datetime.utcnow() + timedelta(hours=1)}, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_13_original.py","start":{"line":65,"col":17,"offset":2072},"end":{"line":65,"col":129,"offset":2184},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":65,"col":28,"offset":2083},"end":{"line":65,"col":97,"offset":2152},"abstract_content":"{\"username\"username\"exp\"datetime.utcnow()+timedelta(hours 1)}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"80ab608426ab217246269aa11eca99a529f9943c547aaeb4153a5fc10a234c6ffe6eb55d39b3f5707498758c2db725ab8e70c22e0102651efc6c048d2fccae9f_0","lines":"        token = jwt.encode({\"username\": username, \"exp\": datetime.utcnow() + timedelta(hours=1)}, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_13_original.py","start":{"line":81,"col":68,"offset":2866},"end":{"line":81,"col":73,"offset":2871},"extra":{"metavars":{"$BOOL":{"start":{"line":81,"col":68,"offset":2866},"end":{"line":81,"col":73,"offset":2871},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"374d2b1f8cd2e58b0f2f6aa59e2f1f1a12964b60c7157798579d25a82e31760183fc29cd7ce6b6950abf55a9c594cfc0bfd65dae86e810c718849fb8469d28a2_0","lines":"        user_data = jwt.decode(token, options={\"verify_signature\": False})  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_13_original.py","start":{"line":106,"col":68,"offset":4017},"end":{"line":106,"col":73,"offset":4022},"extra":{"metavars":{"$BOOL":{"start":{"line":106,"col":68,"offset":4017},"end":{"line":106,"col":73,"offset":4022},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"374d2b1f8cd2e58b0f2f6aa59e2f1f1a12964b60c7157798579d25a82e31760183fc29cd7ce6b6950abf55a9c594cfc0bfd65dae86e810c718849fb8469d28a2_1","lines":"        user_data = jwt.decode(token, options={\"verify_signature\": False})  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_13_original.py","start":{"line":132,"col":68,"offset":5231},"end":{"line":132,"col":73,"offset":5236},"extra":{"metavars":{"$BOOL":{"start":{"line":132,"col":68,"offset":5231},"end":{"line":132,"col":73,"offset":5236},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"374d2b1f8cd2e58b0f2f6aa59e2f1f1a12964b60c7157798579d25a82e31760183fc29cd7ce6b6950abf55a9c594cfc0bfd65dae86e810c718849fb8469d28a2_2","lines":"        user_data = jwt.decode(token, options={\"verify_signature\": False})  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_14_original.py","start":{"line":60,"col":13,"offset":2093},"end":{"line":60,"col":90,"offset":2170},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"6e7b357d30b19a545d9dd1ac3362422a272b360074e59ed1f24cac7fb953f8bc845d375a25df3920a6a017c2a1f023bdb3a445fa7051dbd79267614c07d27043_0","lines":"    token = jwt.encode({\"username\": username, \"exp\": exp}, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-287/sample_14_original.py","start":{"line":60,"col":13,"offset":2093},"end":{"line":60,"col":90,"offset":2170},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":60,"col":24,"offset":2104},"end":{"line":60,"col":58,"offset":2138},"abstract_content":"{\"username\"username\"exp\"exp}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"fd998937de1b3dc6975973db3883441fcb903afbd96123ed4e111f93f2695438cc9050148cbacc69fa6b9526d87a2890d1fbada4fa3cb18f77dc2299b8be5ab0_0","lines":"    token = jwt.encode({\"username\": username, \"exp\": exp}, SECRET_KEY, algorithm=\"HS256\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-287/sample_14_original.py","start":{"line":71,"col":70,"offset":2621},"end":{"line":71,"col":75,"offset":2626},"extra":{"metavars":{"$BOOL":{"start":{"line":71,"col":70,"offset":2621},"end":{"line":71,"col":75,"offset":2626},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b34af876e78cd897846f85b0531d35cc34b788fa1caf03103ad966efa8e011287d8b36f11e2943d6f9f7925cf3e80fb018f1b460ea6c230c6f08b517c50bfb7f_0","lines":"            decoded = jwt.decode(token, options={\"verify_signature\": False})  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-287/sample_14_original.py","start":{"line":149,"col":5,"offset":5848},"end":{"line":149,"col":39,"offset":5882},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"b2960e73b26ac7b536d2fcdd988ed423b71a0b891555bf6eb09248320289d3724b60802fa8760be17dce81e27ecdf2b44ba907b693153d4265e646e85e2063b2_0","lines":"    app.run(host=\"0.0.0.0\", port=8000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_140_original.py","start":{"line":20,"col":24,"offset":445},"end":{"line":20,"col":64,"offset":485},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":18,"offset":17},"abstract_content":"ssl.CERT_OPTIONAL"},"$REQS":{"start":{"line":20,"col":46,"offset":467},"end":{"line":20,"col":63,"offset":484},"abstract_content":"ssl.CERT_OPTIONAL"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"640a81270978680d3c45d3746e4be52b62903659790ad12c50b9b6b3b0628e459b2e2f3a91b220cda199638a33f1ba9809c6bc8f1066afff7e8907e065341909_0","lines":"        self.manager = PoolManager(cert_reqs=ssl.CERT_OPTIONAL)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.unverified-ssl-context.unverified-ssl-context","path":"vulnerability_samples/CWE-295/sample_141_original.py","start":{"line":21,"col":12,"offset":381},"end":{"line":21,"col":44,"offset":413},"extra":{"metavars":{},"message":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.","fix":"ssl.create_default_context()","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-295: Improper Certificate Validation"],"references":["https://docs.python.org/3/library/ssl.html#ssl-security","https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","shortlink":"https://sg.run/N4lp","semgrep.dev":{"rule":{"origin":"community","r_id":9627,"rule_id":"v8UnkQ","rule_name":"python.lang.security.unverified-ssl-context.unverified-ssl-context","rv_id":946405,"url":"https://semgrep.dev/playground/r/ExTg2wr/python.lang.security.unverified-ssl-context.unverified-ssl-context","version_id":"ExTg2wr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"3adc59c4eeb36b4a97d67cb1afc7b6ebcf3c7e42fc70c030cbe0fb1f20680ef90326cf4f69f2de8a7d6ee185f609a7eaeddb15af17fe30aa00102547ff6bc514_0","lines":"    return ssl._create_unverified_context()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","path":"vulnerability_samples/CWE-295/sample_141_original.py","start":{"line":27,"col":14,"offset":544},"end":{"line":27,"col":58,"offset":588},"extra":{"metavars":{},"message":"Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.","metadata":{"cwe":["CWE-939: Improper Authorization in Handler for Custom URL Scheme"],"owasp":"A01:2017 - Injection","source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163","bandit-code":"B310","asvs":{"control_id":"5.2.4 Dynamic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://cwe.mitre.org/data/definitions/939.html"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","shortlink":"https://sg.run/dKZZ","semgrep.dev":{"rule":{"origin":"community","r_id":9634,"rule_id":"8GUj22","rule_name":"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","rv_id":946340,"url":"https://semgrep.dev/playground/r/w8TKJbO/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","version_id":"w8TKJbO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"09f553995164ae7bd0fa490276f736864d142387683e055649f1ed9681d82325532510779127deeff696b0261ccb735bf868897524ca77129e89dcbaa80a06a3_0","lines":"        with urllib.request.urlopen(req, context=context) as response:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_142_original.py","start":{"line":34,"col":21,"offset":1022},"end":{"line":34,"col":94,"offset":1095},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":18,"offset":17},"abstract_content":"ssl.CERT_OPTIONAL"},"$REQS":{"start":{"line":34,"col":76,"offset":1077},"end":{"line":34,"col":93,"offset":1094},"abstract_content":"ssl.CERT_OPTIONAL"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0cf69ca2653c03b2e3e2c2bfa44598f297268fc7f2c4455d1dbc77c70db3896f6464d243e8a3a4412085a945a9a107ff793f520df5fbdad88b6c17d0c220f080_0","lines":"        self.http = urllib3.connection_from_url(config.base_url, cert_reqs=ssl.CERT_OPTIONAL)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":26,"col":12,"offset":533},"end":{"line":26,"col":49,"offset":570},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"'NONE'"},"$REQS":{"start":{"line":26,"col":42,"offset":563},"end":{"line":26,"col":48,"offset":569},"abstract_content":"'NONE'"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ccda51339af78b7e255a8208216c3c7aab6b4160c48d993dccd4e2925216fc39d5e79872eae57c15ad0c25aead756896d2d919336fc6797afb806f77deb87b0b_0","lines":"    http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":28,"col":20,"offset":618},"end":{"line":28,"col":44,"offset":642},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$OBJ":{"start":{"line":26,"col":12,"offset":533},"end":{"line":26,"col":49,"offset":570},"abstract_content":"urllib3.PoolManager(cert_reqs'NONE')"},"$FUNC":{"start":{"line":28,"col":25,"offset":623},"end":{"line":28,"col":32,"offset":630},"abstract_content":"request"},"$METHOD":{"start":{"line":28,"col":33,"offset":631},"end":{"line":28,"col":38,"offset":636},"abstract_content":"'GET'"},"$URL":{"start":{"line":28,"col":40,"offset":638},"end":{"line":28,"col":43,"offset":641},"abstract_content":"url"},"$PROPERTY":{"start":{"line":72,"col":27,"offset":2159},"end":{"line":72,"col":31,"offset":2163},"abstract_content":"args"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) with Flask","functional-categories":["net::sink::http-request::urllib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"technology":["flask","flask-wtf","urllib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","shortlink":"https://sg.run/9A5v0","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116523,"rule_id":"NbU36Xq","rule_name":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","rv_id":947950,"url":"https://semgrep.dev/playground/r/9lTyOv4/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","version_id":"9lTyOv4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"c92c04338985ee189d081d4e2f7e0936a48ba52e99e6ddec848a4da8b6ab258ca2e36f065096549362f4a472dfc8c36774cf65b89a0f2d3c17a2deef40035702_0","lines":"        response = http.request('GET', url)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":72,"col":13,"offset":2145},"end":{"line":72,"col":44,"offset":2176}},"flask_request.args.get('q', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":72,"col":5,"offset":2137},"end":{"line":72,"col":10,"offset":2142}},"content":"query"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":73,"col":23,"offset":2199},"end":{"line":73,"col":37,"offset":2213}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":36,"col":20,"offset":942},"end":{"line":36,"col":32,"offset":954}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":73,"col":5,"offset":2181},"end":{"line":73,"col":20,"offset":2196}},"content":"sanitized_query"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":74,"col":5,"offset":2225},"end":{"line":74,"col":12,"offset":2232}},"content":"api_url"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":75,"col":12,"offset":2346},"end":{"line":75,"col":30,"offset":2364}},"cached_api_request"],[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":25,"col":24,"offset":516},"end":{"line":25,"col":27,"offset":519}},"content":"url"}],["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":28,"col":20,"offset":618},"end":{"line":28,"col":44,"offset":642}},"http.request('GET', url)"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":77,"col":21,"offset":2407},"end":{"line":77,"col":70,"offset":2456},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$LOGGER":{"start":{"line":19,"col":10,"offset":403},"end":{"line":19,"col":37,"offset":430},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":72,"col":27,"offset":2159},"end":{"line":72,"col":31,"offset":2163},"abstract_content":"args"},"$LOG":{"start":{"line":77,"col":16,"offset":2402},"end":{"line":77,"col":20,"offset":2406},"abstract_content":"info"},"$SINK":{"start":{"line":77,"col":21,"offset":2407},"end":{"line":77,"col":70,"offset":2456},"abstract_content":"f\"Performed search with query: {sanitized_query}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d794a70000504d4fb114ac507b0887e924b24db42a24b22fbfedbe28893d5625285797bc82637c67fd697e3a255d792f9f7b995dab935aad65313b25571b817f_0","lines":"        logger.info(f\"Performed search with query: {sanitized_query}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":72,"col":13,"offset":2145},"end":{"line":72,"col":44,"offset":2176}},"flask_request.args.get('q', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":72,"col":5,"offset":2137},"end":{"line":72,"col":10,"offset":2142}},"content":"query"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":73,"col":23,"offset":2199},"end":{"line":73,"col":37,"offset":2213}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":36,"col":20,"offset":942},"end":{"line":36,"col":32,"offset":954}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":73,"col":5,"offset":2181},"end":{"line":73,"col":20,"offset":2196}},"content":"sanitized_query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":77,"col":21,"offset":2407},"end":{"line":77,"col":70,"offset":2456}},"f\"Performed search with query: {sanitized_query}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":90,"col":16,"offset":2934},"end":{"line":90,"col":53,"offset":2971},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"'NONE'"},"$REQS":{"start":{"line":90,"col":46,"offset":2964},"end":{"line":90,"col":52,"offset":2970},"abstract_content":"'NONE'"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ccda51339af78b7e255a8208216c3c7aab6b4160c48d993dccd4e2925216fc39d5e79872eae57c15ad0c25aead756896d2d919336fc6797afb806f77deb87b0b_1","lines":"        http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":91,"col":20,"offset":3010},"end":{"line":91,"col":123,"offset":3113},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":31,"offset":2659},"end":{"line":84,"col":35,"offset":2663},"abstract_content":"json"},"$URL":{"start":{"line":88,"col":15,"offset":2824},"end":{"line":88,"col":100,"offset":2909},"abstract_content":"config.get('API''create_user_url'fallback'https://api.example.com/users/create')"},"$OBJ":{"start":{"line":90,"col":16,"offset":2934},"end":{"line":90,"col":53,"offset":2971},"abstract_content":"urllib3.PoolManager(cert_reqs'NONE')"},"$FUNC":{"start":{"line":91,"col":25,"offset":3015},"end":{"line":91,"col":32,"offset":3022},"abstract_content":"request"},"$METHOD":{"start":{"line":91,"col":33,"offset":3023},"end":{"line":91,"col":39,"offset":3029},"abstract_content":"'POST'"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) with Flask","functional-categories":["net::sink::http-request::urllib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"technology":["flask","flask-wtf","urllib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","shortlink":"https://sg.run/9A5v0","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116523,"rule_id":"NbU36Xq","rule_name":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","rv_id":947950,"url":"https://semgrep.dev/playground/r/9lTyOv4/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","version_id":"9lTyOv4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"1ed783893a5032ca443671a1cde4d58b32fbdcccb69ca8d745da9f4f41f5258b0ef0589dddbc05a69d0c7117a115e40e04f05b7cd8454709394599e4008a9f9e_0","lines":"        response = http.request('POST', api_url, body=json.dumps(user_data), headers={'Content-Type': 'application/json'})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":84,"col":17,"offset":2645},"end":{"line":84,"col":35,"offset":2663}},"flask_request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":84,"col":5,"offset":2633},"end":{"line":84,"col":14,"offset":2642}},"content":"user_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":91,"col":20,"offset":3010},"end":{"line":91,"col":123,"offset":3113}},"http.request('POST', api_url, body=json.dumps(user_data), headers={'Content-Type': 'application/json'})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":94,"col":21,"offset":3243},"end":{"line":94,"col":65,"offset":3287},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":19,"col":10,"offset":403},"end":{"line":19,"col":37,"offset":430},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":84,"col":31,"offset":2659},"end":{"line":84,"col":35,"offset":2663},"abstract_content":"json"},"$LOG":{"start":{"line":94,"col":16,"offset":3238},"end":{"line":94,"col":20,"offset":3242},"abstract_content":"info"},"$SINK":{"start":{"line":94,"col":21,"offset":3243},"end":{"line":94,"col":65,"offset":3287},"abstract_content":"f\"Created new user: {user_data['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5cbf6673d422eac82c485c97d6fb89f47290c729b4302b3135ef65e7f246ba82ea8e7e6242159c40372b8711553268fe7d6d3e8417c47a3d8248def119509fa9_0","lines":"        logger.info(f\"Created new user: {user_data['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":84,"col":17,"offset":2645},"end":{"line":84,"col":35,"offset":2663}},"flask_request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":84,"col":5,"offset":2633},"end":{"line":84,"col":14,"offset":2642}},"content":"user_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":94,"col":21,"offset":3243},"end":{"line":94,"col":65,"offset":3287}},"f\"Created new user: {user_data['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":108,"col":16,"offset":3874},"end":{"line":108,"col":53,"offset":3911},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"'NONE'"},"$REQS":{"start":{"line":108,"col":46,"offset":3904},"end":{"line":108,"col":52,"offset":3910},"abstract_content":"'NONE'"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ccda51339af78b7e255a8208216c3c7aab6b4160c48d993dccd4e2925216fc39d5e79872eae57c15ad0c25aead756896d2d919336fc6797afb806f77deb87b0b_2","lines":"        http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":109,"col":20,"offset":3950},"end":{"line":109,"col":125,"offset":4055},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"request"},"$APP":{"start":{"line":100,"col":2,"offset":3507},"end":{"line":100,"col":5,"offset":3510},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":228},"svalue_end":{"line":11,"col":22,"offset":243},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":100,"col":6,"offset":3511},"end":{"line":100,"col":11,"offset":3516},"abstract_content":"route"},"$FUNC":{"start":{"line":101,"col":5,"offset":3574},"end":{"line":101,"col":19,"offset":3588},"abstract_content":"update_product"},"$PARAM":{"start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599},"abstract_content":"product_id"},"$PROPERTY":{"start":{"line":102,"col":34,"offset":3635},"end":{"line":102,"col":38,"offset":3639},"abstract_content":"json"},"$URL":{"start":{"line":106,"col":15,"offset":3747},"end":{"line":106,"col":117,"offset":3849},"abstract_content":"f\"{config.get('API''update_product_url'fallback'https://api.example.com/products')}/{product_id}\""},"$OBJ":{"start":{"line":108,"col":16,"offset":3874},"end":{"line":108,"col":53,"offset":3911},"abstract_content":"urllib3.PoolManager(cert_reqs'NONE')"},"$METHOD":{"start":{"line":109,"col":33,"offset":3963},"end":{"line":109,"col":38,"offset":3968},"abstract_content":"'PUT'"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) with Flask","functional-categories":["net::sink::http-request::urllib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"technology":["flask","flask-wtf","urllib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","shortlink":"https://sg.run/9A5v0","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116523,"rule_id":"NbU36Xq","rule_name":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","rv_id":947950,"url":"https://semgrep.dev/playground/r/9lTyOv4/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","version_id":"9lTyOv4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ebe86e218d9d1991065a1e0cfa92ecfbe70a6ced54d98063464e3dd5add812b29a7099e009d8d2dd0e74ebf6237031736ee2dd1695ca19b207a7d2cc9a82e32b_0","lines":"        response = http.request('PUT', api_url, body=json.dumps(product_data), headers={'Content-Type': 'application/json'})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":102,"col":20,"offset":3621},"end":{"line":102,"col":38,"offset":3639}},"flask_request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":102,"col":5,"offset":3606},"end":{"line":102,"col":17,"offset":3618}},"content":"product_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":109,"col":20,"offset":3950},"end":{"line":109,"col":125,"offset":4055}},"http.request('PUT', api_url, body=json.dumps(product_data), headers={'Content-Type': 'application/json'})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":112,"col":21,"offset":4185},"end":{"line":112,"col":53,"offset":4217},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":19,"col":10,"offset":403},"end":{"line":19,"col":37,"offset":430},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":100,"col":2,"offset":3507},"end":{"line":100,"col":5,"offset":3510},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":228},"svalue_end":{"line":11,"col":22,"offset":243},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":100,"col":6,"offset":3511},"end":{"line":100,"col":11,"offset":3516},"abstract_content":"route"},"$FUNC":{"start":{"line":101,"col":5,"offset":3574},"end":{"line":101,"col":19,"offset":3588},"abstract_content":"update_product"},"$PARAM":{"start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599},"abstract_content":"product_id"},"$LOG":{"start":{"line":112,"col":16,"offset":4180},"end":{"line":112,"col":20,"offset":4184},"abstract_content":"info"},"$SINK":{"start":{"line":112,"col":21,"offset":4185},"end":{"line":112,"col":53,"offset":4217},"abstract_content":"f\"Updated product: {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"6879e6c4f16158b2d129e7f07c42d5a8950252e3f89b8f5ea6ee6618257221485b630358c94079e539b8110960fc3f09c765762488f9bd8b002926edf3209c05_0","lines":"        logger.info(f\"Updated product: {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":112,"col":21,"offset":4185},"end":{"line":112,"col":53,"offset":4217}},"f\"Updated product: {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":115,"col":22,"offset":4340},"end":{"line":115,"col":70,"offset":4388},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":19,"col":10,"offset":403},"end":{"line":19,"col":37,"offset":430},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":100,"col":2,"offset":3507},"end":{"line":100,"col":5,"offset":3510},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":228},"svalue_end":{"line":11,"col":22,"offset":243},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":100,"col":6,"offset":3511},"end":{"line":100,"col":11,"offset":3516},"abstract_content":"route"},"$FUNC":{"start":{"line":101,"col":5,"offset":3574},"end":{"line":101,"col":19,"offset":3588},"abstract_content":"update_product"},"$PARAM":{"start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599},"abstract_content":"product_id"},"$LOG":{"start":{"line":115,"col":16,"offset":4334},"end":{"line":115,"col":21,"offset":4339},"abstract_content":"error"},"$SINK":{"start":{"line":115,"col":22,"offset":4340},"end":{"line":115,"col":70,"offset":4388},"abstract_content":"f\"Error updating product {product_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8ea7de162331ff5f69ce98d148c954f7c93eccc72a27e631900cfe8c4f5dd5a3ff1c4143c7d8f89835e53234bf87eae7a7a70da45b8db6274764b858f864abeb_0","lines":"        logger.error(f\"Error updating product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":101,"col":20,"offset":3589},"end":{"line":101,"col":30,"offset":3599}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":115,"col":22,"offset":4340},"end":{"line":115,"col":70,"offset":4388}},"f\"Error updating product {product_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":122,"col":16,"offset":4677},"end":{"line":122,"col":53,"offset":4714},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"'NONE'"},"$REQS":{"start":{"line":122,"col":46,"offset":4707},"end":{"line":122,"col":52,"offset":4713},"abstract_content":"'NONE'"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ccda51339af78b7e255a8208216c3c7aab6b4160c48d993dccd4e2925216fc39d5e79872eae57c15ad0c25aead756896d2d919336fc6797afb806f77deb87b0b_3","lines":"        http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":123,"col":20,"offset":4753},"end":{"line":123,"col":51,"offset":4784},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":118,"col":2,"offset":4459},"end":{"line":118,"col":5,"offset":4462},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":228},"svalue_end":{"line":11,"col":22,"offset":243},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":118,"col":6,"offset":4463},"end":{"line":118,"col":11,"offset":4468},"abstract_content":"route"},"$FUNC":{"start":{"line":119,"col":5,"offset":4523},"end":{"line":119,"col":16,"offset":4534},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542},"abstract_content":"user_id"},"$URL":{"start":{"line":120,"col":15,"offset":4559},"end":{"line":120,"col":108,"offset":4652},"abstract_content":"f\"{config.get('API''delete_user_url'fallback'https://api.example.com/users')}/{user_id}\""},"$OBJ":{"start":{"line":122,"col":16,"offset":4677},"end":{"line":122,"col":53,"offset":4714},"abstract_content":"urllib3.PoolManager(cert_reqs'NONE')"},"$METHOD":{"start":{"line":123,"col":33,"offset":4766},"end":{"line":123,"col":41,"offset":4774},"abstract_content":"'DELETE'"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) with Flask","functional-categories":["net::sink::http-request::urllib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"technology":["flask","flask-wtf","urllib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","shortlink":"https://sg.run/9A5v0","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116523,"rule_id":"NbU36Xq","rule_name":"python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","rv_id":947950,"url":"https://semgrep.dev/playground/r/9lTyOv4/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","version_id":"9lTyOv4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.net.tainted-flask-http-request-urllib3.tainted-flask-http-request-urllib3","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9f22bec8a20b6fac84c63d9cd7b46968c52e43642b7edca716aecb8767dcd065769f951a860d8b10182b5dfe6b61682717a4f0f6710cf9eada983965ef88ad29_0","lines":"        response = http.request('DELETE', api_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542}},"user_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542}},"content":"user_id"},{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":120,"col":5,"offset":4549},"end":{"line":120,"col":12,"offset":4556}},"content":"api_url"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":123,"col":20,"offset":4753},"end":{"line":123,"col":51,"offset":4784}},"http.request('DELETE', api_url)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":126,"col":21,"offset":4914},"end":{"line":126,"col":47,"offset":4940},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":19,"col":10,"offset":403},"end":{"line":19,"col":37,"offset":430},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":118,"col":2,"offset":4459},"end":{"line":118,"col":5,"offset":4462},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":228},"svalue_end":{"line":11,"col":22,"offset":243},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":118,"col":6,"offset":4463},"end":{"line":118,"col":11,"offset":4468},"abstract_content":"route"},"$FUNC":{"start":{"line":119,"col":5,"offset":4523},"end":{"line":119,"col":16,"offset":4534},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542},"abstract_content":"user_id"},"$LOG":{"start":{"line":126,"col":16,"offset":4909},"end":{"line":126,"col":20,"offset":4913},"abstract_content":"info"},"$SINK":{"start":{"line":126,"col":21,"offset":4914},"end":{"line":126,"col":47,"offset":4940},"abstract_content":"f\"Deleted user: {user_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7c0c3721a3b8fdd9c4fa8ebb5c1a0bf3124913ead631ba59fa4ae1b12341fc503e54cbefb970d49cff72b299ad726be104279e374d1a97196a5f781a7a31b81c_0","lines":"        logger.info(f\"Deleted user: {user_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542}},"user_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":126,"col":21,"offset":4914},"end":{"line":126,"col":47,"offset":4940}},"f\"Deleted user: {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":129,"col":22,"offset":5060},"end":{"line":129,"col":64,"offset":5102},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":19,"col":10,"offset":403},"end":{"line":19,"col":37,"offset":430},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":118,"col":2,"offset":4459},"end":{"line":118,"col":5,"offset":4462},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":228},"svalue_end":{"line":11,"col":22,"offset":243},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":118,"col":6,"offset":4463},"end":{"line":118,"col":11,"offset":4468},"abstract_content":"route"},"$FUNC":{"start":{"line":119,"col":5,"offset":4523},"end":{"line":119,"col":16,"offset":4534},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542},"abstract_content":"user_id"},"$LOG":{"start":{"line":129,"col":16,"offset":5054},"end":{"line":129,"col":21,"offset":5059},"abstract_content":"error"},"$SINK":{"start":{"line":129,"col":22,"offset":5060},"end":{"line":129,"col":64,"offset":5102},"abstract_content":"f\"Error deleting user {user_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bf5fc74e2e78405c414e5ac2e93662c1fe13180684e2fe1c20d8e715875a7265ed6958e59ae0bf77f1709edfedcdced7a0d23f397495453ce820ea8727b84641_0","lines":"        logger.error(f\"Error deleting user {user_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542}},"user_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":119,"col":17,"offset":4535},"end":{"line":119,"col":24,"offset":4542}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":129,"col":22,"offset":5060},"end":{"line":129,"col":64,"offset":5102}},"f\"Error deleting user {user_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-295/sample_15_original.py","start":{"line":147,"col":5,"offset":5696},"end":{"line":147,"col":81,"offset":5772},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"59e3d778f87fd6d8678d913c5be5cdfd3aa1500f442e6ebd2fd05b8e0b9c268b8020285b6f7fd2e34e07ca81fc8a778f69da9a758ba4b9429f3f383eac1fdb91_0","lines":"    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_16_original.py","start":{"line":32,"col":21,"offset":819},"end":{"line":32,"col":58,"offset":856},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"'NONE'"},"$REQS":{"start":{"line":32,"col":51,"offset":849},"end":{"line":32,"col":57,"offset":855},"abstract_content":"'NONE'"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"40dd2381d9387be0b0312fdfd15f13a406a62429fd425f04ee3b3490c31d3b6ef09029a8c7f1df94c438a7254aa0ea490efe0188ad9e3aa525ec08dc72783493_0","lines":"        self.http = urllib3.PoolManager(cert_reqs='NONE')  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-295/sample_16_original.py","start":{"line":70,"col":1,"offset":2247},"end":{"line":82,"col":42,"offset":2813},"extra":{"metavars":{"$R":{"start":{"line":71,"col":5,"offset":2264},"end":{"line":71,"col":19,"offset":2278},"abstract_content":"request_django"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2ab9393e3d0b0dafa5f85014bf170831b57cec9ed0da5e64e1cbe7031d25358ebb659d7841dc012587bfaabc08159c621a33e86a8aa715be66aea8ab9df0ff61_0","lines":"@csrf_exempt\ndef request_django(request):\n    if request.method != 'GET':\n        return HttpResponseBadRequest(\"Only GET requests are allowed\")\n\n    transformed_data = {}\n    for endpoint in config['api_endpoints']:\n        cache_key = f\"api_data_{endpoint['name']}\"\n        data = get_cached_data(cache_key, endpoint['url'], endpoint['cache_timeout'])\n        transformed_data[endpoint['name']] = transform_data(data, endpoint['transform_type'])\n\n    logger.info(f\"Processed request for {len(transformed_data)} endpoints\")\n    return JsonResponse(transformed_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-295/sample_16_original.py","start":{"line":84,"col":1,"offset":2815},"end":{"line":98,"col":32,"offset":3302},"extra":{"metavars":{"$R":{"start":{"line":85,"col":5,"offset":2832},"end":{"line":85,"col":17,"offset":2844},"abstract_content":"health_check"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"54d0cb277a930c9701a84f021abeb715a3c678dba7e1c45201c5fbeb7cdea507734c0b26b6ff42e329d32202488221f6271847fc4b89248b60f1b0b057b1d168_0","lines":"@csrf_exempt\ndef health_check(request):\n    if request.method != 'GET':\n        return HttpResponseBadRequest(\"Only GET requests are allowed\")\n\n    status = {}\n    for endpoint in config['api_endpoints']:\n        try:\n            api_client.get(endpoint['url'])\n            status[endpoint['name']] = 'OK'\n        except ApiException:\n            status[endpoint['name']] = 'ERROR'\n\n    logger.info(f\"Health check completed. Status: {json.dumps(status)}\")\n    return JsonResponse(status)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-295/sample_16_original.py","start":{"line":100,"col":1,"offset":3304},"end":{"line":107,"col":66,"offset":3565},"extra":{"metavars":{"$R":{"start":{"line":101,"col":5,"offset":3321},"end":{"line":101,"col":16,"offset":3332},"abstract_content":"clear_cache"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dca5a5b83cd01a8ad365fc06ba8be3f843af8dffd4484c9347945c04630c26d98e83088738bd87a94d428cd4ff9ea72aaff827d501af5fe372ba51c4dc270a7b_0","lines":"@csrf_exempt\ndef clear_cache(request):\n    if request.method != 'POST':\n        return HttpResponseBadRequest(\"Only POST requests are allowed\")\n\n    cache.clear()\n    logger.info(\"Cache cleared\")\n    return JsonResponse({\"status\": \"Cache cleared successfully\"})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","path":"vulnerability_samples/CWE-295/sample_17_original.py","start":{"line":32,"col":21,"offset":869},"end":{"line":32,"col":84,"offset":932},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"'NONE'"},"$REQS":{"start":{"line":32,"col":51,"offset":899},"end":{"line":32,"col":57,"offset":905},"abstract_content":"'NONE'"}},"message":"certificate verification explicitly disabled, insecure connections possible","metadata":{"cwe":["CWE-295: Improper Certificate Validation"],"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","shortlink":"https://sg.run/b7yp","semgrep.dev":{"rule":{"origin":"community","r_id":9670,"rule_id":"eqU87k","rule_name":"python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","rv_id":946370,"url":"https://semgrep.dev/playground/r/JdTDyxK/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","version_id":"JdTDyxK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"91903f9ef24671f4a83d943fa3b661a47444cccca5fbe9d616561131e0ecc7d0eb116ac9d2eed7c2f2a8bf996b44f00f8ec8685c4403fbeb2bed5d9348d04092_0","lines":"        self.http = urllib3.PoolManager(cert_reqs='NONE', retries=urllib3.Retry(3))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.unverified-ssl-context.unverified-ssl-context","path":"vulnerability_samples/CWE-295/sample_18_original.py","start":{"line":80,"col":19,"offset":2714},"end":{"line":80,"col":51,"offset":2746},"extra":{"metavars":{},"message":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.","fix":"ssl.create_default_context()","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-295: Improper Certificate Validation"],"references":["https://docs.python.org/3/library/ssl.html#ssl-security","https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","shortlink":"https://sg.run/N4lp","semgrep.dev":{"rule":{"origin":"community","r_id":9627,"rule_id":"v8UnkQ","rule_name":"python.lang.security.unverified-ssl-context.unverified-ssl-context","rv_id":946405,"url":"https://semgrep.dev/playground/r/ExTg2wr/python.lang.security.unverified-ssl-context.unverified-ssl-context","version_id":"ExTg2wr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"bc3b8b0a139af514cdba7fa5318207113152e2462a3111a3204d383b8715628782acee1e573e3c8631807fad3e5c4308c6b240a0481fa02daee3c3d9d776ad91_0","lines":"    ssl_context = ssl._create_unverified_context()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","path":"vulnerability_samples/CWE-295/sample_19_original.py","start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":21,"offset":20},"extra":{"metavars":{},"message":"Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.","metadata":{"cwe":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"],"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"source-rule-url":"https://github.com/PyCQA/bandit/blob/07f84cb5f5e7c1055e6feaa0fe93afa471de0ac3/bandit/blacklists/imports.py#L160","references":["https://pypi.org/project/defusedxml/","https://docs.python.org/3/library/xml.html#xml-vulnerabilities"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","shortlink":"https://sg.run/weqY","semgrep.dev":{"rule":{"origin":"community","r_id":9629,"rule_id":"ZqU5EZ","rule_name":"python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","rv_id":946408,"url":"https://semgrep.dev/playground/r/8KTKjZ9/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","version_id":"8KTKjZ9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"a2558277c167b6347bf6b7b4157d05cea3c3cce6e9f695dddf91ee9c01d69e043729c17cc7a1e6d69a45289abb8978f6f3cf2f2dd47047b1ee21dc5277a1a5d1_0","lines":"import xmlrpc.client","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.unverified-ssl-context.unverified-ssl-context","path":"vulnerability_samples/CWE-295/sample_19_original.py","start":{"line":18,"col":24,"offset":422},"end":{"line":18,"col":56,"offset":454},"extra":{"metavars":{},"message":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.","fix":"ssl.create_default_context()","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-295: Improper Certificate Validation"],"references":["https://docs.python.org/3/library/ssl.html#ssl-security","https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","shortlink":"https://sg.run/N4lp","semgrep.dev":{"rule":{"origin":"community","r_id":9627,"rule_id":"v8UnkQ","rule_name":"python.lang.security.unverified-ssl-context.unverified-ssl-context","rv_id":946405,"url":"https://semgrep.dev/playground/r/ExTg2wr/python.lang.security.unverified-ssl-context.unverified-ssl-context","version_id":"ExTg2wr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"19cd8a8ef843b0d5916f9bd04ac802ced2e7201037432aae644f9d24afbea58d635c3642c0e01b69254a3fe3d3f7b264ff00f38cd039c7cf69a3caca3fc17a67_0","lines":"        self.context = ssl._create_unverified_context()  # Vulnerable","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.unverified-ssl-context.unverified-ssl-context","path":"vulnerability_samples/CWE-295/sample_20_original.py","start":{"line":132,"col":35,"offset":4589},"end":{"line":132,"col":67,"offset":4621},"extra":{"metavars":{},"message":"Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.","fix":"ssl.create_default_context()","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-295: Improper Certificate Validation"],"references":["https://docs.python.org/3/library/ssl.html#ssl-security","https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","shortlink":"https://sg.run/N4lp","semgrep.dev":{"rule":{"origin":"community","r_id":9627,"rule_id":"v8UnkQ","rule_name":"python.lang.security.unverified-ssl-context.unverified-ssl-context","rv_id":946405,"url":"https://semgrep.dev/playground/r/ExTg2wr/python.lang.security.unverified-ssl-context.unverified-ssl-context","version_id":"ExTg2wr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"6429a5d2815bd375027fb519fbec4dfe2174222312bd46490de46d346925705a83d0bcf4c1f5634fe6f00d3cf1169a3687dabafc3e0e8072e3d70466b8c06d71_0","lines":"            'server.ssl_context': ssl._create_unverified_context()  # Vulnerable","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_126_original.py","start":{"line":35,"col":54,"offset":1088},"end":{"line":35,"col":59,"offset":1093},"extra":{"metavars":{"$VAL":{"start":{"line":35,"col":54,"offset":1088},"end":{"line":35,"col":59,"offset":1093},"abstract_content":"False"}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1a889e14bd0303ea4b71723e23c862864f430e71b3bcaa706f1d249ef24517bf6b35be059ee8044742a799d9763e591f1974a67b6f986a6ce2a5a9e9dac027d4_0","lines":"    security = Security(**config, require_encryption=False)  # Vulnerability: Cleartext transmission","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_126_original.py","start":{"line":96,"col":72,"offset":3288},"end":{"line":96,"col":77,"offset":3293},"extra":{"metavars":{"$VAL":{"start":{"line":96,"col":72,"offset":3288},"end":{"line":96,"col":77,"offset":3293},"abstract_content":"False"}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1a889e14bd0303ea4b71723e23c862864f430e71b3bcaa706f1d249ef24517bf6b35be059ee8044742a799d9763e591f1974a67b6f986a6ce2a5a9e9dac027d4_1","lines":"        client = Client(security=Security(**config, require_encryption=False))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","path":"vulnerability_samples/CWE-319/sample_127_original.py","start":{"line":16,"col":21,"offset":362},"end":{"line":16,"col":137,"offset":478},"extra":{"metavars":{},"message":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","shortlink":"https://sg.run/N4Np","semgrep.dev":{"rule":{"origin":"community","r_id":9671,"rule_id":"v8UnWQ","rule_name":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","rv_id":946371,"url":"https://semgrep.dev/playground/r/5PT9O13/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","version_id":"5PT9O13"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"6a149db0583e1ea6c8ef0f5a27b304a912e7100bb2aedf18e7f6350ed47dd70a1e060b12f6d99d2c9067ba0b11fc3bdf1c0368b92ba28bf2343ad486cbc9003c_0","lines":"        self.http = urllib3.HTTPConnectionPool('jsonplaceholder.typicode.com', maxsize=10, retries=urllib3.Retry(3, backoff_factor=0.1))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":26,"col":44,"offset":954},"end":{"line":26,"col":49,"offset":959},"extra":{"metavars":{"$VAL":{"start":{"line":26,"col":44,"offset":954},"end":{"line":26,"col":49,"offset":959},"abstract_content":"False"}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"58b089c2eb551dd959424a7ff4f485201186286d3f8ada5a72e3d338e4e85992d828d3698bf2d07b3c1362f4c1a015cc375ac7386ad0b993b964e55c1bd54503_0","lines":"    security = Security(require_encryption=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":84,"col":22,"offset":2946},"end":{"line":84,"col":64,"offset":2988},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":66,"col":20,"offset":2289},"end":{"line":66,"col":24,"offset":2293},"abstract_content":"json"},"$LOG":{"start":{"line":84,"col":17,"offset":2941},"end":{"line":84,"col":21,"offset":2945},"abstract_content":"info"},"$SINK":{"start":{"line":84,"col":22,"offset":2946},"end":{"line":84,"col":64,"offset":2988},"abstract_content":"f\"User {username} registered successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1b33f76e74d749a49e05bb0c798646bf0b6298fa75235cc3506c03483bf7f5a698f0a9831add6a4691315cefa2129254afc199293df2af3aaa16f75a7fe3acfc_0","lines":"        logging.info(f\"User {username} registered successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":67,"col":16,"offset":2309},"end":{"line":67,"col":36,"offset":2329}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":67,"col":5,"offset":2298},"end":{"line":67,"col":13,"offset":2306}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":84,"col":22,"offset":2946},"end":{"line":84,"col":64,"offset":2988}},"f\"User {username} registered successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":102,"col":22,"offset":3652},"end":{"line":102,"col":63,"offset":3693},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":93,"col":20,"offset":3318},"end":{"line":93,"col":24,"offset":3322},"abstract_content":"json"},"$LOG":{"start":{"line":102,"col":17,"offset":3647},"end":{"line":102,"col":21,"offset":3651},"abstract_content":"info"},"$SINK":{"start":{"line":102,"col":22,"offset":3652},"end":{"line":102,"col":63,"offset":3693},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5429afb9eed0ade51ad00144d8b036df829f2206c683aa2c4d4dc22f67d559400b89f0ad2c3792925e6638274ec9b25ea1092752cd8abe78cca2adaa113fa5f2_0","lines":"        logging.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":94,"col":16,"offset":3338},"end":{"line":94,"col":36,"offset":3358}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":94,"col":5,"offset":3327},"end":{"line":94,"col":13,"offset":3335}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":102,"col":22,"offset":3652},"end":{"line":102,"col":63,"offset":3693}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":104,"col":21,"offset":3776},"end":{"line":104,"col":64,"offset":3819},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":93,"col":20,"offset":3318},"end":{"line":93,"col":24,"offset":3322},"abstract_content":"json"},"$LOG":{"start":{"line":104,"col":13,"offset":3768},"end":{"line":104,"col":20,"offset":3775},"abstract_content":"warning"},"$SINK":{"start":{"line":104,"col":21,"offset":3776},"end":{"line":104,"col":64,"offset":3819},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a06f2946c5b15aab68d6f9552ba739d4f15fe5de69c099d302bc131e4510505ea77b4c6a412af06cb9a3f07fd06fcb43104466a43edff568c0ae1ca3375cc79d_0","lines":"    logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":94,"col":16,"offset":3338},"end":{"line":94,"col":36,"offset":3358}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":94,"col":5,"offset":3327},"end":{"line":94,"col":13,"offset":3335}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":104,"col":21,"offset":3776},"end":{"line":104,"col":64,"offset":3819}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":143,"col":22,"offset":5118},"end":{"line":143,"col":61,"offset":5157},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":131,"col":20,"offset":4793},"end":{"line":131,"col":24,"offset":4797},"abstract_content":"json"},"$LOG":{"start":{"line":143,"col":17,"offset":5113},"end":{"line":143,"col":21,"offset":5117},"abstract_content":"info"},"$SINK":{"start":{"line":143,"col":22,"offset":5118},"end":{"line":143,"col":61,"offset":5157},"abstract_content":"f\"User {username} updated successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c2eaf3f0397a1c48dc18beb8760b9ee521b690293f526f5154529ab615d08217be57028f75fcb4caacf6495d41532b57a9e984b2a3c6c771f113e794a52fcac5_0","lines":"        logging.info(f\"User {username} updated successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":132,"col":16,"offset":4813},"end":{"line":132,"col":36,"offset":4833}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":132,"col":5,"offset":4802},"end":{"line":132,"col":13,"offset":4810}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":143,"col":22,"offset":5118},"end":{"line":143,"col":61,"offset":5157}},"f\"User {username} updated successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":163,"col":22,"offset":5766},"end":{"line":163,"col":61,"offset":5805},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":153,"col":20,"offset":5500},"end":{"line":153,"col":24,"offset":5504},"abstract_content":"json"},"$LOG":{"start":{"line":163,"col":17,"offset":5761},"end":{"line":163,"col":21,"offset":5765},"abstract_content":"info"},"$SINK":{"start":{"line":163,"col":22,"offset":5766},"end":{"line":163,"col":61,"offset":5805},"abstract_content":"f\"User {username} deleted successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"84e82c8028f76413110f3d446b0f30647892bc33f1398b6d081ce6f8d9f58a142e3df4db2c867006c982dc48efcbe724365085be843dd2f409272adbad0f0e22_0","lines":"        logging.info(f\"User {username} deleted successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":154,"col":16,"offset":5520},"end":{"line":154,"col":36,"offset":5540}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":154,"col":5,"offset":5509},"end":{"line":154,"col":13,"offset":5517}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":163,"col":22,"offset":5766},"end":{"line":163,"col":61,"offset":5805}},"f\"User {username} deleted successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":187,"col":5,"offset":6623},"end":{"line":187,"col":24,"offset":6642},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ebf7ccf834213d737280746c78f99ff9792a36a4f46ca8868024d05bf64b123d0ea87d269c661c091c8856d499d0e76be058c9d70d0a4628b2f17e59e10a6216_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-319/sample_21_original.py","start":{"line":187,"col":5,"offset":6623},"end":{"line":187,"col":24,"offset":6642},"extra":{"metavars":{"$APP":{"start":{"line":187,"col":5,"offset":6623},"end":{"line":187,"col":8,"offset":6626},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":318},"svalue_end":{"line":11,"col":22,"offset":333},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"5fe7a270623227ba61da0fdc3b887c3bc8ed044937c0f2386758c1ab7f7a4c9d5ccc6c24115ed35021a1193b78a21b98526f7c55dac76c4ea373bf264f44ae5c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_22_original.py","start":{"line":79,"col":74,"offset":2720},"end":{"line":79,"col":79,"offset":2725},"extra":{"metavars":{"$VAL":{"start":{"line":79,"col":74,"offset":2720},"end":{"line":79,"col":79,"offset":2725},"abstract_content":"False"}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2d64edbbb46d5f79f640960cabea42bb7833c2745e1ce8f18d3eee805c9de10f00fc94cf8e9b392d0e87c489e85cb9d00a8dfb7f98686f11ef7b2825108417f0_0","lines":"        self.security = distributed.security.Security(require_encryption=False)  # Vulnerable","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_23_original.py","start":{"line":21,"col":52,"offset":586},"end":{"line":21,"col":70,"offset":604},"extra":{"metavars":{"$VAL":{"start":{"line":21,"col":52,"offset":586},"end":{"line":21,"col":70,"offset":604},"abstract_content":"REQUIRE_ENCRYPTION","propagated_value":{"svalue_start":{"line":3,"col":22,"offset":73},"svalue_end":{"line":3,"col":27,"offset":78},"svalue_abstract_content":"False"}}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"75405d9c767b8db83182755f5b73333fcddcc6899921cad7b50eb7a346e8bcfbabc7f2386647134895a215156ff6b274639f85320d0dc2556463008a8048fb03_0","lines":"            security = Security(require_encryption=REQUIRE_ENCRYPTION)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-319/sample_23_original.py","start":{"line":65,"col":1,"offset":2069},"end":{"line":105,"col":76,"offset":3484},"extra":{"metavars":{"$R":{"start":{"line":66,"col":5,"offset":2086},"end":{"line":66,"col":15,"offset":2096},"abstract_content":"start_dask"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"65ac99d7da5c8fa4d07506a2d2e6798a756f60d9a0260192101011170bdeb4d8c4ea50996825f2bed96e5ca0ed4216964c9cf43b0656249ce21f25eb3045d1ab_0","lines":"@csrf_exempt\ndef start_dask(request):\n    if request.method != 'POST':\n        return JsonResponse({\"error\": \"Only POST requests are allowed\"}, status=405)\n\n    try:\n        data = json.loads(request.body)\n        input_data = data.get('data', [])\n\n        try:\n            validate_input(input_data)\n        except ValueError as ve:\n            return JsonResponse({\"error\": str(ve)}, status=400)\n\n        client = init_dask_client()\n        if client is None:\n            return JsonResponse({\"error\": \"Failed to initialize Dask client\"}, status=500)\n\n        try:\n            future = client.submit(complex_calculation, input_data)\n            result = future.result()\n\n            squared_future = client.submit(square_result, result)\n            cubed_future = client.submit(cube_result, result)\n\n            squared_result = squared_future.result()\n            cubed_result = cubed_future.result()\n\n            return JsonResponse({\n                \"original_result\": result,\n                \"squared_result\": squared_result,\n                \"cubed_result\": cubed_result\n            })\n        finally:\n            client.close()\n\n    except json.JSONDecodeError:\n        return JsonResponse({\"error\": \"Invalid JSON in request body\"}, status=400)\n    except Exception as e:\n        logger.error(f\"Error in start_dask view: {str(e)}\")\n        return JsonResponse({\"error\": \"Internal server error\"}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_24_original.py","start":{"line":91,"col":44,"offset":3011},"end":{"line":91,"col":49,"offset":3016},"extra":{"metavars":{"$VAL":{"start":{"line":91,"col":44,"offset":3011},"end":{"line":91,"col":49,"offset":3016},"abstract_content":"False"}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"16263b80e80ad23feca71fd526b859c7575fb3f1e76121a09733dfb08bd7be6b3fe6444b4b741f6732fc522e37557fc070f09fced01e4248aa382ccb0ebe50d5_0","lines":"    security = Security(require_encryption=False)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":13,"col":13,"offset":307},"end":{"line":13,"col":65,"offset":359},"extra":{"metavars":{},"message":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","shortlink":"https://sg.run/N4Np","semgrep.dev":{"rule":{"origin":"community","r_id":9671,"rule_id":"v8UnWQ","rule_name":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","rv_id":946371,"url":"https://semgrep.dev/playground/r/5PT9O13/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","version_id":"5PT9O13"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"dc0c35109968eece94ea9b13cba6542e0d624cce84e3a0b4af377559593c0eb561fde7a074c20b00e3fdaa846c336499e4790f5e15836b74ac3c5d9849d50a61_0","lines":"http_pool = ur3.connectionpool.HTTPConnectionPool(\"example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":76,"col":22,"offset":2199},"end":{"line":76,"col":52,"offset":2229},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":64,"col":20,"offset":1787},"end":{"line":64,"col":24,"offset":1791},"abstract_content":"json"},"$LOG":{"start":{"line":76,"col":17,"offset":2194},"end":{"line":76,"col":21,"offset":2198},"abstract_content":"info"},"$SINK":{"start":{"line":76,"col":22,"offset":2199},"end":{"line":76,"col":52,"offset":2229},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0cffee6592e7fe780d1450c849d94a58c2846764348484c38f53b6cda9166d6d2bc8091c15cd6b88ebb0bb90e83395b70e877ceed337b713239bc52532e0e991_0","lines":"        logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":65,"col":16,"offset":1807},"end":{"line":65,"col":36,"offset":1827}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":65,"col":5,"offset":1796},"end":{"line":65,"col":13,"offset":1804}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":76,"col":22,"offset":2199},"end":{"line":76,"col":52,"offset":2229}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":97,"col":22,"offset":3038},"end":{"line":97,"col":51,"offset":3067},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":86,"col":20,"offset":2645},"end":{"line":86,"col":24,"offset":2649},"abstract_content":"json"},"$LOG":{"start":{"line":97,"col":17,"offset":3033},"end":{"line":97,"col":21,"offset":3037},"abstract_content":"info"},"$SINK":{"start":{"line":97,"col":22,"offset":3038},"end":{"line":97,"col":51,"offset":3067},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"222c8356e169952f7121b02cad7f10eedc3d7c3881544d1eb5cb2518db0e0e912b276bde82bf1904bd40d9a6c1eb2eb426240430493ab97849a975885e6d93f3_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":87,"col":16,"offset":2665},"end":{"line":87,"col":36,"offset":2685}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":87,"col":5,"offset":2654},"end":{"line":87,"col":13,"offset":2662}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":97,"col":22,"offset":3038},"end":{"line":97,"col":51,"offset":3067}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":184,"col":5,"offset":5853},"end":{"line":184,"col":24,"offset":5872},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4356d7559a7a86c651a01fc192cbc7f83a291db0fdac21a17cf36161ac036402655cb7bb98eb12e9250cdf2b83bd49bb54470c1f2a3c33c83ea6cebb9e51bc6e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-319/sample_25_original.py","start":{"line":184,"col":5,"offset":5853},"end":{"line":184,"col":24,"offset":5872},"extra":{"metavars":{"$APP":{"start":{"line":184,"col":5,"offset":5853},"end":{"line":184,"col":8,"offset":5856},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":157},"svalue_end":{"line":9,"col":22,"offset":172},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"d17984afdf0e5798a508cc61d4f43fa86c42de2749e0868c03dbde91a871b333ad6b3ce6391c0dadb58167ae9f8cda4eaabd7e73ff0a14df3d560023c07e38b2_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","path":"vulnerability_samples/CWE-319/sample_26_original.py","start":{"line":23,"col":17,"offset":628},"end":{"line":23,"col":69,"offset":680},"extra":{"metavars":{},"message":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","shortlink":"https://sg.run/N4Np","semgrep.dev":{"rule":{"origin":"community","r_id":9671,"rule_id":"v8UnWQ","rule_name":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","rv_id":946371,"url":"https://semgrep.dev/playground/r/5PT9O13/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","version_id":"5PT9O13"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9344918ea16016e146e8d10c8769f38d055cc69c9ee4d21ce38980c097765c60639415dcf6d6c090a09f1fa04ced56969ceaf20e9e9226a5999b86b082332fdd_0","lines":"    http_pool = ur3.connectionpool.HTTPConnectionPool(\"example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","path":"vulnerability_samples/CWE-319/sample_26_original.py","start":{"line":107,"col":17,"offset":4224},"end":{"line":107,"col":73,"offset":4280},"extra":{"metavars":{},"message":"Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool"],"category":"security","technology":["python"],"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","shortlink":"https://sg.run/N4Np","semgrep.dev":{"rule":{"origin":"community","r_id":9671,"rule_id":"v8UnWQ","rule_name":"python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","rv_id":946371,"url":"https://semgrep.dev/playground/r/5PT9O13/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","version_id":"5PT9O13"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9344918ea16016e146e8d10c8769f38d055cc69c9ee4d21ce38980c097765c60639415dcf6d6c090a09f1fa04ced56969ceaf20e9e9226a5999b86b082332fdd_1","lines":"    http_pool = ur3.connectionpool.HTTPConnectionPool(\"api.example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","path":"vulnerability_samples/CWE-319/sample_27_original.py","start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048},"extra":{"metavars":{"$SESSION":{"start":{"line":70,"col":24,"offset":2016},"end":{"line":70,"col":31,"offset":2023},"abstract_content":"session","propagated_value":{"svalue_start":{"line":69,"col":14,"offset":1962},"svalue_end":{"line":69,"col":32,"offset":1980},"svalue_abstract_content":"requests.Session()"}},"$W":{"start":{"line":70,"col":32,"offset":2024},"end":{"line":70,"col":35,"offset":2027},"abstract_content":"get"},"$SINK":{"start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048},"abstract_content":"\"http://example.com\""},"$URL":{"start":{"line":70,"col":37,"offset":2029},"end":{"line":70,"col":55,"offset":2047},"abstract_content":"http://example.com"}},"message":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.2.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","shortlink":"https://sg.run/Bk5W","semgrep.dev":{"rule":{"origin":"community","r_id":9651,"rule_id":"lBU9BZ","rule_name":"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","rv_id":946348,"url":"https://semgrep.dev/playground/r/ExTg2W9/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","version_id":"ExTg2W9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e6dba117de2c351eeaf60a30faee9b78c116e5684458a14ccd12b4336fa63f5c1f748d526787284eae66c3cdd8e38e271e5302e4330530729894a1f0af878a5b_0","lines":"            response = session.get(\"http://example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_27_original.py","start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048}},"\"http://example.com\""]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_27_original.py","start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048}},"\"http://example.com\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","path":"vulnerability_samples/CWE-319/sample_27_original.py","start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048},"extra":{"metavars":{"$W":{"start":{"line":70,"col":32,"offset":2024},"end":{"line":70,"col":35,"offset":2027},"abstract_content":"get"},"$SINK":{"start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048},"abstract_content":"\"http://example.com\""},"$URL":{"start":{"line":70,"col":37,"offset":2029},"end":{"line":70,"col":55,"offset":2047},"abstract_content":"http://example.com"}},"message":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.1.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","shortlink":"https://sg.run/DoBY","semgrep.dev":{"rule":{"origin":"community","r_id":9652,"rule_id":"YGURXw","rule_name":"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","rv_id":946349,"url":"https://semgrep.dev/playground/r/7ZTrQRO/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","version_id":"7ZTrQRO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a187c1610a9dfb9b5e61682b213687c1b43a3c78ac7b35494b4e0a22b508738f9606e4ba87e935f460e3339e2c6c65f2381b0eba58c43feb37545081ac0b7c5d_0","lines":"            response = session.get(\"http://example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_27_original.py","start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048}},"\"http://example.com\""]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_27_original.py","start":{"line":70,"col":36,"offset":2028},"end":{"line":70,"col":56,"offset":2048}},"\"http://example.com\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":53,"col":17,"offset":1700},"end":{"line":53,"col":52,"offset":1735},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":17,"col":10,"offset":408},"end":{"line":17,"col":37,"offset":435},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":51,"col":2,"offset":1603},"end":{"line":51,"col":5,"offset":1606},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":51,"col":6,"offset":1607},"end":{"line":51,"col":9,"offset":1610},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":51,"col":11,"offset":1612},"end":{"line":51,"col":17,"offset":1618},"abstract_content":"/fetch"},"$FUNC":{"start":{"line":52,"col":5,"offset":1625},"end":{"line":52,"col":15,"offset":1635},"abstract_content":"fetch_data"},"$PARAM":{"start":{"line":52,"col":16,"offset":1636},"end":{"line":52,"col":24,"offset":1644},"abstract_content":"username"},"$LOG":{"start":{"line":53,"col":12,"offset":1695},"end":{"line":53,"col":16,"offset":1699},"abstract_content":"info"},"$SINK":{"start":{"line":53,"col":17,"offset":1700},"end":{"line":53,"col":52,"offset":1735},"abstract_content":"f\"User {username} is fetching data\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"38c7add97e814064111e240bc68f4ab2db0e12d869ab1e68df08a768287b918e5e8726e6ac5014f54e5f15e2484f12b48659b38dab0086a132d8d5ae435009b7_0","lines":"    logger.info(f\"User {username} is fetching data\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":52,"col":16,"offset":1636},"end":{"line":52,"col":24,"offset":1644}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":52,"col":16,"offset":1636},"end":{"line":52,"col":24,"offset":1644}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":53,"col":17,"offset":1700},"end":{"line":53,"col":52,"offset":1735}},"f\"User {username} is fetching data\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867},"extra":{"metavars":{"$SESSION":{"start":{"line":56,"col":20,"offset":1835},"end":{"line":56,"col":27,"offset":1842},"abstract_content":"session","propagated_value":{"svalue_start":{"line":55,"col":10,"offset":1785},"svalue_end":{"line":55,"col":28,"offset":1803},"svalue_abstract_content":"requests.Session()"}},"$W":{"start":{"line":56,"col":28,"offset":1843},"end":{"line":56,"col":31,"offset":1846},"abstract_content":"get"},"$SINK":{"start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867},"abstract_content":"\"http://example.com\""},"$URL":{"start":{"line":56,"col":33,"offset":1848},"end":{"line":56,"col":51,"offset":1866},"abstract_content":"http://example.com"}},"message":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.2.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","shortlink":"https://sg.run/Bk5W","semgrep.dev":{"rule":{"origin":"community","r_id":9651,"rule_id":"lBU9BZ","rule_name":"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","rv_id":946348,"url":"https://semgrep.dev/playground/r/ExTg2W9/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","version_id":"ExTg2W9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c9ff671e3ca950d704a231c76e7c232883030b4a6e6159fdf10678f3d03c5ce4a25dec71a99d2e45aa467242d8b89541f7153d2dc272695fe448187e0878ce35_0","lines":"        response = session.get(\"http://example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867}},"\"http://example.com\""]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867}},"\"http://example.com\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867},"extra":{"metavars":{"$W":{"start":{"line":56,"col":28,"offset":1843},"end":{"line":56,"col":31,"offset":1846},"abstract_content":"get"},"$SINK":{"start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867},"abstract_content":"\"http://example.com\""},"$URL":{"start":{"line":56,"col":33,"offset":1848},"end":{"line":56,"col":51,"offset":1866},"abstract_content":"http://example.com"}},"message":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.1.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","shortlink":"https://sg.run/DoBY","semgrep.dev":{"rule":{"origin":"community","r_id":9652,"rule_id":"YGURXw","rule_name":"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","rv_id":946349,"url":"https://semgrep.dev/playground/r/7ZTrQRO/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","version_id":"7ZTrQRO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c302dcf2da65011ab2aae714d17fbdfca3d9f797de8c251035b298ab86b9b511c8b989e307d7cdc26275ebec8dfbc497a5b5427d8d9cb13516316d1ad4f0402d_0","lines":"        response = session.get(\"http://example.com\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867}},"\"http://example.com\""]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":56,"col":32,"offset":1847},"end":{"line":56,"col":52,"offset":1867}},"\"http://example.com\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":61,"col":5,"offset":2012},"end":{"line":61,"col":81,"offset":2088},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$O":{"start":{"line":21,"col":5,"offset":493},"end":{"line":21,"col":18,"offset":506},"abstract_content":"conn.cursor()"},"$APP":{"start":{"line":59,"col":2,"offset":1900},"end":{"line":59,"col":5,"offset":1903},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":59,"col":6,"offset":1904},"end":{"line":59,"col":9,"offset":1907},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":59,"col":11,"offset":1909},"end":{"line":59,"col":27,"offset":1925},"abstract_content":"/user/{username}"},"$FUNC":{"start":{"line":60,"col":5,"offset":1932},"end":{"line":60,"col":13,"offset":1940},"abstract_content":"get_user"},"$PARAM":{"start":{"line":60,"col":14,"offset":1941},"end":{"line":60,"col":22,"offset":1949},"abstract_content":"username"},"$SINK":{"start":{"line":61,"col":15,"offset":2022},"end":{"line":61,"col":67,"offset":2074},"abstract_content":"\"SELECT username, email FROM users WHERE username=?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via fastapi","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["fastapi","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","shortlink":"https://sg.run/8G0q7","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151040,"rule_id":"JDUNr18","rule_name":"python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","rv_id":1015012,"url":"https://semgrep.dev/playground/r/jQTzEY9/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","version_id":"jQTzEY9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"6dbaee9a96d8ba78faed2ba48bf12569539bebce8a8f958726b91d197a9352bcb086feac742bf599c76c4cbe0d43165a5b173aa3fb8fdb5865b010c0c7c12ea5_0","lines":"    c.execute(\"SELECT username, email FROM users WHERE username=?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":60,"col":14,"offset":1941},"end":{"line":60,"col":22,"offset":1949}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":60,"col":14,"offset":1941},"end":{"line":60,"col":22,"offset":1949}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":61,"col":5,"offset":2012},"end":{"line":61,"col":81,"offset":2088}},"c.execute(\"SELECT username, email FROM users WHERE username=?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":83,"col":5,"offset":3093},"end":{"line":84,"col":55,"offset":3214},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"put"},"$O":{"start":{"line":21,"col":5,"offset":493},"end":{"line":21,"col":18,"offset":506},"abstract_content":"conn.cursor()"},"$APP":{"start":{"line":80,"col":2,"offset":2893},"end":{"line":80,"col":5,"offset":2896},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":80,"col":6,"offset":2897},"end":{"line":80,"col":9,"offset":2900},"abstract_content":"put"},"$ROUTESTRING":{"start":{"line":80,"col":11,"offset":2902},"end":{"line":80,"col":27,"offset":2918},"abstract_content":"/user/{username}"},"$FUNC":{"start":{"line":81,"col":5,"offset":2925},"end":{"line":81,"col":16,"offset":2936},"abstract_content":"update_user"},"$PARAM":{"start":{"line":81,"col":17,"offset":2937},"end":{"line":81,"col":25,"offset":2945},"abstract_content":"username"},"$SINK":{"start":{"line":83,"col":15,"offset":3103},"end":{"line":83,"col":70,"offset":3158},"abstract_content":"\"UPDATE users SET password=?, email=? WHERE username=?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via fastapi","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["fastapi","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","shortlink":"https://sg.run/8G0q7","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151040,"rule_id":"JDUNr18","rule_name":"python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","rv_id":1015012,"url":"https://semgrep.dev/playground/r/jQTzEY9/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","version_id":"jQTzEY9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"74729e62c781967019c8dfba87333f23fc2ecbfff2f04481629fbb36949b61ab653cbb8e5bc6c4d7e5f7f19626a0112e89d4aed54cff41ef5c45f9abeeb7953d_0","lines":"    c.execute(\"UPDATE users SET password=?, email=? WHERE username=?\",\n              (hashed_password, user.email, username))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":81,"col":17,"offset":2937},"end":{"line":81,"col":25,"offset":2945}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":81,"col":17,"offset":2937},"end":{"line":81,"col":25,"offset":2945}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":83,"col":5,"offset":3093},"end":{"line":84,"col":55,"offset":3214}},"c.execute(\"UPDATE users SET password=?, email=? WHERE username=?\",\n              (hashed_password, user.email, username))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":93,"col":5,"offset":3555},"end":{"line":93,"col":65,"offset":3615},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"delete"},"$O":{"start":{"line":21,"col":5,"offset":493},"end":{"line":21,"col":18,"offset":506},"abstract_content":"conn.cursor()"},"$APP":{"start":{"line":91,"col":2,"offset":3437},"end":{"line":91,"col":5,"offset":3440},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":91,"col":6,"offset":3441},"end":{"line":91,"col":12,"offset":3447},"abstract_content":"delete"},"$ROUTESTRING":{"start":{"line":91,"col":14,"offset":3449},"end":{"line":91,"col":30,"offset":3465},"abstract_content":"/user/{username}"},"$FUNC":{"start":{"line":92,"col":5,"offset":3472},"end":{"line":92,"col":16,"offset":3483},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":92,"col":17,"offset":3484},"end":{"line":92,"col":25,"offset":3492},"abstract_content":"username"},"$SINK":{"start":{"line":93,"col":15,"offset":3565},"end":{"line":93,"col":51,"offset":3601},"abstract_content":"\"DELETE FROM users WHERE username=?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via fastapi","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["fastapi","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","shortlink":"https://sg.run/8G0q7","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151040,"rule_id":"JDUNr18","rule_name":"python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","rv_id":1015012,"url":"https://semgrep.dev/playground/r/jQTzEY9/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","version_id":"jQTzEY9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.fastapi.sql.prestodb.fastapi-prestodb-sqli.fastapi-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"1fe9c779b82de11a24de9b3316b247b0546a45286420cfcbfe3f198a6e54f4304f4efe5e7db2a600a716a3589f54e74b93b3b3fd2bc1a0e69687033f38fafd81_0","lines":"    c.execute(\"DELETE FROM users WHERE username=?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":92,"col":17,"offset":3484},"end":{"line":92,"col":25,"offset":3492}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":92,"col":17,"offset":3484},"end":{"line":92,"col":25,"offset":3492}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":93,"col":5,"offset":3555},"end":{"line":93,"col":65,"offset":3615}},"c.execute(\"DELETE FROM users WHERE username=?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":103,"col":32,"offset":3967},"end":{"line":103,"col":35,"offset":3970},"extra":{"metavars":{"$SESSION":{"start":{"line":103,"col":20,"offset":3955},"end":{"line":103,"col":27,"offset":3962},"abstract_content":"session","propagated_value":{"svalue_start":{"line":102,"col":10,"offset":3905},"svalue_end":{"line":102,"col":28,"offset":3923},"svalue_abstract_content":"requests.Session()"}},"$W":{"start":{"line":103,"col":28,"offset":3963},"end":{"line":103,"col":31,"offset":3966},"abstract_content":"get"},"$SINK":{"start":{"line":103,"col":32,"offset":3967},"end":{"line":103,"col":35,"offset":3970},"abstract_content":"url"},"$URL":{"start":{"line":110,"col":33,"offset":4231},"end":{"line":110,"col":60,"offset":4258},"abstract_content":"http://example.com/api/data"}},"message":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.2.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","shortlink":"https://sg.run/Bk5W","semgrep.dev":{"rule":{"origin":"community","r_id":9651,"rule_id":"lBU9BZ","rule_name":"python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","rv_id":946348,"url":"https://semgrep.dev/playground/r/ExTg2W9/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","version_id":"ExTg2W9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1c5cd1e58cf0456d3b7b92422610af90a8bd26a347b8d91f4cb104cc3c68052c2ebd8b88973eb1de24e0358435005fde2db35e41e6e8a8a67c0ab9b5a5f13a20_0","lines":"        response = session.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":110,"col":32,"offset":4230},"end":{"line":110,"col":61,"offset":4259}},"\"http://example.com/api/data\""]],"intermediate_vars":[],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":110,"col":12,"offset":4210},"end":{"line":110,"col":31,"offset":4229}},"fetch_external_data"],[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":101,"col":25,"offset":3885},"end":{"line":101,"col":28,"offset":3888}},"content":"url"}],["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":103,"col":32,"offset":3967},"end":{"line":103,"col":35,"offset":3970}},"url"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":103,"col":32,"offset":3967},"end":{"line":103,"col":35,"offset":3970},"extra":{"metavars":{"$W":{"start":{"line":103,"col":28,"offset":3963},"end":{"line":103,"col":31,"offset":3966},"abstract_content":"get"},"$SINK":{"start":{"line":103,"col":32,"offset":3967},"end":{"line":103,"col":35,"offset":3970},"abstract_content":"url"},"$URL":{"start":{"line":110,"col":33,"offset":4231},"end":{"line":110,"col":60,"offset":4258},"abstract_content":"http://example.com/api/data"}},"message":"Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.","metadata":{"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"asvs":{"control_id":"9.1.1 Weak TLS","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements","section":"V9 Communications Verification Requirements","version":"4"},"category":"security","technology":["requests"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","shortlink":"https://sg.run/DoBY","semgrep.dev":{"rule":{"origin":"community","r_id":9652,"rule_id":"YGURXw","rule_name":"python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","rv_id":946349,"url":"https://semgrep.dev/playground/r/7ZTrQRO/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","version_id":"7ZTrQRO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1e71907510cad6e68dfbe9f7c3c85035a1b68fca72cd97f29161dc8e4289e7dc389d10e683644034b1806f55b12914b2a9a5a44f3df170def565a3909fdbd2be_0","lines":"        response = session.get(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":110,"col":32,"offset":4230},"end":{"line":110,"col":61,"offset":4259}},"\"http://example.com/api/data\""]],"intermediate_vars":[],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":110,"col":12,"offset":4210},"end":{"line":110,"col":31,"offset":4229}},"fetch_external_data"],[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":101,"col":25,"offset":3885},"end":{"line":101,"col":28,"offset":3888}},"content":"url"}],["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":103,"col":32,"offset":3967},"end":{"line":103,"col":35,"offset":3970}},"url"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":108,"col":17,"offset":4111},"end":{"line":108,"col":59,"offset":4153},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":17,"col":10,"offset":408},"end":{"line":17,"col":37,"offset":435},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":106,"col":2,"offset":4003},"end":{"line":106,"col":5,"offset":4006},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":106,"col":6,"offset":4007},"end":{"line":106,"col":9,"offset":4010},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":106,"col":11,"offset":4012},"end":{"line":106,"col":23,"offset":4024},"abstract_content":"/cached-data"},"$FUNC":{"start":{"line":107,"col":5,"offset":4031},"end":{"line":107,"col":20,"offset":4046},"abstract_content":"get_cached_data"},"$PARAM":{"start":{"line":107,"col":21,"offset":4047},"end":{"line":107,"col":29,"offset":4055},"abstract_content":"username"},"$LOG":{"start":{"line":108,"col":12,"offset":4106},"end":{"line":108,"col":16,"offset":4110},"abstract_content":"info"},"$SINK":{"start":{"line":108,"col":17,"offset":4111},"end":{"line":108,"col":59,"offset":4153},"abstract_content":"f\"User {username} is fetching cached data\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b371ffccf3667db047df01c745393f8331a78534e9af5d1e096d148a9681be74b130e3aaab05a1621c54b70836b064f1673173b7ab3d3cf5fc98264a14ae8aee_0","lines":"    logger.info(f\"User {username} is fetching cached data\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":107,"col":21,"offset":4047},"end":{"line":107,"col":29,"offset":4055}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":107,"col":21,"offset":4047},"end":{"line":107,"col":29,"offset":4055}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":108,"col":17,"offset":4111},"end":{"line":108,"col":59,"offset":4153}},"f\"User {username} is fetching cached data\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":123,"col":17,"offset":4764},"end":{"line":123,"col":92,"offset":4839},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"info"},"$LOGGER":{"start":{"line":17,"col":10,"offset":408},"end":{"line":17,"col":37,"offset":435},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":118,"col":2,"offset":4559},"end":{"line":118,"col":5,"offset":4562},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$FUNC":{"start":{"line":119,"col":11,"offset":4592},"end":{"line":119,"col":23,"offset":4604},"abstract_content":"log_requests"},"$FASTAPI_REQUEST":{"start":{"line":119,"col":24,"offset":4605},"end":{"line":119,"col":31,"offset":4612},"abstract_content":"request"},"$LOG":{"start":{"line":123,"col":12,"offset":4759},"end":{"line":123,"col":16,"offset":4763},"abstract_content":"info"},"$SINK":{"start":{"line":123,"col":17,"offset":4764},"end":{"line":123,"col":92,"offset":4839},"abstract_content":"f\"Request: {request.method} {request.url.path} - Time: {process_time:.2 f}s\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4089659dc640e57368aa426c0ffcf8459d0bd570a2c5dda6ca98c11337d531bdb9b333c6d49317281dbe521fa3590687206bd8266c48b38aba039549a2537854_0","lines":"    logger.info(f\"Request: {request.method} {request.url.path} - Time: {process_time:.2f}s\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":119,"col":24,"offset":4605},"end":{"line":119,"col":31,"offset":4612}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":119,"col":24,"offset":4605},"end":{"line":119,"col":31,"offset":4612}},"content":"request"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":123,"col":17,"offset":4764},"end":{"line":123,"col":92,"offset":4839}},"f\"Request: {request.method} {request.url.path} - Time: {process_time:.2f}s\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":133,"col":17,"offset":5125},"end":{"line":133,"col":66,"offset":5174},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":17,"col":10,"offset":408},"end":{"line":17,"col":37,"offset":435},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":131,"col":2,"offset":5004},"end":{"line":131,"col":5,"offset":5007},"abstract_content":"app","propagated_value":{"svalue_start":{"line":14,"col":7,"offset":326},"svalue_end":{"line":14,"col":16,"offset":335},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":131,"col":6,"offset":5008},"end":{"line":131,"col":9,"offset":5011},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":131,"col":11,"offset":5013},"end":{"line":131,"col":29,"offset":5031},"abstract_content":"/mock-external-api"},"$FUNC":{"start":{"line":132,"col":5,"offset":5038},"end":{"line":132,"col":27,"offset":5060},"abstract_content":"get_mock_external_data"},"$PARAM":{"start":{"line":132,"col":28,"offset":5061},"end":{"line":132,"col":36,"offset":5069},"abstract_content":"username"},"$LOG":{"start":{"line":133,"col":12,"offset":5120},"end":{"line":133,"col":16,"offset":5124},"abstract_content":"info"},"$SINK":{"start":{"line":133,"col":17,"offset":5125},"end":{"line":133,"col":66,"offset":5174},"abstract_content":"f\"User {username} is fetching mock external data\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1bb2d370d5887d8c09d04f72ed75524e99bc2b38a0eaa04151d944ee0d6d7891ff92c1767d2099f68dbc6307d71569ac3e3ffefdd6b1f89e566afd22d673c63e_0","lines":"    logger.info(f\"User {username} is fetching mock external data\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":132,"col":28,"offset":5061},"end":{"line":132,"col":36,"offset":5069}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":132,"col":28,"offset":5061},"end":{"line":132,"col":36,"offset":5069}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-319/sample_28_original.py","start":{"line":133,"col":17,"offset":5125},"end":{"line":133,"col":66,"offset":5174}},"f\"User {username} is fetching mock external data\""]]},"engine_kind":"PRO"}},{"check_id":"python.distributed.security.require-encryption","path":"vulnerability_samples/CWE-319/sample_30_original.py","start":{"line":74,"col":69,"offset":2463},"end":{"line":74,"col":74,"offset":2468},"extra":{"metavars":{"$VAL":{"start":{"line":74,"col":69,"offset":2463},"end":{"line":74,"col":74,"offset":2468},"abstract_content":"False"}},"message":"Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.","fix":"True","metadata":{"cwe":["CWE-319: Cleartext Transmission of Sensitive Information"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters"],"category":"security","technology":["distributed"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.distributed.security.require-encryption","shortlink":"https://sg.run/AvQ2","semgrep.dev":{"rule":{"origin":"community","r_id":9450,"rule_id":"YGURy0","rule_name":"python.distributed.security.require-encryption","rv_id":946116,"url":"https://semgrep.dev/playground/r/BjT1Nql/python.distributed.security.require-encryption","version_id":"BjT1Nql"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.distributed.security.require-encryption","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f443bd4ab1e240faa8dbccc1025a663c78f56e626f1e1a18d5ed29ebc6d684e0445b306d02cd74f6bebf1081e121faf2575b0ce4b4559802372fcd077ade48a3_0","lines":"        security = distributed.security.Security(require_encryption=False)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","path":"vulnerability_samples/CWE-326/sample_129_original.py","start":{"line":116,"col":24,"offset":4104},"end":{"line":116,"col":109,"offset":4189},"extra":{"metavars":{},"message":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://docs.python.org/3/library/ssl.html#ssl.wrap_socket","https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"],"category":"security","technology":["python"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","shortlink":"https://sg.run/PJOY","semgrep.dev":{"rule":{"origin":"community","r_id":9645,"rule_id":"BYUN2e","rule_name":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","rv_id":946381,"url":"https://semgrep.dev/playground/r/l4Tx9Rb/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","version_id":"l4Tx9Rb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"40f461706517879e0e5a83b151eee1ef3bb7fd17e378504330e638c22f8447d7172646cbc4681f6e40d4899adc07bf98badaf6f702a4f2d4a368d71a28106f9d_0","lines":"        httpd.socket = ssl.wrap_socket(httpd.socket, certfile=cert_file, keyfile=key_file, server_side=True)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","path":"vulnerability_samples/CWE-326/sample_130_original.py","start":{"line":46,"col":12,"offset":1189},"end":{"line":46,"col":30,"offset":1207},"extra":{"metavars":{"$SIZE":{"start":{"line":46,"col":25,"offset":1202},"end":{"line":46,"col":29,"offset":1206},"abstract_content":"1024"}},"message":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py","references":["https://www.pycryptodome.org/src/public_key/rsa#rsa","https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::key-length::pycryptodome","crypto::search::key-length::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","shortlink":"https://sg.run/PprY","semgrep.dev":{"rule":{"origin":"community","r_id":9689,"rule_id":"BYUBWe","rule_name":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","rv_id":946420,"url":"https://semgrep.dev/playground/r/DkTNpjo/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","version_id":"DkTNpjo"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"7799476e3c72c5bafab790de556dcb3d4a1b88bb3489d49045f34bfafcbf5f9ed5d2ba3f6976465028ab2f636ce4503360fffb17c0e685e51752cdf86e42d761_0","lines":"    return RSA.generate(1024)  # Vulnerable: Inadequate key size","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size","path":"vulnerability_samples/CWE-326/sample_131_original.py","start":{"line":20,"col":22,"offset":670},"end":{"line":20,"col":26,"offset":674},"extra":{"metavars":{"$SIZE":{"start":{"line":20,"col":22,"offset":670},"end":{"line":20,"col":26,"offset":674},"abstract_content":"1024"}},"message":"Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.","fix":"2048","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py","references":["https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/","https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf"],"category":"security","technology":["cryptography"],"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","functional-categories":["crypto::search::key-length::cryptography"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size","shortlink":"https://sg.run/RoQq","semgrep.dev":{"rule":{"origin":"community","r_id":9449,"rule_id":"lBU9jn","rule_name":"python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size","rv_id":946114,"url":"https://semgrep.dev/playground/r/RGTAgJZ/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size","version_id":"RGTAgJZ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"58ae7e2bf59aaf2e1aed4b1e51dc755a4e35ff92cb9fa7d786f9db398b5a10878732a251b9a6d4f41382f6139ec8142df76bffdd11cb5e590db24f97a2959b62_0","lines":"            key_size=1024  # Vulnerable: Insufficient key size","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":58,"col":5,"offset":1693},"end":{"line":58,"col":86,"offset":1774},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$O":{"start":{"line":58,"col":5,"offset":1693},"end":{"line":58,"col":11,"offset":1699},"abstract_content":"cursor"},"$SINK":{"start":{"line":58,"col":20,"offset":1708},"end":{"line":58,"col":70,"offset":1758},"abstract_content":"'INSERT INTO requests (url, status) VALUES (?, ?)'"},"$PROPERTY":{"start":{"line":76,"col":23,"offset":2254},"end":{"line":76,"col":27,"offset":2258},"abstract_content":"args"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b0f1dc6d14be120612a13d00cbc242a59d53165e0639697cde2e4f573404ff8f2a4175db5eb0e8ec2302df0116932a1b9df22c58725a37541b0c1339e0147c4e_0","lines":"    cursor.execute('INSERT INTO requests (url, status) VALUES (?, ?)', (url, status))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":15,"offset":2246},"end":{"line":76,"col":75,"offset":2306}},"request.args.get('url', config.get('target', 'default_url'))"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":9,"offset":2240},"end":{"line":76,"col":12,"offset":2243}},"content":"url"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":86,"col":9,"offset":2684},"end":{"line":86,"col":20,"offset":2695}},"log_request"],[{"location":{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":51,"col":17,"offset":1428},"end":{"line":51,"col":20,"offset":1431}},"content":"url"}],["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":58,"col":5,"offset":1693},"end":{"line":58,"col":86,"offset":1774}},"cursor.execute('INSERT INTO requests (url, status) VALUES (?, ?)', (url, status))"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":58,"col":5,"offset":1693},"end":{"line":58,"col":86,"offset":1774},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$O":{"start":{"line":58,"col":5,"offset":1693},"end":{"line":58,"col":11,"offset":1699},"abstract_content":"cursor"},"$SINK":{"start":{"line":58,"col":20,"offset":1708},"end":{"line":58,"col":70,"offset":1758},"abstract_content":"'INSERT INTO requests (url, status) VALUES (?, ?)'"},"$PROPERTY":{"start":{"line":76,"col":23,"offset":2254},"end":{"line":76,"col":27,"offset":2258},"abstract_content":"args"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"963d9e0902bdd19e7794b831c45df8d61feac40c1abf0dfa24144c6aa0d226fd3e38a9be2c4fee58e679a6093037fb2d323430c4eb16c04b2bdb3a81eb96a9f7_0","lines":"    cursor.execute('INSERT INTO requests (url, status) VALUES (?, ?)', (url, status))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":15,"offset":2246},"end":{"line":76,"col":75,"offset":2306}},"request.args.get('url', config.get('target', 'default_url'))"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":9,"offset":2240},"end":{"line":76,"col":12,"offset":2243}},"content":"url"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":86,"col":9,"offset":2684},"end":{"line":86,"col":20,"offset":2695}},"log_request"],[{"location":{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":51,"col":17,"offset":1428},"end":{"line":51,"col":20,"offset":1431}},"content":"url"}],["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":58,"col":5,"offset":1693},"end":{"line":58,"col":86,"offset":1774}},"cursor.execute('INSERT INTO requests (url, status) VALUES (?, ?)', (url, status))"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":81,"col":17,"offset":2493},"end":{"line":81,"col":35,"offset":2511},"extra":{"metavars":{},"message":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://docs.python.org/3/library/ssl.html#ssl.wrap_socket","https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"],"category":"security","technology":["python"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","shortlink":"https://sg.run/PJOY","semgrep.dev":{"rule":{"origin":"community","r_id":9645,"rule_id":"BYUN2e","rule_name":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","rv_id":946381,"url":"https://semgrep.dev/playground/r/l4Tx9Rb/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","version_id":"l4Tx9Rb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a97f5b53837d7303b307733cd567e64f08776cc82012012ee7e5dc3fd7a1f85366676a93f1d94858b0dcbffdc2b8283189415b254eb85fe52baa3d15d9eea7d7_0","lines":"        ssock = ssl.wrap_socket(s)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":88,"col":22,"offset":2808},"end":{"line":88,"col":52,"offset":2838},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":76,"col":23,"offset":2254},"end":{"line":76,"col":27,"offset":2258},"abstract_content":"args"},"$LOG":{"start":{"line":88,"col":17,"offset":2803},"end":{"line":88,"col":21,"offset":2807},"abstract_content":"info"},"$SINK":{"start":{"line":88,"col":22,"offset":2808},"end":{"line":88,"col":52,"offset":2838},"abstract_content":"f\"Request to {url} successful\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"524d66ece4961cdbc6c75c950c183f9908d02f6c781d214a274fdd7074bdb00dafffe1eddbe8e29b5eb0d29307409a741cbd4865ece83de8f56f135509228a19_0","lines":"        logging.info(f\"Request to {url} successful\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":15,"offset":2246},"end":{"line":76,"col":75,"offset":2306}},"request.args.get('url', config.get('target', 'default_url'))"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":9,"offset":2240},"end":{"line":76,"col":12,"offset":2243}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":88,"col":22,"offset":2808},"end":{"line":88,"col":52,"offset":2838}},"f\"Request to {url} successful\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":94,"col":23,"offset":3126},"end":{"line":94,"col":59,"offset":3162},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":76,"col":23,"offset":2254},"end":{"line":76,"col":27,"offset":2258},"abstract_content":"args"},"$LOG":{"start":{"line":94,"col":17,"offset":3120},"end":{"line":94,"col":22,"offset":3125},"abstract_content":"error"},"$SINK":{"start":{"line":94,"col":23,"offset":3126},"end":{"line":94,"col":59,"offset":3162},"abstract_content":"f\"Request to {url} failed: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9585369312e97e8cce7bd7acbe95bf98c88c76c3fd244c6e20784e35353647469587ae39542bf1ce8c1606e05c8ab6b88d03edc350d3cb250feec0b65c823d03_0","lines":"        logging.error(f\"Request to {url} failed: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":15,"offset":2246},"end":{"line":76,"col":75,"offset":2306}},"request.args.get('url', config.get('target', 'default_url'))"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":76,"col":9,"offset":2240},"end":{"line":76,"col":12,"offset":2243}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_31_original.py","start":{"line":94,"col":23,"offset":3126},"end":{"line":94,"col":59,"offset":3162}},"f\"Request to {url} failed: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","path":"vulnerability_samples/CWE-326/sample_32_original.py","start":{"line":32,"col":13,"offset":895},"end":{"line":32,"col":65,"offset":947},"extra":{"metavars":{},"message":"'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://docs.python.org/3/library/ssl.html#ssl.wrap_socket","https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket"],"category":"security","technology":["python"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","shortlink":"https://sg.run/PJOY","semgrep.dev":{"rule":{"origin":"community","r_id":9645,"rule_id":"BYUN2e","rule_name":"python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","rv_id":946381,"url":"https://semgrep.dev/playground/r/l4Tx9Rb/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","version_id":"l4Tx9Rb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"808133040b6a379bcceb081bb5b44c73b96fc337f867334d930181097988a1217b97ac7986f56a05f59b3f1cbbc1f8c103f3392e223c7544641aba51822795cd_0","lines":"    ssock = ssl.wrap_socket(s, ssl_version=ssl.PROTOCOL_TLSv1_2)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-326/sample_32_original.py","start":{"line":52,"col":1,"offset":1776},"end":{"line":71,"col":62,"offset":2366},"extra":{"metavars":{"$R":{"start":{"line":53,"col":5,"offset":1793},"end":{"line":53,"col":9,"offset":1797},"abstract_content":"view"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"49793c4d4740e9b40cb728df78014918e509ff1b356760e18548b11865505ee8e860ec1f397778951c924740b0a04978d6b5da04ee0ab3b95df1a7a49efd7b6b_0","lines":"@csrf_exempt\ndef view(request):\n    servers = [\n        ('example.com', 443),\n        ('secure.example.org', 443),\n        ('api.example.net', 443)\n    ]\n    \n    results = []\n    for server, port in servers:\n        try:\n            result = connect_to_server(server, port)\n            results.append(f\"Data from {server}: {result}\")\n        except ServerConnectionError as e:\n            results.append(f\"Error connecting to {server}: {str(e)}\")\n    \n    if results:\n        return HttpResponse(\"<br>\".join(results))\n    else:\n        return HttpResponse(\"No data retrieved from servers\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-326/sample_32_original.py","start":{"line":69,"col":16,"offset":2260},"end":{"line":69,"col":50,"offset":2294},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1dda46971914dca4f64ce39705bbe5bc7ea1c5e963e7f1b4e49b4ee342a389fa3f1ab241b43887e234009e58738f47244f7039d36c697f497cb48e6c20fbb04b_0","lines":"        return HttpResponse(\"<br>\".join(results))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-326/sample_32_original.py","start":{"line":73,"col":1,"offset":2368},"end":{"line":90,"col":73,"offset":3261},"extra":{"metavars":{"$R":{"start":{"line":74,"col":5,"offset":2385},"end":{"line":74,"col":20,"offset":2400},"abstract_content":"get_server_data"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dc83964b5cf130d142bcc67d150ed60cfaf65f88f0c56a2628673bba5296cd11bb21fbd824f41ef070f9a8920a9c6b65d53d7e888a344a83ee5267bf4f1cbcfa_0","lines":"@csrf_exempt\ndef get_server_data(request):\n    if request.method == 'GET':\n        server_name = request.GET.get('server_name')\n        if not server_name:\n            return JsonResponse({\"error\": \"Server name is required\"}, status=400)\n        \n        try:\n            data = ServerData.objects.filter(server_name=server_name).order_by('-timestamp').first()\n            if data:\n                return JsonResponse({\"server_name\": data.server_name, \"data\": data.data, \"timestamp\": data.timestamp})\n            else:\n                return JsonResponse({\"error\": \"No data found for the specified server\"}, status=404)\n        except Exception as e:\n            logging.error(f\"Error retrieving data for {server_name}: {str(e)}\")\n            return JsonResponse({\"error\": \"Internal server error\"}, status=500)\n    else:\n        return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-326/sample_32_original.py","start":{"line":92,"col":1,"offset":3263},"end":{"line":103,"col":73,"offset":3797},"extra":{"metavars":{"$R":{"start":{"line":93,"col":5,"offset":3280},"end":{"line":93,"col":22,"offset":3297},"abstract_content":"clear_server_data"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"aa281057f0476029532dd32c723d632d970d79ddbe2fb0af182191424e743a09495a9db6f10e39ec2a4107aab1165aa35a03efe966259bcc1fce1a66f57e87b6_0","lines":"@csrf_exempt\ndef clear_server_data(request):\n    if request.method == 'POST':\n        try:\n            ServerData.objects.all().delete()\n            logging.info(\"All server data cleared\")\n            return JsonResponse({\"message\": \"All server data cleared successfully\"})\n        except Exception as e:\n            logging.error(f\"Error clearing server data: {str(e)}\")\n            return JsonResponse({\"error\": \"Internal server error\"}, status=500)\n    else:\n        return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-326/sample_32_original.py","start":{"line":105,"col":1,"offset":3799},"end":{"line":125,"col":73,"offset":4799},"extra":{"metavars":{"$R":{"start":{"line":106,"col":5,"offset":3816},"end":{"line":106,"col":20,"offset":3831},"abstract_content":"add_server_data"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2b4bcad0cc23ad30f7ecdc10b4c221e9307e1916dab79562b2ce3ce995eeede8144f62cf57196df8770e66ef59c1795b9f01503488e612a640b72ba564272fc4_0","lines":"@csrf_exempt\ndef add_server_data(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            server_name = data.get('server_name')\n            server_data = data.get('data')\n            \n            if not server_name or not server_data:\n                return JsonResponse({\"error\": \"Server name and data are required\"}, status=400)\n            \n            ServerData.objects.create(server_name=server_name, data=server_data)\n            logging.info(f\"Added new data for server: {server_name}\")\n            return JsonResponse({\"message\": \"Server data added successfully\"})\n        except json.JSONDecodeError:\n            return JsonResponse({\"error\": \"Invalid JSON data\"}, status=400)\n        except Exception as e:\n            logging.error(f\"Error adding server data: {str(e)}\")\n            return JsonResponse({\"error\": \"Internal server error\"}, status=500)\n    else:\n        return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":53,"col":22,"offset":1657},"end":{"line":53,"col":52,"offset":1687},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":42,"col":20,"offset":1217},"end":{"line":42,"col":24,"offset":1221},"abstract_content":"json"},"$LOG":{"start":{"line":53,"col":17,"offset":1652},"end":{"line":53,"col":21,"offset":1656},"abstract_content":"info"},"$SINK":{"start":{"line":53,"col":22,"offset":1657},"end":{"line":53,"col":52,"offset":1687},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e6f978c4779c4a6568f90a144edd79def56adee3c8877c0bea778cab127e603d66c9dbabde097372ba94f7e9d8e47950b515a401220b323a98577bc9558ef16c_0","lines":"        logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":43,"col":16,"offset":1237},"end":{"line":43,"col":36,"offset":1257}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":43,"col":5,"offset":1226},"end":{"line":43,"col":13,"offset":1234}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":53,"col":22,"offset":1657},"end":{"line":53,"col":52,"offset":1687}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":71,"col":22,"offset":2315},"end":{"line":71,"col":51,"offset":2344},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":62,"col":20,"offset":1969},"end":{"line":62,"col":24,"offset":1973},"abstract_content":"json"},"$LOG":{"start":{"line":71,"col":17,"offset":2310},"end":{"line":71,"col":21,"offset":2314},"abstract_content":"info"},"$SINK":{"start":{"line":71,"col":22,"offset":2315},"end":{"line":71,"col":51,"offset":2344},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"60f8b6c69c2bb519d66c05c55fa744603c2c30604d91e2cf602cd1fd12430bb3e110d31653adb8d43bafa97d38e4c39650b1a7a9804aa003c3d2a45d6c6e2157_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":63,"col":16,"offset":1989},"end":{"line":63,"col":36,"offset":2009}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":63,"col":5,"offset":1978},"end":{"line":63,"col":13,"offset":1986}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":71,"col":22,"offset":2315},"end":{"line":71,"col":51,"offset":2344}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":89,"col":11,"offset":2877},"end":{"line":89,"col":29,"offset":2895},"extra":{"metavars":{"$SIZE":{"start":{"line":89,"col":24,"offset":2890},"end":{"line":89,"col":28,"offset":2894},"abstract_content":"1024"}},"message":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py","references":["https://www.pycryptodome.org/src/public_key/rsa#rsa","https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::key-length::pycryptodome","crypto::search::key-length::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","shortlink":"https://sg.run/PprY","semgrep.dev":{"rule":{"origin":"community","r_id":9689,"rule_id":"BYUBWe","rule_name":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","rv_id":946420,"url":"https://semgrep.dev/playground/r/DkTNpjo/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","version_id":"DkTNpjo"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"2fdcd0c15c76dfd8856873db1d270f0c3bb3ff394db5332ced0458c6d09462ce8550f3824ef733fef4391b1102e474697836532a40cd354c2f48f86ffe7c4c09_0","lines":"    key = RSA.generate(1024)  # Vulnerable: Using 1024-bit key","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":119,"col":18,"offset":4141},"end":{"line":119,"col":84,"offset":4207},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":112,"col":2,"offset":3840},"end":{"line":112,"col":5,"offset":3843},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":301},"svalue_end":{"line":11,"col":22,"offset":316},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":112,"col":6,"offset":3844},"end":{"line":112,"col":11,"offset":3849},"abstract_content":"route"},"$FUNC":{"start":{"line":114,"col":5,"offset":3926},"end":{"line":114,"col":19,"offset":3940},"abstract_content":"delete_message"},"$PARAM":{"start":{"line":114,"col":20,"offset":3941},"end":{"line":114,"col":30,"offset":3951},"abstract_content":"message_id"},"$LOG":{"start":{"line":119,"col":13,"offset":4136},"end":{"line":119,"col":17,"offset":4140},"abstract_content":"info"},"$SINK":{"start":{"line":119,"col":18,"offset":4141},"end":{"line":119,"col":84,"offset":4207},"abstract_content":"f\"Message deleted: {message_id} for user_id: {session['user_id']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ed5991697811dc6f1f6b23efc1cddbaa800c0c33af0c8b0f41af9b651510cc1bd54ff2c2699cf31be7a4ef6d680b9b98d80dd94a864329dbcfa3e182816d1877_0","lines":"    logging.info(f\"Message deleted: {message_id} for user_id: {session['user_id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":114,"col":20,"offset":3941},"end":{"line":114,"col":30,"offset":3951}},"message_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":114,"col":20,"offset":3941},"end":{"line":114,"col":30,"offset":3951}},"content":"message_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":119,"col":18,"offset":4141},"end":{"line":119,"col":84,"offset":4207}},"f\"Message deleted: {message_id} for user_id: {session['user_id']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":169,"col":5,"offset":6134},"end":{"line":169,"col":24,"offset":6153},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1ebb3b85f4b2572d291e10e09c842f07fca308be1734745c14de87d5a8761b684cf410c1420d07956f46ff7d92fd346e883e09bec80a49be17716890fd58846d_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-326/sample_34_original.py","start":{"line":169,"col":5,"offset":6134},"end":{"line":169,"col":24,"offset":6153},"extra":{"metavars":{"$APP":{"start":{"line":169,"col":5,"offset":6134},"end":{"line":169,"col":8,"offset":6137},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":301},"svalue_end":{"line":11,"col":22,"offset":316},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"e1bcd47b0176364fbb710c22d1320833e620f60e4b5108431e8f6508950420e7ef4f9a39975e53396f249aa35f0cb52fac9da3e3c243696711c52d83133957ee_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","path":"vulnerability_samples/CWE-326/sample_37_original.py","start":{"line":24,"col":24,"offset":643},"end":{"line":24,"col":42,"offset":661},"extra":{"metavars":{"$SIZE":{"start":{"line":24,"col":37,"offset":656},"end":{"line":24,"col":41,"offset":660},"abstract_content":"1024"}},"message":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py","references":["https://www.pycryptodome.org/src/public_key/rsa#rsa","https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::key-length::pycryptodome","crypto::search::key-length::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","shortlink":"https://sg.run/PprY","semgrep.dev":{"rule":{"origin":"community","r_id":9689,"rule_id":"BYUBWe","rule_name":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","rv_id":946420,"url":"https://semgrep.dev/playground/r/DkTNpjo/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","version_id":"DkTNpjo"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"31b87e992f0f021e98b0fe09fd72cd1e03d4359c6aa5f151df6e96b29b234cf827cfa802345ff7c848b3673d02402dc91b288772de57db4db432eb8ddea0aad4_0","lines":"        self.rsa_key = RSA.generate(1024)  # Vulnerable: Inadequate key size","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","path":"vulnerability_samples/CWE-326/sample_38_original.py","start":{"line":56,"col":24,"offset":1758},"end":{"line":56,"col":42,"offset":1776},"extra":{"metavars":{"$SIZE":{"start":{"line":56,"col":37,"offset":1771},"end":{"line":56,"col":41,"offset":1775},"abstract_content":"1536"}},"message":"Detected an insufficient key size for RSA. NIST recommends a key size of 3072 or higher.","metadata":{"cwe":["CWE-326: Inadequate Encryption Strength"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py","references":["https://www.pycryptodome.org/src/public_key/rsa#rsa","https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::key-length::pycryptodome","crypto::search::key-length::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","shortlink":"https://sg.run/PprY","semgrep.dev":{"rule":{"origin":"community","r_id":9689,"rule_id":"BYUBWe","rule_name":"python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","rv_id":946420,"url":"https://semgrep.dev/playground/r/DkTNpjo/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","version_id":"DkTNpjo"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"899f47c5e9a8f3b0d9bd7359c817651ac46a4697b8edc02d4a9cdf325032ff07c3b41bd94cf0daac628a731b3e1fbc025ae3d7182f52ffae0c65767973c1d9fc_0","lines":"        self.rsa_key = RSA.generate(1536)  # Vulnerable: Inadequate key size","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":54,"offset":991},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":52,"offset":989},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"95f44c585b9dec25b8c79b1e50cbcf246a80bf70d9362700ecc4eec3429763d71670a6069011a7937a4f1ad750c23410b9395bd667d7382c17a87d28067bf1c2_0","lines":"    return hashlib.md5(password.encode()).hexdigest()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":23,"offset":960}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":54,"offset":991}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":48,"col":23,"offset":1635},"end":{"line":48,"col":46,"offset":1658},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":14,"offset":13},"abstract_content":"hash_password"},"$FUNCTION":{"start":{"line":48,"col":23,"offset":1635},"end":{"line":48,"col":36,"offset":1648},"abstract_content":"hash_password"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9d75fc64e31c9b39b31f5463962ee30a903ac371f0ec9d60f90cdb4f85893c3c2b163f232873e9917207887168171479ff0972d2bfed4ab158233c2c2f0d47b1_0","lines":"    hashed_password = hash_password(password)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliCall",[[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":48,"col":23,"offset":1635},"end":{"line":48,"col":36,"offset":1648}},"hash_password"],[],["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":23,"offset":960}},"hashlib.md5"]]]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":48,"col":23,"offset":1635},"end":{"line":48,"col":46,"offset":1658}},"hash_password(password)"]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":57,"col":17,"offset":1947},"end":{"line":57,"col":51,"offset":1981},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":17,"col":10,"offset":558},"end":{"line":17,"col":37,"offset":585},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":42,"col":28,"offset":1440},"end":{"line":42,"col":32,"offset":1444},"abstract_content":"json"},"$LOG":{"start":{"line":57,"col":12,"offset":1942},"end":{"line":57,"col":16,"offset":1946},"abstract_content":"info"},"$SINK":{"start":{"line":57,"col":17,"offset":1947},"end":{"line":57,"col":51,"offset":1981},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0ee6ff7c998258f10b7f4d96fc225c5603d0541ee815cf580369b7fa96f8d745a4b74c1169755e7ac9d71e7bb7da3b3ca6fef645e84d5570ac5682a565b19cfe_0","lines":"    logger.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":42,"col":20,"offset":1432},"end":{"line":42,"col":44,"offset":1456}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":42,"col":9,"offset":1421},"end":{"line":42,"col":17,"offset":1429}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":57,"col":17,"offset":1947},"end":{"line":57,"col":51,"offset":1981}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":69,"col":39,"offset":2378},"end":{"line":69,"col":62,"offset":2401},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":14,"offset":13},"abstract_content":"hash_password"},"$FUNCTION":{"start":{"line":69,"col":39,"offset":2378},"end":{"line":69,"col":52,"offset":2391},"abstract_content":"hash_password"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9d75fc64e31c9b39b31f5463962ee30a903ac371f0ec9d60f90cdb4f85893c3c2b163f232873e9917207887168171479ff0972d2bfed4ab158233c2c2f0d47b1_1","lines":"    if user and user.password_hash == hash_password(password):","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliCall",[[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":69,"col":39,"offset":2378},"end":{"line":69,"col":52,"offset":2391}},"hash_password"],[],["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":23,"offset":960}},"hashlib.md5"]]]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":69,"col":39,"offset":2378},"end":{"line":69,"col":62,"offset":2401}},"hash_password(password)"]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":70,"col":21,"offset":2423},"end":{"line":70,"col":50,"offset":2452},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":17,"col":10,"offset":558},"end":{"line":17,"col":37,"offset":585},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":63,"col":28,"offset":2141},"end":{"line":63,"col":32,"offset":2145},"abstract_content":"json"},"$LOG":{"start":{"line":70,"col":16,"offset":2418},"end":{"line":70,"col":20,"offset":2422},"abstract_content":"info"},"$SINK":{"start":{"line":70,"col":21,"offset":2423},"end":{"line":70,"col":50,"offset":2452},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c21b6001fdbf929d83f7bf8318b89edd664c5e90fad5b23a94ff48f6886bff3ae3db50bbc25d91097a7a40f625d2aae886afa60f0b176be2d65ef787e6630347_0","lines":"        logger.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":63,"col":20,"offset":2133},"end":{"line":63,"col":44,"offset":2157}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":63,"col":9,"offset":2122},"end":{"line":63,"col":17,"offset":2130}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":70,"col":21,"offset":2423},"end":{"line":70,"col":50,"offset":2452}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":95,"col":25,"offset":3203},"end":{"line":95,"col":64,"offset":3242},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":17,"col":10,"offset":558},"end":{"line":17,"col":37,"offset":585},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":77,"col":28,"offset":2660},"end":{"line":77,"col":32,"offset":2664},"abstract_content":"json"},"$LOG":{"start":{"line":95,"col":20,"offset":3198},"end":{"line":95,"col":24,"offset":3202},"abstract_content":"info"},"$SINK":{"start":{"line":95,"col":25,"offset":3203},"end":{"line":95,"col":64,"offset":3242},"abstract_content":"f\"Profile updated for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3fc82e379b1e72289626cd263186573a885a52c56b1d630af56779fde140b98f48023f8986c2a674e9f98d7fcad7d18f7bdd13ae47043843390604d2fe5ce2f4_0","lines":"            logger.info(f\"Profile updated for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":77,"col":20,"offset":2652},"end":{"line":77,"col":44,"offset":2676}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":77,"col":9,"offset":2641},"end":{"line":77,"col":17,"offset":2649}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":95,"col":25,"offset":3203},"end":{"line":95,"col":64,"offset":3242}},"f\"Profile updated for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":109,"col":26,"offset":3709},"end":{"line":109,"col":53,"offset":3736},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":14,"offset":13},"abstract_content":"hash_password"},"$FUNCTION":{"start":{"line":109,"col":26,"offset":3709},"end":{"line":109,"col":39,"offset":3722},"abstract_content":"hash_password"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9d75fc64e31c9b39b31f5463962ee30a903ac371f0ec9d60f90cdb4f85893c3c2b163f232873e9917207887168171479ff0972d2bfed4ab158233c2c2f0d47b1_2","lines":"    user.password_hash = hash_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliCall",[[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":109,"col":26,"offset":3709},"end":{"line":109,"col":39,"offset":3722}},"hash_password"],[],["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":23,"offset":960}},"hashlib.md5"]]]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":109,"col":26,"offset":3709},"end":{"line":109,"col":53,"offset":3736}},"hash_password(new_password)"]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":111,"col":17,"offset":3777},"end":{"line":111,"col":55,"offset":3815},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":17,"col":10,"offset":558},"end":{"line":17,"col":37,"offset":585},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":101,"col":28,"offset":3424},"end":{"line":101,"col":32,"offset":3428},"abstract_content":"json"},"$LOG":{"start":{"line":111,"col":12,"offset":3772},"end":{"line":111,"col":16,"offset":3776},"abstract_content":"info"},"$SINK":{"start":{"line":111,"col":17,"offset":3777},"end":{"line":111,"col":55,"offset":3815},"abstract_content":"f\"Password reset for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"cb58aa591d131cb305e3c000d854e2f6f8bfd43f1e119cb7048a43ceaf20f687d388c0e9d47180015c96337e6ab929aaf67992c7ea0be2027d4dca6bd47a7fcc_0","lines":"    logger.info(f\"Password reset for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":101,"col":20,"offset":3416},"end":{"line":101,"col":44,"offset":3440}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":101,"col":9,"offset":3405},"end":{"line":101,"col":17,"offset":3413}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":111,"col":17,"offset":3777},"end":{"line":111,"col":55,"offset":3815}},"f\"Password reset for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":134,"col":17,"offset":4510},"end":{"line":134,"col":44,"offset":4537},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":17,"col":10,"offset":558},"end":{"line":17,"col":37,"offset":585},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":125,"col":28,"offset":4241},"end":{"line":125,"col":32,"offset":4245},"abstract_content":"json"},"$LOG":{"start":{"line":134,"col":12,"offset":4505},"end":{"line":134,"col":16,"offset":4509},"abstract_content":"info"},"$SINK":{"start":{"line":134,"col":17,"offset":4510},"end":{"line":134,"col":44,"offset":4537},"abstract_content":"f\"User deleted: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"59e91cccd81d490d9cfb2172bd44dac891a2d3eb83eef507391cab8ddc4c7f4815f6d79e3cb273ae3233f83b706a580b3acd71191997d7e32c2502923a2c8588_0","lines":"    logger.info(f\"User deleted: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":125,"col":20,"offset":4233},"end":{"line":125,"col":44,"offset":4257}},"request.json['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":125,"col":9,"offset":4222},"end":{"line":125,"col":17,"offset":4230}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":134,"col":17,"offset":4510},"end":{"line":134,"col":44,"offset":4537}},"f\"User deleted: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":151,"col":23,"offset":5065},"end":{"line":151,"col":46,"offset":5088},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":14,"offset":13},"abstract_content":"hash_password"},"$FUNCTION":{"start":{"line":151,"col":23,"offset":5065},"end":{"line":151,"col":36,"offset":5078},"abstract_content":"hash_password"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9d75fc64e31c9b39b31f5463962ee30a903ac371f0ec9d60f90cdb4f85893c3c2b163f232873e9917207887168171479ff0972d2bfed4ab158233c2c2f0d47b1_3","lines":"    hashed_password = hash_password(password)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliCall",[[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":151,"col":23,"offset":5065},"end":{"line":151,"col":36,"offset":5078}},"hash_password"],[],["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":27,"col":12,"offset":949},"end":{"line":27,"col":23,"offset":960}},"hashlib.md5"]]]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":151,"col":23,"offset":5065},"end":{"line":151,"col":46,"offset":5088}},"hash_password(password)"]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":164,"col":5,"offset":5431},"end":{"line":164,"col":24,"offset":5450},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ddbf559307894db012b6fa927dd9eaecd6a8ee7d72398bf0b556d54660cb3806c7144c0a8223e45b0903fabeb30e46853d57693017d6e7b182cf4764239845b4_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-327/sample_132_original.py","start":{"line":164,"col":5,"offset":5431},"end":{"line":164,"col":24,"offset":5450},"extra":{"metavars":{"$APP":{"start":{"line":164,"col":5,"offset":5431},"end":{"line":164,"col":8,"offset":5434},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":277},"svalue_end":{"line":10,"col":22,"offset":292},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"cc3db5dd20873f4d8097fe2b5ef8eae18060d4680efc6c4682f709ef889847d3801c2353add1d3b43d8f2a4a2edc7d8ea61c56fd06cbda868a3507c34cc0dff9_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","path":"vulnerability_samples/CWE-327/sample_135_original.py","start":{"line":46,"col":22,"offset":1402},"end":{"line":46,"col":35,"offset":1415},"extra":{"metavars":{},"message":"Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.","metadata":{"source-rule-url":"https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84","cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"bandit-code":"B304","references":["https://cwe.mitre.org/data/definitions/326.html","https://www.pycryptodome.org/src/cipher/cipher"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::symmetric-algorithm::pycryptodome","crypto::search::symmetric-algorithm::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","shortlink":"https://sg.run/Eo6N","semgrep.dev":{"rule":{"origin":"community","r_id":33637,"rule_id":"ReUnEB","rule_name":"python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","rv_id":946413,"url":"https://semgrep.dev/playground/r/PkTQZy2/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","version_id":"PkTQZy2"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"37317b7758f4504bdfb77fa55146800f62f2f2b9e234c5dc51bc0c09c6424c2479d0f516c3911cd687f82bb21e355153d52dfc30d5b4e3201ec2cf457ea30350_0","lines":"            cipher = ARC4.new(key)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","path":"vulnerability_samples/CWE-327/sample_135_original.py","start":{"line":100,"col":19,"offset":3464},"end":{"line":100,"col":42,"offset":3487},"extra":{"metavars":{},"message":"Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.","metadata":{"source-rule-url":"https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84","cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"bandit-code":"B304","references":["https://cwe.mitre.org/data/definitions/326.html","https://www.pycryptodome.org/src/cipher/cipher"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::symmetric-algorithm::pycryptodome","crypto::search::symmetric-algorithm::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","shortlink":"https://sg.run/Eo6N","semgrep.dev":{"rule":{"origin":"community","r_id":33637,"rule_id":"ReUnEB","rule_name":"python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","rv_id":946413,"url":"https://semgrep.dev/playground/r/PkTQZy2/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","version_id":"PkTQZy2"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"37317b7758f4504bdfb77fa55146800f62f2f2b9e234c5dc51bc0c09c6424c2479d0f516c3911cd687f82bb21e355153d52dfc30d5b4e3201ec2cf457ea30350_1","lines":"            key = ARC4.new(encrypted_key).decrypt(encrypted_key)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","path":"vulnerability_samples/CWE-327/sample_135_original.py","start":{"line":101,"col":27,"offset":3537},"end":{"line":101,"col":40,"offset":3550},"extra":{"metavars":{},"message":"Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.","metadata":{"source-rule-url":"https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84","cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"bandit-code":"B304","references":["https://cwe.mitre.org/data/definitions/326.html","https://www.pycryptodome.org/src/cipher/cipher"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::symmetric-algorithm::pycryptodome","crypto::search::symmetric-algorithm::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","shortlink":"https://sg.run/Eo6N","semgrep.dev":{"rule":{"origin":"community","r_id":33637,"rule_id":"ReUnEB","rule_name":"python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","rv_id":946413,"url":"https://semgrep.dev/playground/r/PkTQZy2/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","version_id":"PkTQZy2"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"37317b7758f4504bdfb77fa55146800f62f2f2b9e234c5dc51bc0c09c6424c2479d0f516c3911cd687f82bb21e355153d52dfc30d5b4e3201ec2cf457ea30350_2","lines":"            self.cipher = ARC4.new(key)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_136_original.py","start":{"line":82,"col":16,"offset":3260},"end":{"line":82,"col":58,"offset":3302},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":82,"col":16,"offset":3260},"end":{"line":82,"col":56,"offset":3300},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b71d374457702e8ddf04bb336693f3998fa7901c963c717a460f221d5148126317f214155294d8a49a4c96d5b840a7db355b708e4bbf1755c383d1c3ac571107_0","lines":"        return hashlib.md5(password.encode()).hexdigest()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_136_original.py","start":{"line":82,"col":16,"offset":3260},"end":{"line":82,"col":27,"offset":3271}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_136_original.py","start":{"line":82,"col":16,"offset":3260},"end":{"line":82,"col":58,"offset":3302}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":36,"col":19,"offset":931},"end":{"line":36,"col":67,"offset":979},"extra":{"metavars":{},"message":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/","category":"security","technology":["jwt"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","shortlink":"https://sg.run/Yvp4","semgrep.dev":{"rule":{"origin":"community","r_id":9558,"rule_id":"j2UvKw","rule_name":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","rv_id":946247,"url":"https://semgrep.dev/playground/r/ExTg20L/python.jwt.security.jwt-none-alg.jwt-python-none-alg","version_id":"ExTg20L"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"cd942c579133f344990d70bf16d8fd9635d0e0806deb596e67581d1132853db448751528970f3efb22b9321e34e9d84e43b8c73e1ca2cabe04c8e88b16e683ce_0","lines":"        payload = jwt.decode(token, key=None, algorithms=[\"none\"])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":76,"col":13,"offset":2825},"end":{"line":76,"col":80,"offset":2892},"extra":{"metavars":{},"message":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/","category":"security","technology":["jwt"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","shortlink":"https://sg.run/Yvp4","semgrep.dev":{"rule":{"origin":"community","r_id":9558,"rule_id":"j2UvKw","rule_name":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","rv_id":946247,"url":"https://semgrep.dev/playground/r/ExTg20L/python.jwt.security.jwt-none-alg.jwt-python-none-alg","version_id":"ExTg20L"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"cd942c579133f344990d70bf16d8fd9635d0e0806deb596e67581d1132853db448751528970f3efb22b9321e34e9d84e43b8c73e1ca2cabe04c8e88b16e683ce_1","lines":"    token = jwt.encode({\"username\": user.username}, key=None, algorithm=\"none\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":104,"col":17,"offset":4166},"end":{"line":104,"col":44,"offset":4193},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"put"},"$LOGGER":{"start":{"line":16,"col":10,"offset":413},"end":{"line":16,"col":37,"offset":440},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":95,"col":2,"offset":3606},"end":{"line":95,"col":5,"offset":3609},"abstract_content":"app","propagated_value":{"svalue_start":{"line":12,"col":7,"offset":270},"svalue_end":{"line":12,"col":16,"offset":279},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":95,"col":6,"offset":3610},"end":{"line":95,"col":9,"offset":3613},"abstract_content":"put"},"$ROUTESTRING":{"start":{"line":95,"col":11,"offset":3615},"end":{"line":95,"col":27,"offset":3631},"abstract_content":"/user/{username}"},"$FUNC":{"start":{"line":96,"col":5,"offset":3638},"end":{"line":96,"col":16,"offset":3649},"abstract_content":"update_user"},"$PARAM":{"start":{"line":96,"col":17,"offset":3650},"end":{"line":96,"col":25,"offset":3658},"abstract_content":"username"},"$LOG":{"start":{"line":104,"col":12,"offset":4161},"end":{"line":104,"col":16,"offset":4165},"abstract_content":"info"},"$SINK":{"start":{"line":104,"col":17,"offset":4166},"end":{"line":104,"col":44,"offset":4193},"abstract_content":"f\"User updated: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"878f643aaec45b71f151a1483e202458288fcb475ec74d080fa530bbd63294b37b96dff7ed9a6a167ee84ebb9a9ab522489f474a033cbd3e9426f73a12b7c6db_0","lines":"    logger.info(f\"User updated: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":96,"col":17,"offset":3650},"end":{"line":96,"col":25,"offset":3658}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":96,"col":17,"offset":3650},"end":{"line":96,"col":25,"offset":3658}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":104,"col":17,"offset":4166},"end":{"line":104,"col":44,"offset":4193}},"f\"User updated: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":114,"col":17,"offset":4644},"end":{"line":114,"col":44,"offset":4671},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"delete"},"$LOGGER":{"start":{"line":16,"col":10,"offset":413},"end":{"line":16,"col":37,"offset":440},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":107,"col":2,"offset":4249},"end":{"line":107,"col":5,"offset":4252},"abstract_content":"app","propagated_value":{"svalue_start":{"line":12,"col":7,"offset":270},"svalue_end":{"line":12,"col":16,"offset":279},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":107,"col":6,"offset":4253},"end":{"line":107,"col":12,"offset":4259},"abstract_content":"delete"},"$ROUTESTRING":{"start":{"line":107,"col":14,"offset":4261},"end":{"line":107,"col":30,"offset":4277},"abstract_content":"/user/{username}"},"$FUNC":{"start":{"line":108,"col":5,"offset":4284},"end":{"line":108,"col":16,"offset":4295},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":108,"col":17,"offset":4296},"end":{"line":108,"col":25,"offset":4304},"abstract_content":"username"},"$LOG":{"start":{"line":114,"col":12,"offset":4639},"end":{"line":114,"col":16,"offset":4643},"abstract_content":"info"},"$SINK":{"start":{"line":114,"col":17,"offset":4644},"end":{"line":114,"col":44,"offset":4671},"abstract_content":"f\"User deleted: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"69a42d455b712156fbd1daed323cdbaf0866d17f7ff8972910c799780af38439e1f453a3d054f4e305fce3c89a5d5e3f65ae432cecb53324d2caf3f26e8c4b35_0","lines":"    logger.info(f\"User deleted: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":108,"col":17,"offset":4296},"end":{"line":108,"col":25,"offset":4304}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":108,"col":17,"offset":4296},"end":{"line":108,"col":25,"offset":4304}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_39_original.py","start":{"line":114,"col":17,"offset":4644},"end":{"line":114,"col":44,"offset":4671}},"f\"User deleted: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":35,"col":19,"offset":1023},"end":{"line":35,"col":67,"offset":1071},"extra":{"metavars":{},"message":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/","category":"security","technology":["jwt"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","shortlink":"https://sg.run/Yvp4","semgrep.dev":{"rule":{"origin":"community","r_id":9558,"rule_id":"j2UvKw","rule_name":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","rv_id":946247,"url":"https://semgrep.dev/playground/r/ExTg20L/python.jwt.security.jwt-none-alg.jwt-python-none-alg","version_id":"ExTg20L"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"242d02ef8ed40e5c03df87dfb39fa1f14cff067e4eb7309b0891a44a2e3b96548bd4018d545eeda9236bb36a5177384cdca2eeafab0d26b913b7b876d8d75fd1_0","lines":"        payload = jwt.decode(token, key=None, algorithms=[\"none\"])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":63,"col":13,"offset":2386},"end":{"line":63,"col":75,"offset":2448},"extra":{"metavars":{},"message":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/","category":"security","technology":["jwt"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","shortlink":"https://sg.run/Yvp4","semgrep.dev":{"rule":{"origin":"community","r_id":9558,"rule_id":"j2UvKw","rule_name":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","rv_id":946247,"url":"https://semgrep.dev/playground/r/ExTg20L/python.jwt.security.jwt-none-alg.jwt-python-none-alg","version_id":"ExTg20L"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"242d02ef8ed40e5c03df87dfb39fa1f14cff067e4eb7309b0891a44a2e3b96548bd4018d545eeda9236bb36a5177384cdca2eeafab0d26b913b7b876d8d75fd1_1","lines":"    token = jwt.encode({\"username\": username}, key=None, algorithm=\"none\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":64,"col":17,"offset":2465},"end":{"line":64,"col":46,"offset":2494},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":14,"col":10,"offset":321},"end":{"line":14,"col":37,"offset":348},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":59,"col":2,"offset":2135},"end":{"line":59,"col":5,"offset":2138},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":261},"svalue_end":{"line":11,"col":16,"offset":270},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":59,"col":6,"offset":2139},"end":{"line":59,"col":10,"offset":2143},"abstract_content":"post"},"$ROUTESTRING":{"start":{"line":59,"col":12,"offset":2145},"end":{"line":59,"col":18,"offset":2151},"abstract_content":"/login"},"$FUNC":{"start":{"line":60,"col":5,"offset":2158},"end":{"line":60,"col":10,"offset":2163},"abstract_content":"login"},"$PARAM":{"start":{"line":60,"col":11,"offset":2164},"end":{"line":60,"col":19,"offset":2172},"abstract_content":"username"},"$LOG":{"start":{"line":64,"col":12,"offset":2460},"end":{"line":64,"col":16,"offset":2464},"abstract_content":"info"},"$SINK":{"start":{"line":64,"col":17,"offset":2465},"end":{"line":64,"col":46,"offset":2494},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"03711afcc518716f24289245baf69c0973b911cd31dc1762a8466996f5be08e18161b688e004d49fae868ca124853d4cb153875a64b2c443bad2acab2a989aac_0","lines":"    logger.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":60,"col":11,"offset":2164},"end":{"line":60,"col":19,"offset":2172}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":60,"col":11,"offset":2164},"end":{"line":60,"col":19,"offset":2172}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":64,"col":17,"offset":2465},"end":{"line":64,"col":46,"offset":2494}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":103,"col":17,"offset":4248},"end":{"line":103,"col":57,"offset":4288},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"put"},"$LOGGER":{"start":{"line":14,"col":10,"offset":321},"end":{"line":14,"col":37,"offset":348},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":95,"col":2,"offset":3686},"end":{"line":95,"col":5,"offset":3689},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":261},"svalue_end":{"line":11,"col":16,"offset":270},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":95,"col":6,"offset":3690},"end":{"line":95,"col":9,"offset":3693},"abstract_content":"put"},"$ROUTESTRING":{"start":{"line":95,"col":11,"offset":3695},"end":{"line":95,"col":37,"offset":3721},"abstract_content":"/users/{username}/password"},"$FUNC":{"start":{"line":96,"col":5,"offset":3728},"end":{"line":96,"col":20,"offset":3743},"abstract_content":"change_password"},"$PARAM":{"start":{"line":96,"col":21,"offset":3744},"end":{"line":96,"col":29,"offset":3752},"abstract_content":"username"},"$LOG":{"start":{"line":103,"col":12,"offset":4243},"end":{"line":103,"col":16,"offset":4247},"abstract_content":"info"},"$SINK":{"start":{"line":103,"col":17,"offset":4248},"end":{"line":103,"col":57,"offset":4288},"abstract_content":"f\"Password changed for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0f5fbf4b189209adb701e21418a491db157e67f515f73bf67dd312f87e39fa2c5060cdf7779fba29f713beaf909e65f6104cbbf06a4b8b31283fa51a4b3c6738_0","lines":"    logger.info(f\"Password changed for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":96,"col":21,"offset":3744},"end":{"line":96,"col":29,"offset":3752}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":96,"col":21,"offset":3744},"end":{"line":96,"col":29,"offset":3752}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_40_original.py","start":{"line":103,"col":17,"offset":4248},"end":{"line":103,"col":57,"offset":4288}},"f\"Password changed for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":30,"col":13,"offset":723},"end":{"line":30,"col":60,"offset":770},"extra":{"metavars":{"$FUNC":{"start":{"line":29,"col":5,"offset":688},"end":{"line":29,"col":17,"offset":700},"abstract_content":"generate_jwt"},"$INPUT":{"start":{"line":30,"col":24,"offset":734},"end":{"line":30,"col":31,"offset":741},"abstract_content":"payload"}},"message":"The object is passed strictly to jwt.encode(...) Make sure that sensitive information is not exposed through JWT token payload.","metadata":{"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"cwe":["CWE-522: Insufficiently Protected Credentials"],"source-rule-url":"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/","category":"security","technology":["jwt"],"references":["https://owasp.org/Top10/A04_2021-Insecure_Design"],"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data","shortlink":"https://sg.run/ox8R","semgrep.dev":{"rule":{"origin":"community","r_id":9560,"rule_id":"9AU1zW","rule_name":"python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data","rv_id":946244,"url":"https://semgrep.dev/playground/r/d6TPjdN/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data","version_id":"d6TPjdN"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"66d8e5c6a3655221a8e3620822bc546029218c24b28c2a5d4ec521bd4fc01d0c125a3a5ee2be9b61d96e925469d44204301b7579d5718b5e1ca8d93702b745df_0","lines":"    token = jwt.encode(payload, key=None, algorithm=\"none\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":30,"col":13,"offset":723},"end":{"line":30,"col":60,"offset":770},"extra":{"metavars":{},"message":"Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"source-rule-url":"https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/","category":"security","technology":["jwt"],"references":["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","shortlink":"https://sg.run/Yvp4","semgrep.dev":{"rule":{"origin":"community","r_id":9558,"rule_id":"j2UvKw","rule_name":"python.jwt.security.jwt-none-alg.jwt-python-none-alg","rv_id":946247,"url":"https://semgrep.dev/playground/r/ExTg20L/python.jwt.security.jwt-none-alg.jwt-python-none-alg","version_id":"ExTg20L"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b0dac26940a4f79a9e7977c1953cfb6ddd996bf5aa0779fb205469a7480b934be0139ae2214f5ca52eb74bdac6cf830d94e2ce2a0b2ba60cd9731c7a5330e8dd_0","lines":"    token = jwt.encode(payload, key=None, algorithm=\"none\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":35,"col":66,"offset":888},"end":{"line":35,"col":71,"offset":893},"extra":{"metavars":{"$BOOL":{"start":{"line":35,"col":66,"offset":888},"end":{"line":35,"col":71,"offset":893},"abstract_content":"False"}},"message":"Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.","fix":"True","metadata":{"owasp":["A02:2017 - Broken Authentication","A07:2021 - Identification and Authentication Failures"],"cwe":["CWE-287: Improper Authentication"],"references":["https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96"],"category":"security","technology":["jwt"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","shortlink":"https://sg.run/6nyB","semgrep.dev":{"rule":{"origin":"community","r_id":9559,"rule_id":"10UKjo","rule_name":"python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","rv_id":946248,"url":"https://semgrep.dev/playground/r/7ZTrQ4G/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","version_id":"7ZTrQ4G"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"081fb2fffc4e6d34f8a2211e2e3ae323dd10ea14c8930f3ab18ea3c32f744c0ed5921fe0f1a28aff85db7f832322a7966c648a601a58e580ff276f544d3ae9e8_0","lines":"        payload = jwt.decode(token, options={\"verify_signature\": False})","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":66,"col":17,"offset":1884},"end":{"line":66,"col":51,"offset":1918},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":340},"end":{"line":14,"col":37,"offset":367},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":46,"col":20,"offset":1205},"end":{"line":46,"col":24,"offset":1209},"abstract_content":"json"},"$LOG":{"start":{"line":66,"col":12,"offset":1879},"end":{"line":66,"col":16,"offset":1883},"abstract_content":"info"},"$SINK":{"start":{"line":66,"col":17,"offset":1884},"end":{"line":66,"col":51,"offset":1918},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e8520c084f82d0927230687e85c65f5845ab069696899201bb39c78508837b9f4c4bc875c9b61c0891480505cab488a1dcaaae0e8324ee2e1b2cd62c298b3911_0","lines":"    logger.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":47,"col":16,"offset":1225},"end":{"line":47,"col":36,"offset":1245}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":47,"col":5,"offset":1214},"end":{"line":47,"col":13,"offset":1222}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":66,"col":17,"offset":1884},"end":{"line":66,"col":51,"offset":1918}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":83,"col":24,"offset":2500},"end":{"line":83,"col":68,"offset":2544},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":340},"end":{"line":14,"col":37,"offset":367},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":71,"col":20,"offset":2061},"end":{"line":71,"col":24,"offset":2065},"abstract_content":"json"},"$LOG":{"start":{"line":83,"col":16,"offset":2492},"end":{"line":83,"col":23,"offset":2499},"abstract_content":"warning"},"$SINK":{"start":{"line":83,"col":24,"offset":2500},"end":{"line":83,"col":68,"offset":2544},"abstract_content":"f\"Failed login attempt for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4f5cd65528c504e4d85be9815f50f8b00968820d181cc773742ec1648f3b2ec4b871315936e0a14ec7e88f4a7347d1bc9100c9006e75ad2299e3ee6d29c6894f_0","lines":"        logger.warning(f\"Failed login attempt for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":72,"col":16,"offset":2081},"end":{"line":72,"col":36,"offset":2101}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":72,"col":5,"offset":2070},"end":{"line":72,"col":13,"offset":2078}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":83,"col":24,"offset":2500},"end":{"line":83,"col":68,"offset":2544}},"f\"Failed login attempt for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":92,"col":17,"offset":2799},"end":{"line":92,"col":46,"offset":2828},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":340},"end":{"line":14,"col":37,"offset":367},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":71,"col":20,"offset":2061},"end":{"line":71,"col":24,"offset":2065},"abstract_content":"json"},"$LOG":{"start":{"line":92,"col":12,"offset":2794},"end":{"line":92,"col":16,"offset":2798},"abstract_content":"info"},"$SINK":{"start":{"line":92,"col":17,"offset":2799},"end":{"line":92,"col":46,"offset":2828},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c86eb1063a4de78c96cd5b8c4462d454a15b8646cdb79d3ba9535243338a9c9e6aff59afa9af4fafedf99b1895704a4892a859b6f56e57ea4f78daa767568a53_0","lines":"    logger.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":72,"col":16,"offset":2081},"end":{"line":72,"col":36,"offset":2101}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":72,"col":5,"offset":2070},"end":{"line":72,"col":13,"offset":2078}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":92,"col":17,"offset":2799},"end":{"line":92,"col":46,"offset":2828}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":137,"col":17,"offset":4282},"end":{"line":137,"col":57,"offset":4322},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"headers"},"$LOGGER":{"start":{"line":14,"col":10,"offset":340},"end":{"line":14,"col":37,"offset":367},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":117,"col":21,"offset":3608},"end":{"line":117,"col":28,"offset":3615},"abstract_content":"headers"},"$LOG":{"start":{"line":137,"col":12,"offset":4277},"end":{"line":137,"col":16,"offset":4281},"abstract_content":"info"},"$SINK":{"start":{"line":137,"col":17,"offset":4282},"end":{"line":137,"col":57,"offset":4322},"abstract_content":"f\"Password updated for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"84e63121acba8fc7addff8ec4fa2f7653ba505ca6ba913e8dd36d6eaeab437362719e3e33ee5eed90a320071d6f1dd1f8147ade36788999de996699311edb16a_0","lines":"    logger.info(f\"Password updated for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":117,"col":13,"offset":3600},"end":{"line":117,"col":49,"offset":3636}},"request.headers.get('Authorization')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":117,"col":5,"offset":3592},"end":{"line":117,"col":10,"offset":3597}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":121,"col":15,"offset":3733},"end":{"line":121,"col":27,"offset":3745}},"content":"verify_token"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":33,"col":18,"offset":806},"end":{"line":33,"col":23,"offset":811}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":35,"col":9,"offset":831},"end":{"line":35,"col":16,"offset":838}},"content":"payload"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":121,"col":5,"offset":3723},"end":{"line":121,"col":12,"offset":3730}},"content":"payload"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":125,"col":5,"offset":3849},"end":{"line":125,"col":13,"offset":3857}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":137,"col":17,"offset":4282},"end":{"line":137,"col":57,"offset":4322}},"f\"Password updated for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":157,"col":17,"offset":4925},"end":{"line":157,"col":56,"offset":4964},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"headers"},"$LOGGER":{"start":{"line":14,"col":10,"offset":340},"end":{"line":14,"col":37,"offset":367},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":142,"col":21,"offset":4487},"end":{"line":142,"col":28,"offset":4494},"abstract_content":"headers"},"$LOG":{"start":{"line":157,"col":12,"offset":4920},"end":{"line":157,"col":16,"offset":4924},"abstract_content":"info"},"$SINK":{"start":{"line":157,"col":17,"offset":4925},"end":{"line":157,"col":56,"offset":4964},"abstract_content":"f\"Account deleted for user: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f3e4f0d2948c9c9e859c89f25cf6ee677f4534b4617753a4404bfa6ab996a1a96ebcd91da9003f14a11cdaed336fc99fd036d2a5f2bdfa594fbf893d64f8b3a7_0","lines":"    logger.info(f\"Account deleted for user: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":142,"col":13,"offset":4479},"end":{"line":142,"col":49,"offset":4515}},"request.headers.get('Authorization')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":142,"col":5,"offset":4471},"end":{"line":142,"col":10,"offset":4476}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":146,"col":15,"offset":4612},"end":{"line":146,"col":27,"offset":4624}},"content":"verify_token"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":33,"col":18,"offset":806},"end":{"line":33,"col":23,"offset":811}},"content":"token"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":35,"col":9,"offset":831},"end":{"line":35,"col":16,"offset":838}},"content":"payload"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":146,"col":5,"offset":4602},"end":{"line":146,"col":12,"offset":4609}},"content":"payload"},{"location":{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":150,"col":5,"offset":4728},"end":{"line":150,"col":13,"offset":4736}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":157,"col":17,"offset":4925},"end":{"line":157,"col":56,"offset":4964}},"f\"Account deleted for user: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":166,"col":5,"offset":5240},"end":{"line":166,"col":24,"offset":5259},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"037af3844a78867c309e87d84624cd1614069ee31b3612f50f235b97589a86b73a5b58a82e01ca2d4356d28e195c237f60a44f32e774fa911987b71d45a43189_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-327/sample_42_original.py","start":{"line":166,"col":5,"offset":5240},"end":{"line":166,"col":24,"offset":5259},"extra":{"metavars":{"$APP":{"start":{"line":166,"col":5,"offset":5240},"end":{"line":166,"col":8,"offset":5243},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":215},"svalue_end":{"line":9,"col":22,"offset":230},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"183fefbbaba20aaf9a115fe327840f9372da69baf55a886e9b4eadb31ee84db28af5c8307a4ecf8f0f4cfec4a346723edeb3a268f54613ed9b84865ca32cfcd2_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":35,"col":11,"offset":800},"end":{"line":35,"col":37,"offset":826},"extra":{"metavars":{},"message":"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.","metadata":{"source-rule-url":"https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84","cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"bandit-code":"B304","references":["https://cwe.mitre.org/data/definitions/326.html","https://www.pycryptodome.org/src/cipher/cipher"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::symmetric-algorithm::pycryptodome","crypto::search::symmetric-algorithm::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","shortlink":"https://sg.run/Z5bw","semgrep.dev":{"rule":{"origin":"community","r_id":33635,"rule_id":"5rUr73","rule_name":"python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","rv_id":946411,"url":"https://semgrep.dev/playground/r/3ZTOP1R/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","version_id":"3ZTOP1R"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"8b0cb139fde882be4c3c54e1c02ad23ad128c886689ba485bfe3dec1e5e54f3f6869a404c9530a3c0a3e97452b0d442d762374693f7f0e6fcb3573bd6c83560c_0","lines":"    des = DES.new(key, DES.MODE_ECB)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":42,"col":11,"offset":1058},"end":{"line":42,"col":37,"offset":1084},"extra":{"metavars":{},"message":"Detected DES cipher or Triple DES algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use a secure symmetric cipher from the cryptodome package instead. Use secure stream ciphers such as ChaCha20, XChaCha20 and Salsa20, or a block cipher such as AES with a block size of 128 bits. When using a block cipher, use a modern mode of operation that also provides authentication, such as GCM.","metadata":{"source-rule-url":"https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84","cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"bandit-code":"B304","references":["https://cwe.mitre.org/data/definitions/326.html","https://www.pycryptodome.org/src/cipher/cipher"],"category":"security","technology":["pycryptodome"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","functional-categories":["crypto::search::symmetric-algorithm::pycryptodome","crypto::search::symmetric-algorithm::pycryptodomex"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","shortlink":"https://sg.run/Z5bw","semgrep.dev":{"rule":{"origin":"community","r_id":33635,"rule_id":"5rUr73","rule_name":"python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","rv_id":946411,"url":"https://semgrep.dev/playground/r/3ZTOP1R/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","version_id":"3ZTOP1R"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"8b0cb139fde882be4c3c54e1c02ad23ad128c886689ba485bfe3dec1e5e54f3f6869a404c9530a3c0a3e97452b0d442d762374693f7f0e6fcb3573bd6c83560c_1","lines":"    des = DES.new(key, DES.MODE_ECB)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":46,"col":1,"offset":1208},"end":{"line":70,"col":83,"offset":2272},"extra":{"metavars":{"$R":{"start":{"line":47,"col":5,"offset":1225},"end":{"line":47,"col":13,"offset":1233},"abstract_content":"register"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8a9decf5ab60bd6c00f1dc9145b10a7af8f7bd2d10a78d5732b5b1df6d0fa66667e7838389e127e3a59ff082cfde8ddb1ccc7f4fe19e621ec94c917da5b3ceee_0","lines":"@csrf_exempt\ndef register(request):\n    try:\n        data = json.loads(request.body)\n        username = data.get('username')\n        password = data.get('password')\n\n        if not validate_input(username, password):\n            raise ValidationError('Invalid username or password')\n\n        if username in users:\n            raise ValidationError('Username already exists')\n\n        users[username] = encrypt_password(password)\n        logger.info(f\"User {username} registered successfully\")\n        return JsonResponse({'message': f'User {username} registered successfully with DES encryption.'})\n    except json.JSONDecodeError:\n        logger.error(\"Invalid JSON in request\")\n        return JsonResponse({'error': 'Invalid JSON'}, status=400)\n    except ValidationError as e:\n        logger.error(f\"Validation error: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=400)\n    except Exception as e:\n        logger.error(f\"Unexpected error in register: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":72,"col":1,"offset":2274},"end":{"line":107,"col":83,"offset":3757},"extra":{"metavars":{"$R":{"start":{"line":73,"col":5,"offset":2291},"end":{"line":73,"col":10,"offset":2296},"abstract_content":"login"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c5fb506f0e79c7243a9bc0dfc7b91269db6ae5f4c348d43dc073f1cc8421daff97cdb327e9f6c6d8c97dba7e0261273015d6da466499ab0f704e5f1845a3a277_0","lines":"@csrf_exempt\ndef login(request):\n    try:\n        data = json.loads(request.body)\n        username = data.get('username')\n        password = data.get('password')\n\n        if not validate_input(username, password):\n            raise ValidationError('Invalid username or password')\n\n        if username not in users:\n            raise UserNotFoundException('User not found')\n\n        stored_password = users[username]\n        decrypted_password = decrypt_password(stored_password)\n\n        if password != decrypted_password:\n            raise InvalidCredentialsException('Invalid password')\n\n        logger.info(f\"User {username} logged in successfully\")\n        return JsonResponse({'message': 'Login successful'})\n    except json.JSONDecodeError:\n        logger.error(\"Invalid JSON in request\")\n        return JsonResponse({'error': 'Invalid JSON'}, status=400)\n    except ValidationError as e:\n        logger.error(f\"Validation error: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=400)\n    except UserNotFoundException as e:\n        logger.error(f\"User not found: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=404)\n    except InvalidCredentialsException as e:\n        logger.error(f\"Invalid credentials: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=401)\n    except Exception as e:\n        logger.error(f\"Unexpected error in login: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":109,"col":1,"offset":3759},"end":{"line":146,"col":83,"offset":5415},"extra":{"metavars":{"$R":{"start":{"line":110,"col":5,"offset":3776},"end":{"line":110,"col":20,"offset":3791},"abstract_content":"change_password"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"79d5f892b40561f6796422dcf7cdaf4e2bc58ff11a2205868bbebee75b1a480e5a9abc45a8fb78614334892bbf9029ace8198b6b7a516163006caabd24e3bcb1_0","lines":"@csrf_exempt\ndef change_password(request):\n    try:\n        data = json.loads(request.body)\n        username = data.get('username')\n        old_password = data.get('old_password')\n        new_password = data.get('new_password')\n\n        if not validate_input(username, new_password):\n            raise ValidationError('Invalid username or new password')\n\n        if username not in users:\n            raise UserNotFoundException('User not found')\n\n        stored_password = users[username]\n        decrypted_password = decrypt_password(stored_password)\n\n        if old_password != decrypted_password:\n            raise InvalidCredentialsException('Invalid old password')\n\n        users[username] = encrypt_password(new_password)\n        logger.info(f\"Password changed successfully for user {username}\")\n        return JsonResponse({'message': 'Password changed successfully'})\n    except json.JSONDecodeError:\n        logger.error(\"Invalid JSON in request\")\n        return JsonResponse({'error': 'Invalid JSON'}, status=400)\n    except ValidationError as e:\n        logger.error(f\"Validation error: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=400)\n    except UserNotFoundException as e:\n        logger.error(f\"User not found: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=404)\n    except InvalidCredentialsException as e:\n        logger.error(f\"Invalid credentials: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=401)\n    except Exception as e:\n        logger.error(f\"Unexpected error in change_password: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":148,"col":1,"offset":5417},"end":{"line":184,"col":83,"offset":6959},"extra":{"metavars":{"$R":{"start":{"line":149,"col":5,"offset":5434},"end":{"line":149,"col":16,"offset":5445},"abstract_content":"delete_user"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"58471118771ed7bc4165c676fde82c979864ff35641cb99420323a43750f698f229c0bea4404db3177491defca78638a1018703df376614d6e269effdeee66b8_0","lines":"@csrf_exempt\ndef delete_user(request):\n    try:\n        data = json.loads(request.body)\n        username = data.get('username')\n        password = data.get('password')\n\n        if not validate_input(username, password):\n            raise ValidationError('Invalid username or password')\n\n        if username not in users:\n            raise UserNotFoundException('User not found')\n\n        stored_password = users[username]\n        decrypted_password = decrypt_password(stored_password)\n\n        if password != decrypted_password:\n            raise InvalidCredentialsException('Invalid password')\n\n        del users[username]\n        logger.info(f\"User {username} deleted successfully\")\n        return JsonResponse({'message': f'User {username} deleted successfully'})\n    except json.JSONDecodeError:\n        logger.error(\"Invalid JSON in request\")\n        return JsonResponse({'error': 'Invalid JSON'}, status=400)\n    except ValidationError as e:\n        logger.error(f\"Validation error: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=400)\n    except UserNotFoundException as e:\n        logger.error(f\"User not found: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=404)\n    except InvalidCredentialsException as e:\n        logger.error(f\"Invalid credentials: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=401)\n    except Exception as e:\n        logger.error(f\"Unexpected error in delete_user: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-327/sample_43_original.py","start":{"line":186,"col":1,"offset":6961},"end":{"line":194,"col":83,"offset":7328},"extra":{"metavars":{"$R":{"start":{"line":187,"col":5,"offset":6978},"end":{"line":187,"col":15,"offset":6988},"abstract_content":"list_users"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ddda34c230809dc695c7098262b965d370e727c226df1ea186491b3acda1176942d086455ba69b46b21ae905f07a39075b532a01e48ba07730f1eb23461334e5_0","lines":"@csrf_exempt\ndef list_users(request):\n    try:\n        user_list = list(users.keys())\n        logger.info(\"User list retrieved successfully\")\n        return JsonResponse({'users': user_list})\n    except Exception as e:\n        logger.error(f\"Unexpected error in list_users: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":66,"col":22,"offset":2461},"end":{"line":66,"col":64,"offset":2503},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":55,"col":24,"offset":1908},"end":{"line":55,"col":32,"offset":1916},"abstract_content":"get_json"},"$LOG":{"start":{"line":66,"col":17,"offset":2456},"end":{"line":66,"col":21,"offset":2460},"abstract_content":"info"},"$SINK":{"start":{"line":66,"col":22,"offset":2461},"end":{"line":66,"col":64,"offset":2503},"abstract_content":"f\"New user registered: {data['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bd902a94ab588bc97e5f94496bf90227b25ebe674fe9ec896bd9fd2b96835f0c5923519f039da7e16769707a457d462a532706241ebeb4ba149824c2315ab06c_0","lines":"        logging.info(f\"New user registered: {data['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":55,"col":16,"offset":1900},"end":{"line":55,"col":34,"offset":1918}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":55,"col":9,"offset":1893},"end":{"line":55,"col":13,"offset":1897}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":66,"col":22,"offset":2461},"end":{"line":66,"col":64,"offset":2503}},"f\"New user registered: {data['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":129,"col":18,"offset":5142},"end":{"line":129,"col":50,"offset":5174},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":123,"col":2,"offset":4938},"end":{"line":123,"col":5,"offset":4941},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":22,"offset":309},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":123,"col":6,"offset":4942},"end":{"line":123,"col":11,"offset":4947},"abstract_content":"route"},"$FUNC":{"start":{"line":125,"col":5,"offset":5009},"end":{"line":125,"col":16,"offset":5020},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":125,"col":17,"offset":5021},"end":{"line":125,"col":24,"offset":5028},"abstract_content":"user_id"},"$LOG":{"start":{"line":129,"col":13,"offset":5137},"end":{"line":129,"col":17,"offset":5141},"abstract_content":"info"},"$SINK":{"start":{"line":129,"col":18,"offset":5142},"end":{"line":129,"col":50,"offset":5174},"abstract_content":"f\"User deleted: {user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3e770d47d2662e877a3e274ac4924a5974bc5de02113881a01c2b591cd1ed20a93f7fb2c35e407ba3289297a327bde85e7aafd829b35bb10bf8d9d4692e85055_0","lines":"    logging.info(f\"User deleted: {user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":125,"col":17,"offset":5021},"end":{"line":125,"col":24,"offset":5028}},"user_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":125,"col":17,"offset":5021},"end":{"line":125,"col":24,"offset":5028}},"content":"user_id"},{"location":{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":126,"col":5,"offset":5035},"end":{"line":126,"col":9,"offset":5039}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":129,"col":18,"offset":5142},"end":{"line":129,"col":50,"offset":5174}},"f\"User deleted: {user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":145,"col":5,"offset":5655},"end":{"line":145,"col":24,"offset":5674},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8a8364d28f76fbccda5fc3bc8824fa2dde759b75d6721f6835336e84fb5f49da662b4b876bbce7494b4c207e09aae39a6b899f29bcedc01a0f85a1b07a74d580_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-327/sample_45_original.py","start":{"line":145,"col":5,"offset":5655},"end":{"line":145,"col":24,"offset":5674},"extra":{"metavars":{"$APP":{"start":{"line":145,"col":5,"offset":5655},"end":{"line":145,"col":8,"offset":5658},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":22,"offset":309},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"d14a261a0b1282319b084d83da50f783ca738b06f3efd8912ec8f049848cbc665d8e9cc077862be5fa1cc957928c94d426db85c70423c6a72c60065a9f439463_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_47_original.py","start":{"line":95,"col":27,"offset":3696},"end":{"line":95,"col":69,"offset":3738},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":95,"col":27,"offset":3696},"end":{"line":95,"col":67,"offset":3736},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4436a8c5923c4355ddba35125896081a58cbd48d5c5c4192a86aa1292e0a1f780ecaacbfb2a6e329db3b20727166fa895a2e5732344d7e0d7184095ca0c23f34_0","lines":"        hashed_password = hashlib.md5(password.encode()).hexdigest()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_47_original.py","start":{"line":95,"col":27,"offset":3696},"end":{"line":95,"col":38,"offset":3707}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_47_original.py","start":{"line":95,"col":27,"offset":3696},"end":{"line":95,"col":69,"offset":3738}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-327/sample_47_original.py","start":{"line":135,"col":27,"offset":5216},"end":{"line":135,"col":69,"offset":5258},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":135,"col":27,"offset":5216},"end":{"line":135,"col":67,"offset":5256},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4436a8c5923c4355ddba35125896081a58cbd48d5c5c4192a86aa1292e0a1f780ecaacbfb2a6e329db3b20727166fa895a2e5732344d7e0d7184095ca0c23f34_1","lines":"        hashed_password = hashlib.md5(password.encode()).hexdigest()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_47_original.py","start":{"line":135,"col":27,"offset":5216},"end":{"line":135,"col":38,"offset":5227}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-327/sample_47_original.py","start":{"line":135,"col":27,"offset":5216},"end":{"line":135,"col":69,"offset":5258}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":46,"col":9,"offset":1605},"end":{"line":46,"col":108,"offset":1704},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":37,"col":24,"offset":1279},"end":{"line":37,"col":28,"offset":1283},"abstract_content":"json"},"$O":{"start":{"line":44,"col":18,"offset":1524},"end":{"line":44,"col":31,"offset":1537},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":46,"col":24,"offset":1620},"end":{"line":46,"col":78,"offset":1674},"abstract_content":"'INSERT INTO users (username, password) VALUES (?, ?)'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ba35edf9ffb48808c05f5b2fbb07ecf7e23a0330fc4c9cc9be5de7d932e81c52eba4621bb179d18285462d4f5d1d7c2aa8e11d4e7cae3f645aa97aa2f045a1db_0","lines":"        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":37,"col":16,"offset":1271},"end":{"line":37,"col":44,"offset":1299}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":37,"col":5,"offset":1260},"end":{"line":37,"col":13,"offset":1268}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":46,"col":9,"offset":1605},"end":{"line":46,"col":108,"offset":1704}},"cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":46,"col":9,"offset":1605},"end":{"line":46,"col":108,"offset":1704},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":37,"col":24,"offset":1279},"end":{"line":37,"col":28,"offset":1283},"abstract_content":"json"},"$O":{"start":{"line":44,"col":18,"offset":1524},"end":{"line":44,"col":31,"offset":1537},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":46,"col":24,"offset":1620},"end":{"line":46,"col":78,"offset":1674},"abstract_content":"'INSERT INTO users (username, password) VALUES (?, ?)'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b2ba8afd6141cbed48658836cc71db5c74f2cba7c34cf1d0e05a401887be5b0eb14bdb52800efbc2b830bd000e8ddbe37bb66a9fafa0baaf899f3fc70f4f143a_0","lines":"        cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":37,"col":16,"offset":1271},"end":{"line":37,"col":44,"offset":1299}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":37,"col":5,"offset":1260},"end":{"line":37,"col":13,"offset":1268}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":46,"col":9,"offset":1605},"end":{"line":46,"col":108,"offset":1704}},"cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_password))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":48,"col":22,"offset":1748},"end":{"line":48,"col":52,"offset":1778},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":37,"col":24,"offset":1279},"end":{"line":37,"col":28,"offset":1283},"abstract_content":"json"},"$LOG":{"start":{"line":48,"col":17,"offset":1743},"end":{"line":48,"col":21,"offset":1747},"abstract_content":"info"},"$SINK":{"start":{"line":48,"col":22,"offset":1748},"end":{"line":48,"col":52,"offset":1778},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f4fb143a21ad1946616cc414ab3d6aa7e6ddd2e562f698eb158bcaac6ca75a8b2964a39665bfda19b50d525d46762c77492a452951b8a5670e73edea9213649d_0","lines":"        logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":37,"col":16,"offset":1271},"end":{"line":37,"col":44,"offset":1299}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":37,"col":5,"offset":1260},"end":{"line":37,"col":13,"offset":1268}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":48,"col":22,"offset":1748},"end":{"line":48,"col":52,"offset":1778}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":67,"col":26,"offset":2574},"end":{"line":67,"col":55,"offset":2603},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":60,"col":24,"offset":2233},"end":{"line":60,"col":28,"offset":2237},"abstract_content":"json"},"$LOG":{"start":{"line":67,"col":21,"offset":2569},"end":{"line":67,"col":25,"offset":2573},"abstract_content":"info"},"$SINK":{"start":{"line":67,"col":26,"offset":2574},"end":{"line":67,"col":55,"offset":2603},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4ca597a57a6f35f276781797e80c9f21f483e9c7c4db41f4b32c094257388a8be29f17a32534ba07433448826090959ca68f7f428b48b2ca8cdb40504ea4af67_0","lines":"            logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":60,"col":16,"offset":2225},"end":{"line":60,"col":44,"offset":2253}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":60,"col":5,"offset":2214},"end":{"line":60,"col":13,"offset":2222}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":67,"col":26,"offset":2574},"end":{"line":67,"col":55,"offset":2603}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":92,"col":13,"offset":3439},"end":{"line":92,"col":112,"offset":3538},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":86,"col":27,"offset":3230},"end":{"line":86,"col":31,"offset":3234},"abstract_content":"json"},"$O":{"start":{"line":91,"col":22,"offset":3413},"end":{"line":91,"col":35,"offset":3426},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":92,"col":28,"offset":3454},"end":{"line":92,"col":80,"offset":3506},"abstract_content":"'INSERT INTO notes (user_id, content) VALUES (?, ?)'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"d633064b2d54335b9f194ae13726e75d6052830acff6cfad66bf16a9f88adf70941f1231aef53e94af6014052fc44afcc9af1250b51aadde775b6612adb95cc0_0","lines":"            cursor.execute('INSERT INTO notes (user_id, content) VALUES (?, ?)', (session['user_id'], content))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":86,"col":19,"offset":3222},"end":{"line":86,"col":46,"offset":3249}},"request.json.get('content')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":86,"col":9,"offset":3212},"end":{"line":86,"col":16,"offset":3219}},"content":"content"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":92,"col":13,"offset":3439},"end":{"line":92,"col":112,"offset":3538}},"cursor.execute('INSERT INTO notes (user_id, content) VALUES (?, ?)', (session['user_id'], content))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":92,"col":13,"offset":3439},"end":{"line":92,"col":112,"offset":3538},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":86,"col":27,"offset":3230},"end":{"line":86,"col":31,"offset":3234},"abstract_content":"json"},"$O":{"start":{"line":91,"col":22,"offset":3413},"end":{"line":91,"col":35,"offset":3426},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":92,"col":28,"offset":3454},"end":{"line":92,"col":80,"offset":3506},"abstract_content":"'INSERT INTO notes (user_id, content) VALUES (?, ?)'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b9318bee7c4725498d0b9a604476143fcf683944d88590c7a55c1f42aba1794de7400972e827cbe738e2bfa6fe19a01030fe978c3c222569ee94434b98b41c7f_0","lines":"            cursor.execute('INSERT INTO notes (user_id, content) VALUES (?, ?)', (session['user_id'], content))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":86,"col":19,"offset":3222},"end":{"line":86,"col":46,"offset":3249}},"request.json.get('content')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":86,"col":9,"offset":3212},"end":{"line":86,"col":16,"offset":3219}},"content":"content"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":92,"col":13,"offset":3439},"end":{"line":92,"col":112,"offset":3538}},"cursor.execute('INSERT INTO notes (user_id, content) VALUES (?, ?)', (session['user_id'], content))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":130,"col":13,"offset":5041},"end":{"line":130,"col":92,"offset":5120},"extra":{"metavars":{"$APP":{"start":{"line":112,"col":2,"offset":4350},"end":{"line":112,"col":5,"offset":4353},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":200},"svalue_end":{"line":8,"col":22,"offset":215},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":112,"col":6,"offset":4354},"end":{"line":112,"col":11,"offset":4359},"abstract_content":"route"},"$FUNC":{"start":{"line":114,"col":5,"offset":4438},"end":{"line":114,"col":9,"offset":4442},"abstract_content":"note"},"$PARAM":{"start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450},"abstract_content":"note_id"},"$PROPERTY":{"start":{"line":126,"col":31,"offset":4876},"end":{"line":126,"col":35,"offset":4880},"abstract_content":"json"},"$O":{"start":{"line":129,"col":22,"offset":5015},"end":{"line":129,"col":35,"offset":5028},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":130,"col":28,"offset":5056},"end":{"line":130,"col":71,"offset":5099},"abstract_content":"'UPDATE notes SET content = ? WHERE id = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"6ddd09bb41baed2e300bfda7f451cf0d7898ee11365690e0dd752308902550986fdbe6146f4f1daf98aa01be0d2476ca47ae2289f5faec9f126ab78a727379b5_0","lines":"            cursor.execute('UPDATE notes SET content = ? WHERE id = ?', (content, note_id))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"note_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"content":"note_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":130,"col":13,"offset":5041},"end":{"line":130,"col":92,"offset":5120}},"cursor.execute('UPDATE notes SET content = ? WHERE id = ?', (content, note_id))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":130,"col":13,"offset":5041},"end":{"line":130,"col":92,"offset":5120},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":126,"col":31,"offset":4876},"end":{"line":126,"col":35,"offset":4880},"abstract_content":"json"},"$O":{"start":{"line":129,"col":22,"offset":5015},"end":{"line":129,"col":35,"offset":5028},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":130,"col":28,"offset":5056},"end":{"line":130,"col":71,"offset":5099},"abstract_content":"'UPDATE notes SET content = ? WHERE id = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f25adfb3367aa476378fcae832b147e80a7d05b40dffac54833b2ac2c0080ddbf64125bb118dfa7f72707dbe5f5ef324b30e3519cb6923fc13a87be0edcebfaa_0","lines":"            cursor.execute('UPDATE notes SET content = ? WHERE id = ?', (content, note_id))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":126,"col":23,"offset":4868},"end":{"line":126,"col":50,"offset":4895}},"request.json.get('content')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":126,"col":13,"offset":4858},"end":{"line":126,"col":20,"offset":4865}},"content":"content"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":130,"col":13,"offset":5041},"end":{"line":130,"col":92,"offset":5120}},"cursor.execute('UPDATE notes SET content = ? WHERE id = ?', (content, note_id))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":132,"col":26,"offset":5172},"end":{"line":132,"col":52,"offset":5198},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":112,"col":2,"offset":4350},"end":{"line":112,"col":5,"offset":4353},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":200},"svalue_end":{"line":8,"col":22,"offset":215},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":112,"col":6,"offset":4354},"end":{"line":112,"col":11,"offset":4359},"abstract_content":"route"},"$FUNC":{"start":{"line":114,"col":5,"offset":4438},"end":{"line":114,"col":9,"offset":4442},"abstract_content":"note"},"$PARAM":{"start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450},"abstract_content":"note_id"},"$LOG":{"start":{"line":132,"col":21,"offset":5167},"end":{"line":132,"col":25,"offset":5171},"abstract_content":"info"},"$SINK":{"start":{"line":132,"col":26,"offset":5172},"end":{"line":132,"col":52,"offset":5198},"abstract_content":"f\"Note updated: {note_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"990682a227be47e0c7608de4b255034b8c7804286ad45e7edb3292c34efc3c602ffd3851f7779de7c031e13b145aa4c378a8a48bdbe97bdd4c8b207635b6b0e4_0","lines":"            logging.info(f\"Note updated: {note_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"note_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"content":"note_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":132,"col":26,"offset":5172},"end":{"line":132,"col":52,"offset":5198}},"f\"Note updated: {note_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":137,"col":13,"offset":5371},"end":{"line":137,"col":73,"offset":5431},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":112,"col":2,"offset":4350},"end":{"line":112,"col":5,"offset":4353},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":200},"svalue_end":{"line":8,"col":22,"offset":215},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":112,"col":6,"offset":4354},"end":{"line":112,"col":11,"offset":4359},"abstract_content":"route"},"$FUNC":{"start":{"line":114,"col":5,"offset":4438},"end":{"line":114,"col":9,"offset":4442},"abstract_content":"note"},"$PARAM":{"start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450},"abstract_content":"note_id"},"$O":{"start":{"line":136,"col":22,"offset":5345},"end":{"line":136,"col":35,"offset":5358},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":137,"col":28,"offset":5386},"end":{"line":137,"col":60,"offset":5418},"abstract_content":"'DELETE FROM notes WHERE id = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b367e5cdcff187eb5d38f20900ba627a5e6fc1885a5aca6859b85c937ae68165fd7851190621d8f9499d7113c724edde254ff66029abd85fd680a08c4edb47ae_0","lines":"            cursor.execute('DELETE FROM notes WHERE id = ?', (note_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"note_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"content":"note_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":137,"col":13,"offset":5371},"end":{"line":137,"col":73,"offset":5431}},"cursor.execute('DELETE FROM notes WHERE id = ?', (note_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":139,"col":26,"offset":5483},"end":{"line":139,"col":52,"offset":5509},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":112,"col":2,"offset":4350},"end":{"line":112,"col":5,"offset":4353},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":200},"svalue_end":{"line":8,"col":22,"offset":215},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":112,"col":6,"offset":4354},"end":{"line":112,"col":11,"offset":4359},"abstract_content":"route"},"$FUNC":{"start":{"line":114,"col":5,"offset":4438},"end":{"line":114,"col":9,"offset":4442},"abstract_content":"note"},"$PARAM":{"start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450},"abstract_content":"note_id"},"$LOG":{"start":{"line":139,"col":21,"offset":5478},"end":{"line":139,"col":25,"offset":5482},"abstract_content":"info"},"$SINK":{"start":{"line":139,"col":26,"offset":5483},"end":{"line":139,"col":52,"offset":5509},"abstract_content":"f\"Note deleted: {note_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f2a75c2d3d89a68ea8ac172d1936ed85b3b48e2f44e11ddf198c63530c9c380cb621ff61f5f27fd7d1ca47f962d853e29d6795e268b3446e14d6c8258a238ba7_0","lines":"            logging.info(f\"Note deleted: {note_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"note_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"content":"note_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":139,"col":26,"offset":5483},"end":{"line":139,"col":52,"offset":5509}},"f\"Note deleted: {note_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":142,"col":23,"offset":5634},"end":{"line":142,"col":65,"offset":5676},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":112,"col":2,"offset":4350},"end":{"line":112,"col":5,"offset":4353},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":200},"svalue_end":{"line":8,"col":22,"offset":215},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":112,"col":6,"offset":4354},"end":{"line":112,"col":11,"offset":4359},"abstract_content":"route"},"$FUNC":{"start":{"line":114,"col":5,"offset":4438},"end":{"line":114,"col":9,"offset":4442},"abstract_content":"note"},"$PARAM":{"start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450},"abstract_content":"note_id"},"$LOG":{"start":{"line":142,"col":17,"offset":5628},"end":{"line":142,"col":22,"offset":5633},"abstract_content":"error"},"$SINK":{"start":{"line":142,"col":23,"offset":5634},"end":{"line":142,"col":65,"offset":5676},"abstract_content":"f\"Error handling note {note_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bf3296e3e95c9533cfac58bb7c750abc5229504691e3452d1cef2d0a9788b855c12d52ef7e7099b9bce7bf379c8a2a32b9c082dde6c1e54a362ae97d422c9fcc_0","lines":"        logging.error(f\"Error handling note {note_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"note_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":114,"col":10,"offset":4443},"end":{"line":114,"col":17,"offset":4450}},"content":"note_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":142,"col":23,"offset":5634},"end":{"line":142,"col":65,"offset":5676}},"f\"Error handling note {note_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":153,"col":5,"offset":5951},"end":{"line":153,"col":24,"offset":5970},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5fe5801deb6277b60e08fc7b8827ff245155785f8660841890cc55b99c34f3e851b32c2348bee69f01a676cdb509300cd91b4686b85681c53a3b91aba842e369_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-489/sample_191_original.py","start":{"line":153,"col":5,"offset":5951},"end":{"line":153,"col":24,"offset":5970},"extra":{"metavars":{"$APP":{"start":{"line":153,"col":5,"offset":5951},"end":{"line":153,"col":8,"offset":5954},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":200},"svalue_end":{"line":8,"col":22,"offset":215},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"06b277ef910c7a89dd989199844edfe422030ceb27509c23d830f171aacb256a1ad5a5d9fd8561f48f475bd2e0f3cf33b2b37223f655e4f7c9943602e0e87108_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","path":"vulnerability_samples/CWE-489/sample_192_original.py","start":{"line":12,"col":1,"offset":380},"end":{"line":12,"col":44,"offset":423},"extra":{"metavars":{"$M":{"start":{"line":12,"col":1,"offset":380},"end":{"line":12,"col":4,"offset":383},"abstract_content":"app"}},"message":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","shortlink":"https://sg.run/Ekde","semgrep.dev":{"rule":{"origin":"community","r_id":9537,"rule_id":"4bUkX0","rule_name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","rv_id":946210,"url":"https://semgrep.dev/playground/r/44TZkrP/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","version_id":"44TZkrP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"6dc367afece51fd330b9380538559eb2e8079c7c272fe6a7bee842a8ea9c823079210c097213c50996b261b12d1cf319ea08eb89ce6cfe18e0a66762fcf5c6ce_0","lines":"app.config['SECRET_KEY'] = 'supersecretkey'","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-489/sample_192_original.py","start":{"line":86,"col":9,"offset":2913},"end":{"line":86,"col":40,"offset":2944},"extra":{"metavars":{"$MODEL":{"start":{"line":86,"col":9,"offset":2913},"end":{"line":86,"col":17,"offset":2921},"abstract_content":"new_user","propagated_value":{"svalue_start":{"line":85,"col":20,"offset":2868},"svalue_end":{"line":85,"col":56,"offset":2904},"svalue_abstract_content":"User(username username email email)"}},"$X":{"start":{"line":86,"col":31,"offset":2935},"end":{"line":86,"col":39,"offset":2943},"abstract_content":"password","propagated_value":{"svalue_start":{"line":74,"col":20,"offset":2466},"svalue_end":{"line":74,"col":36,"offset":2482},"svalue_abstract_content":"data['password']"}}},"message":"The password on 'new_user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(password, user=new_user):\n            new_user.set_password(password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"99097f76a8f0fa82d72cee676b4aab5859d4d18444bf257e9edb1279b11988627923f01d6b8bea9fbd45096443821e532b2482dc06606f27db4f4e5ef9ce85cc_0","lines":"        new_user.set_password(password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-489/sample_192_original.py","start":{"line":117,"col":9,"offset":4110},"end":{"line":117,"col":44,"offset":4145},"extra":{"metavars":{"$MODEL":{"start":{"line":117,"col":9,"offset":4110},"end":{"line":117,"col":13,"offset":4114},"abstract_content":"user"},"$X":{"start":{"line":117,"col":27,"offset":4128},"end":{"line":117,"col":43,"offset":4144},"abstract_content":"data['password']"}},"message":"The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(data['password'], user=user):\n            user.set_password(data['password'])","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5566236b69dad1d365020921826463e1150d3baea888c6d7662c379b313509248ac155298bf9b548d98ba3701d27fcf91f8fe6b60b99e83a76892521494b8072_0","lines":"        user.set_password(data['password'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-489/sample_192_original.py","start":{"line":171,"col":5,"offset":5956},"end":{"line":171,"col":24,"offset":5975},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"cffce47d0ec6cd9d9150ac0cf97a1aa5523ebb9ec8b04b687af64bb00bfcb9689f424dbd6b104f0b6f942405d469f9621bb050b5452e7de045944da3883b3e4f_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-489/sample_192_original.py","start":{"line":171,"col":5,"offset":5956},"end":{"line":171,"col":24,"offset":5975},"extra":{"metavars":{"$APP":{"start":{"line":171,"col":5,"offset":5956},"end":{"line":171,"col":8,"offset":5959},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":301},"svalue_end":{"line":10,"col":22,"offset":316},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"53e0b56626e9b4fe336864047fad577a6b74705b1b81ba2eab35a8d3552292df047da7def9058c0c4141be9f4d4645105cad30750162ac2286b5e6614bc6b437_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-dill","path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":80,"col":33,"offset":2887},"end":{"line":80,"col":77,"offset":2931},"extra":{"metavars":{"$FUNC":{"start":{"line":80,"col":40,"offset":2894},"end":{"line":80,"col":45,"offset":2899},"abstract_content":"loads"}},"message":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill","shortlink":"https://sg.run/vzjA","semgrep.dev":{"rule":{"origin":"community","r_id":9677,"rule_id":"L1Uy60","rule_name":"python.lang.security.deserialization.pickle.avoid-dill","rv_id":946399,"url":"https://semgrep.dev/playground/r/O9TX3bn/python.lang.security.deserialization.pickle.avoid-dill","version_id":"O9TX3bn"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b60428ec5c3bfbfff423c49faa496c27d2393bb81af763549d4857d4c98fc06583d059c2828baff89c6075ff11541d43b9116c4947830c56d95b466e6d10ad21_0","lines":"            processed_message = pickle.loads(base64.b64decode(message_body))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":80,"col":33,"offset":2887},"end":{"line":80,"col":77,"offset":2931},"extra":{"metavars":{"$FUNC":{"start":{"line":80,"col":40,"offset":2894},"end":{"line":80,"col":45,"offset":2899},"abstract_content":"loads"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rule_name":"python.lang.security.deserialization.pickle.avoid-pickle","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"51cae50d0590f33d8f1893ecb3bae0d012eb88b9b50f50a9a7c89555f6837dd0a0891ce514869aa55b06a2a7b94d2cdbb68586aafc1270eaac0d799d73d819ae_0","lines":"            processed_message = pickle.loads(base64.b64decode(message_body))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda","path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":80,"col":46,"offset":2900},"end":{"line":80,"col":76,"offset":2930},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"loads"},"$HANDLER":{"start":{"line":63,"col":5,"offset":2116},"end":{"line":63,"col":19,"offset":2130},"abstract_content":"lambda_handler"},"$EVENT":{"start":{"line":63,"col":20,"offset":2131},"end":{"line":63,"col":25,"offset":2136},"abstract_content":"event"},"$CONTEXT":{"start":{"line":63,"col":27,"offset":2138},"end":{"line":63,"col":34,"offset":2145},"abstract_content":"context"},"$PICKLE":{"start":{"line":80,"col":33,"offset":2887},"end":{"line":80,"col":39,"offset":2893},"abstract_content":"pickle"},"$METHOD":{"start":{"line":80,"col":40,"offset":2894},"end":{"line":80,"col":45,"offset":2899},"abstract_content":"loads"},"$SINK":{"start":{"line":80,"col":46,"offset":2900},"end":{"line":80,"col":76,"offset":2930},"abstract_content":"base64.b64decode(message_body)"}},"message":"The application may convert user-controlled data into an object, which can lead to an insecure deserialization vulnerability. An attacker can create a malicious serialized object, pass it to the application, and take advantage of the deserialization process to perform Denial-of-service (DoS), Remote code execution (RCE), or bypass access control measures. The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are also considered insecure.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Unsafe Deserialization in AWS Lambda","functional-categories":["deserialization::sink::load-object::lang","serverless::source::function-params::aws-lambda"],"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"references":["https://davidhamann.de/2020/04/05/exploiting-python-pickle/","https://docs.python.org/3/library/pickle.html","https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures","https://portswigger.net/web-security/deserialization"],"technology":["aws","aws-lambda","cloud","deserialization","pickle","serverless"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda","shortlink":"https://sg.run/X3Nl","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":44920,"rule_id":"v8UK4Z","rule_name":"python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda","rv_id":947755,"url":"https://semgrep.dev/playground/r/xyTqWlX/python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda","version_id":"xyTqWlX"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"32d614741b46e6b15717391f32c5a68bbe37082e8a36a2182ecb5972dbcb194810a8ed58a83467f58c3e9c9dd328198188ffe892cde62e9818624aea27a8e7cd_0","lines":"            processed_message = pickle.loads(base64.b64decode(message_body))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":63,"col":20,"offset":2131},"end":{"line":63,"col":25,"offset":2136}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":63,"col":20,"offset":2131},"end":{"line":63,"col":25,"offset":2136}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":65,"col":5,"offset":2182},"end":{"line":65,"col":20,"offset":2197}},"content":"input_queue_url"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":72,"col":9,"offset":2505},"end":{"line":72,"col":17,"offset":2513}},"content":"response"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":75,"col":13,"offset":2641},"end":{"line":75,"col":20,"offset":2648}},"content":"message"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":76,"col":13,"offset":2687},"end":{"line":76,"col":25,"offset":2699}},"content":"message_body"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":80,"col":46,"offset":2900},"end":{"line":80,"col":76,"offset":2930}},"base64.b64decode(message_body)"]]},"engine_kind":"PRO"}},{"check_id":"python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization","path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":80,"col":46,"offset":2900},"end":{"line":80,"col":76,"offset":2930},"extra":{"metavars":{"$HANDLER":{"start":{"line":63,"col":5,"offset":2116},"end":{"line":63,"col":19,"offset":2130},"abstract_content":"lambda_handler"},"$SINK":{"start":{"line":80,"col":46,"offset":2900},"end":{"line":80,"col":76,"offset":2930},"abstract_content":"base64.b64decode(message_body)"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html","https://davidhamann.de/2020/04/05/exploiting-python-pickle/"],"category":"security","technology":["python","aws-lambda"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization","shortlink":"https://sg.run/JbjW","semgrep.dev":{"rule":{"origin":"community","r_id":21602,"rule_id":"JDUDQg","rule_name":"python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization","rv_id":946097,"url":"https://semgrep.dev/playground/r/e1T98QD/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization","version_id":"e1T98QD"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"beea85bb67d1162c801f7fc0fc2578d1ec8c2ce9937f02e694a88bb1b705dd01c42f000f088729a373c9b4bba03bc59fcbc0c520a31e9f92960954efd3abc3c5_0","lines":"            processed_message = pickle.loads(base64.b64decode(message_body))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":65,"col":23,"offset":2200},"end":{"line":65,"col":28,"offset":2205}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":65,"col":5,"offset":2182},"end":{"line":65,"col":20,"offset":2197}},"content":"input_queue_url"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":72,"col":9,"offset":2505},"end":{"line":72,"col":17,"offset":2513}},"content":"response"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":75,"col":13,"offset":2641},"end":{"line":75,"col":20,"offset":2648}},"content":"message"},{"location":{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":76,"col":13,"offset":2687},"end":{"line":76,"col":25,"offset":2699}},"content":"message_body"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":80,"col":46,"offset":2900},"end":{"line":80,"col":76,"offset":2930}},"base64.b64decode(message_body)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-dill","path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":126,"col":46,"offset":4673},"end":{"line":126,"col":81,"offset":4708},"extra":{"metavars":{"$FUNC":{"start":{"line":126,"col":53,"offset":4680},"end":{"line":126,"col":58,"offset":4685},"abstract_content":"dumps"}},"message":"Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill","shortlink":"https://sg.run/vzjA","semgrep.dev":{"rule":{"origin":"community","r_id":9677,"rule_id":"L1Uy60","rule_name":"python.lang.security.deserialization.pickle.avoid-dill","rv_id":946399,"url":"https://semgrep.dev/playground/r/O9TX3bn/python.lang.security.deserialization.pickle.avoid-dill","version_id":"O9TX3bn"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"53e84c6543d421f278309f4da4d419fcbb78b1fbaab31e2fafe2080a2e2a116c6286a7017e165eb35ae065e5c5ec248253f2d16177a39fb2a78507a069d85ed4_0","lines":"                    \"Body\": base64.b64encode(pickle.dumps({\"data\": \"test data\"})),","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-pickle","path":"vulnerability_samples/CWE-502/sample_197_original.py","start":{"line":126,"col":46,"offset":4673},"end":{"line":126,"col":81,"offset":4708},"extra":{"metavars":{"$FUNC":{"start":{"line":126,"col":53,"offset":4680},"end":{"line":126,"col":58,"offset":4685},"abstract_content":"dumps"}},"message":"Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","shortlink":"https://sg.run/OPwB","semgrep.dev":{"rule":{"origin":"community","r_id":9675,"rule_id":"EwU2BJ","rule_name":"python.lang.security.deserialization.pickle.avoid-pickle","rv_id":946397,"url":"https://semgrep.dev/playground/r/w8TKJL9/python.lang.security.deserialization.pickle.avoid-pickle","version_id":"w8TKJL9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"343e1c787ddacabcf80aba74ad78e96ca9c3c0ad66b56252a16308bb7cd4cabfb47dbbc1759e3f3b7095b6089cfdfd68b2bc155efa92b4a87d7c2e4e7f2c6912_0","lines":"                    \"Body\": base64.b64encode(pickle.dumps({\"data\": \"test data\"})),","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"trailofbits.python.pickles-in-numpy.pickles-in-numpy","path":"vulnerability_samples/CWE-502/sample_198_original.py","start":{"line":23,"col":21,"offset":539},"end":{"line":23,"col":70,"offset":588},"extra":{"metavars":{"$VALUE":{"start":{"line":23,"col":65,"offset":583},"end":{"line":23,"col":69,"offset":587},"abstract_content":"True"}},"message":"Functions reliant on pickle can result in arbitrary code execution.  Consider using fickling or switching to a safer serialization method","metadata":{"category":"security","cwe":"CWE-502: Deserialization of Untrusted Data","subcategory":["vuln"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"HIGH","technology":["numpy"],"description":"Potential arbitrary code execution from `NumPy` functions reliant on pickling","references":["https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/"],"license":"AGPL-3.0 license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/trailofbits.python.pickles-in-numpy.pickles-in-numpy","shortlink":"https://sg.run/ryKe","semgrep.dev":{"rule":{"origin":"community","r_id":17169,"rule_id":"lBUWjy","rule_name":"trailofbits.python.pickles-in-numpy.pickles-in-numpy","rv_id":833301,"url":"https://semgrep.dev/playground/r/WrTdpJ9/trailofbits.python.pickles-in-numpy.pickles-in-numpy","version_id":"WrTdpJ9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/trailofbits.python.pickles-in-numpy.pickles-in-numpy","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"f6afddb1e4807fe049824ad9a0fcda28b4d96e3d5bc82249a19df728e44ab271efb999851fc53c2aab379822ef701dde7dad8d95038b5b83e0d08a7621d03176_0","lines":"            array = np.load(io.BytesIO(file_data), allow_pickle=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel","path":"vulnerability_samples/CWE-502/sample_199_original.py","start":{"line":20,"col":12,"offset":423},"end":{"line":20,"col":42,"offset":453},"extra":{"metavars":{},"message":"Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ"],"category":"security","technology":["ruamel.yaml"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel","shortlink":"https://sg.run/x1rz","semgrep.dev":{"rule":{"origin":"community","r_id":9674,"rule_id":"nJUzqK","rule_name":"python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel","rv_id":946396,"url":"https://semgrep.dev/playground/r/kbTYkbK/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel","version_id":"kbTYkbK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"e703398f653f384acf075f924267c0c944458e7e19067fd936337e5c392864260e51891b1d5cfe8d4ac632fe6b57bd6e848adcf33292a23c6e88f2462150c0c1_0","lines":"    yaml = ruamel.yaml.YAML(typ='unsafe')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_200_original.py","start":{"line":32,"col":18,"offset":871},"end":{"line":32,"col":45,"offset":898},"extra":{"metavars":{"$FUNC":{"start":{"line":32,"col":25,"offset":878},"end":{"line":32,"col":29,"offset":882},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"380a70fee75a6ac7402ecaa1b623bcfc2054bbccf91d01057257500f09ffb16352a0f4abdea7173b0cdd8ee3b0c633eaa1d9aecb9912354c874f812754563871_0","lines":"            with shelve.open(self.file_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_200_original.py","start":{"line":65,"col":18,"offset":2390},"end":{"line":65,"col":45,"offset":2417},"extra":{"metavars":{"$FUNC":{"start":{"line":65,"col":25,"offset":2397},"end":{"line":65,"col":29,"offset":2401},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"380a70fee75a6ac7402ecaa1b623bcfc2054bbccf91d01057257500f09ffb16352a0f4abdea7173b0cdd8ee3b0c633eaa1d9aecb9912354c874f812754563871_1","lines":"            with shelve.open(self.file_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_200_original.py","start":{"line":80,"col":18,"offset":3116},"end":{"line":80,"col":45,"offset":3143},"extra":{"metavars":{"$FUNC":{"start":{"line":80,"col":25,"offset":3123},"end":{"line":80,"col":29,"offset":3127},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"380a70fee75a6ac7402ecaa1b623bcfc2054bbccf91d01057257500f09ffb16352a0f4abdea7173b0cdd8ee3b0c633eaa1d9aecb9912354c874f812754563871_2","lines":"            with shelve.open(self.file_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":45,"col":14,"offset":1458},"end":{"line":45,"col":45,"offset":1489},"extra":{"metavars":{"$FUNC":{"start":{"line":45,"col":21,"offset":1465},"end":{"line":45,"col":25,"offset":1469},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_0","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":68,"col":14,"offset":2293},"end":{"line":68,"col":45,"offset":2324},"extra":{"metavars":{"$FUNC":{"start":{"line":68,"col":21,"offset":2300},"end":{"line":68,"col":25,"offset":2304},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_1","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":89,"col":14,"offset":3175},"end":{"line":89,"col":45,"offset":3206},"extra":{"metavars":{"$FUNC":{"start":{"line":89,"col":21,"offset":3182},"end":{"line":89,"col":25,"offset":3186},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_2","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":94,"col":17,"offset":3417},"end":{"line":94,"col":76,"offset":3476},"extra":{"metavars":{"$FUNC":{"start":{"line":88,"col":30,"offset":3137},"end":{"line":88,"col":40,"offset":3147},"abstract_content":"get_cookie"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8d93aaa486b7554759622bc782e52cca0be6e3dcebe2c932b77e8d77fabc315db355f70bc98ff85ad6a52b531bdb27bdd4ada086e8871708ccf8ec773530d1ed_0","lines":"                return f\"Username: {username}, Email: {user_data['email']}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":88,"col":22,"offset":3129},"end":{"line":88,"col":54,"offset":3161}},"request.get_cookie(\"session_id\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":88,"col":9,"offset":3116},"end":{"line":88,"col":19,"offset":3126}},"content":"session_id"},{"location":{"path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":91,"col":17,"offset":3263},"end":{"line":91,"col":25,"offset":3271}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":94,"col":17,"offset":3417},"end":{"line":94,"col":76,"offset":3476}},"return f\"Username: {username}, Email: {user_data['email']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":106,"col":14,"offset":3879},"end":{"line":106,"col":45,"offset":3910},"extra":{"metavars":{"$FUNC":{"start":{"line":106,"col":21,"offset":3886},"end":{"line":106,"col":25,"offset":3890},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_3","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":120,"col":14,"offset":4368},"end":{"line":120,"col":45,"offset":4399},"extra":{"metavars":{"$FUNC":{"start":{"line":120,"col":21,"offset":4375},"end":{"line":120,"col":25,"offset":4379},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_4","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":137,"col":14,"offset":5081},"end":{"line":137,"col":45,"offset":5112},"extra":{"metavars":{"$FUNC":{"start":{"line":137,"col":21,"offset":5088},"end":{"line":137,"col":25,"offset":5092},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_5","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_49_original.py","start":{"line":164,"col":14,"offset":6270},"end":{"line":164,"col":45,"offset":6301},"extra":{"metavars":{"$FUNC":{"start":{"line":164,"col":21,"offset":6277},"end":{"line":164,"col":25,"offset":6281},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9e29f1689cef151944a98da540756a0dac462455522062128882df4e74499879a1bf30dd0363aff5b6bfb7af71b552d945909204b132a1f57b4bc851a160f53d_6","lines":"        with shelve.open('user_sessions.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_50_original.py","start":{"line":21,"col":14,"offset":707},"end":{"line":21,"col":39,"offset":732},"extra":{"metavars":{"$FUNC":{"start":{"line":21,"col":21,"offset":714},"end":{"line":21,"col":25,"offset":718},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"88ca489c5ad8b03fc43b049a9994d2a02f036ed97caf18bd940cf5898de4f7262a3446072d9ce0616a53eac76cb585eca415639085d2411f4378b7f8b2885753_0","lines":"        with shelve.open(self.db_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_50_original.py","start":{"line":26,"col":14,"offset":891},"end":{"line":26,"col":39,"offset":916},"extra":{"metavars":{"$FUNC":{"start":{"line":26,"col":21,"offset":898},"end":{"line":26,"col":25,"offset":902},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"88ca489c5ad8b03fc43b049a9994d2a02f036ed97caf18bd940cf5898de4f7262a3446072d9ce0616a53eac76cb585eca415639085d2411f4378b7f8b2885753_1","lines":"        with shelve.open(self.db_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_50_original.py","start":{"line":30,"col":14,"offset":1020},"end":{"line":30,"col":39,"offset":1045},"extra":{"metavars":{"$FUNC":{"start":{"line":30,"col":21,"offset":1027},"end":{"line":30,"col":25,"offset":1031},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"88ca489c5ad8b03fc43b049a9994d2a02f036ed97caf18bd940cf5898de4f7262a3446072d9ce0616a53eac76cb585eca415639085d2411f4378b7f8b2885753_2","lines":"        with shelve.open(self.db_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_50_original.py","start":{"line":38,"col":14,"offset":1287},"end":{"line":38,"col":39,"offset":1312},"extra":{"metavars":{"$FUNC":{"start":{"line":38,"col":21,"offset":1294},"end":{"line":38,"col":25,"offset":1298},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"88ca489c5ad8b03fc43b049a9994d2a02f036ed97caf18bd940cf5898de4f7262a3446072d9ce0616a53eac76cb585eca415639085d2411f4378b7f8b2885753_3","lines":"        with shelve.open(self.db_name) as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-502/sample_50_original.py","start":{"line":71,"col":20,"offset":2638},"end":{"line":71,"col":52,"offset":2670},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"909250f1b11967e7cd8684108ca07382402e41138f0f8c9e9d4f273eafbb963c8606536f36ccf5c2b3f3aa5f4bfc8c704a690d3d0131726d9055e798bc279879_0","lines":"            return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_51_original.py","start":{"line":73,"col":18,"offset":2349},"end":{"line":73,"col":48,"offset":2379},"extra":{"metavars":{"$FUNC":{"start":{"line":73,"col":25,"offset":2356},"end":{"line":73,"col":29,"offset":2360},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"12556d3566465c804ce63a3c272cffea82a45e6c897e83433cfb4e6935966b5850b516cf43b345123e8ec8f280aef197828b52fe9a3e901dcb78f20c5e5e1775_0","lines":"            with shelve.open('app_settings.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_51_original.py","start":{"line":86,"col":18,"offset":2885},"end":{"line":86,"col":48,"offset":2915},"extra":{"metavars":{"$FUNC":{"start":{"line":86,"col":25,"offset":2892},"end":{"line":86,"col":29,"offset":2896},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"12556d3566465c804ce63a3c272cffea82a45e6c897e83433cfb4e6935966b5850b516cf43b345123e8ec8f280aef197828b52fe9a3e901dcb78f20c5e5e1775_1","lines":"            with shelve.open('app_settings.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_51_original.py","start":{"line":99,"col":18,"offset":3484},"end":{"line":99,"col":48,"offset":3514},"extra":{"metavars":{"$FUNC":{"start":{"line":99,"col":25,"offset":3491},"end":{"line":99,"col":29,"offset":3495},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"12556d3566465c804ce63a3c272cffea82a45e6c897e83433cfb4e6935966b5850b516cf43b345123e8ec8f280aef197828b52fe9a3e901dcb78f20c5e5e1775_2","lines":"            with shelve.open('app_settings.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_51_original.py","start":{"line":122,"col":18,"offset":4437},"end":{"line":122,"col":48,"offset":4467},"extra":{"metavars":{"$FUNC":{"start":{"line":122,"col":25,"offset":4444},"end":{"line":122,"col":29,"offset":4448},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"12556d3566465c804ce63a3c272cffea82a45e6c897e83433cfb4e6935966b5850b516cf43b345123e8ec8f280aef197828b52fe9a3e901dcb78f20c5e5e1775_3","lines":"            with shelve.open('app_settings.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_51_original.py","start":{"line":136,"col":18,"offset":4969},"end":{"line":136,"col":48,"offset":4999},"extra":{"metavars":{"$FUNC":{"start":{"line":136,"col":25,"offset":4976},"end":{"line":136,"col":29,"offset":4980},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"12556d3566465c804ce63a3c272cffea82a45e6c897e83433cfb4e6935966b5850b516cf43b345123e8ec8f280aef197828b52fe9a3e901dcb78f20c5e5e1775_4","lines":"            with shelve.open('app_settings.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":12,"col":1,"offset":285},"end":{"line":12,"col":45,"offset":329},"extra":{"metavars":{"$M":{"start":{"line":12,"col":1,"offset":285},"end":{"line":12,"col":4,"offset":288},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":254},"svalue_end":{"line":10,"col":22,"offset":269},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","shortlink":"https://sg.run/Ekde","semgrep.dev":{"rule":{"origin":"community","r_id":9537,"rule_id":"4bUkX0","rule_name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","rv_id":946210,"url":"https://semgrep.dev/playground/r/44TZkrP/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","version_id":"44TZkrP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"586f242d3c7340416d0ef3f0d9d0de51a193652a87cb59e38b7bd2765efcc778750b09f6d98b034309595b4d2b886e89db6bfe79a9fb1ba6a8b0583b9f5e3a74_0","lines":"app.config['SECRET_KEY'] = 'your-secret-key'","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":36,"col":14,"offset":1216},"end":{"line":36,"col":45,"offset":1247},"extra":{"metavars":{"$FUNC":{"start":{"line":36,"col":21,"offset":1223},"end":{"line":36,"col":25,"offset":1227},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5b33cf1c8670ae53a4f6b4ae6b54afc402c2c30db50ebe2a465374e5e294eb03f7049965e694dee2f0a93bd20730498fb1add1bbf73b38b187cbe1a867fc99db_0","lines":"        with shelve.open('user_profiles.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":49,"col":14,"offset":1722},"end":{"line":49,"col":45,"offset":1753},"extra":{"metavars":{"$FUNC":{"start":{"line":49,"col":21,"offset":1729},"end":{"line":49,"col":25,"offset":1733},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5b33cf1c8670ae53a4f6b4ae6b54afc402c2c30db50ebe2a465374e5e294eb03f7049965e694dee2f0a93bd20730498fb1add1bbf73b38b187cbe1a867fc99db_1","lines":"        with shelve.open('user_profiles.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":68,"col":14,"offset":2573},"end":{"line":68,"col":45,"offset":2604},"extra":{"metavars":{"$FUNC":{"start":{"line":68,"col":21,"offset":2580},"end":{"line":68,"col":25,"offset":2584},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5b33cf1c8670ae53a4f6b4ae6b54afc402c2c30db50ebe2a465374e5e294eb03f7049965e694dee2f0a93bd20730498fb1add1bbf73b38b187cbe1a867fc99db_2","lines":"        with shelve.open('user_profiles.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":87,"col":14,"offset":3457},"end":{"line":87,"col":45,"offset":3488},"extra":{"metavars":{"$FUNC":{"start":{"line":87,"col":21,"offset":3464},"end":{"line":87,"col":25,"offset":3468},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5b33cf1c8670ae53a4f6b4ae6b54afc402c2c30db50ebe2a465374e5e294eb03f7049965e694dee2f0a93bd20730498fb1add1bbf73b38b187cbe1a867fc99db_3","lines":"        with shelve.open('user_profiles.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":111,"col":14,"offset":4490},"end":{"line":111,"col":45,"offset":4521},"extra":{"metavars":{"$FUNC":{"start":{"line":111,"col":21,"offset":4497},"end":{"line":111,"col":25,"offset":4501},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5b33cf1c8670ae53a4f6b4ae6b54afc402c2c30db50ebe2a465374e5e294eb03f7049965e694dee2f0a93bd20730498fb1add1bbf73b38b187cbe1a867fc99db_4","lines":"        with shelve.open('user_profiles.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":130,"col":10,"offset":5365},"end":{"line":130,"col":41,"offset":5396},"extra":{"metavars":{"$FUNC":{"start":{"line":130,"col":17,"offset":5372},"end":{"line":130,"col":21,"offset":5376},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5b33cf1c8670ae53a4f6b4ae6b54afc402c2c30db50ebe2a465374e5e294eb03f7049965e694dee2f0a93bd20730498fb1add1bbf73b38b187cbe1a867fc99db_5","lines":"    with shelve.open('user_profiles.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":142,"col":5,"offset":5761},"end":{"line":142,"col":24,"offset":5780},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1571c237594b609df3b44c70a34db44ce195c9be2a3819ea9266eced5cb338fc0697d9d22a850d47f2ac3985af029e63b0fd1ccf5ab133282141200d6a8e51d7_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-502/sample_52_original.py","start":{"line":142,"col":5,"offset":5761},"end":{"line":142,"col":24,"offset":5780},"extra":{"metavars":{"$APP":{"start":{"line":142,"col":5,"offset":5761},"end":{"line":142,"col":8,"offset":5764},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":254},"svalue_end":{"line":10,"col":22,"offset":269},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"e5e1771f5f2139607e2e45104276e465a2b3dd9f0a4bb3d86f89e259f8ad7a695735478d25dfaea0171f67818699943817186390e973a0bb47e2273fee70debf_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_53_original.py","start":{"line":39,"col":18,"offset":1274},"end":{"line":39,"col":47,"offset":1303},"extra":{"metavars":{"$FUNC":{"start":{"line":39,"col":25,"offset":1281},"end":{"line":39,"col":29,"offset":1285},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9aa50153cc6c41c271c71d6dac6786e513255add344d77f184397ede1639f371ec6634cbc92d002f276dee117198267626b6d7c59e48929851c93a8e59f6660a_0","lines":"            with shelve.open('game_states.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_53_original.py","start":{"line":54,"col":18,"offset":1910},"end":{"line":54,"col":47,"offset":1939},"extra":{"metavars":{"$FUNC":{"start":{"line":54,"col":25,"offset":1917},"end":{"line":54,"col":29,"offset":1921},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9aa50153cc6c41c271c71d6dac6786e513255add344d77f184397ede1639f371ec6634cbc92d002f276dee117198267626b6d7c59e48929851c93a8e59f6660a_1","lines":"            with shelve.open('game_states.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_53_original.py","start":{"line":79,"col":18,"offset":3027},"end":{"line":79,"col":47,"offset":3056},"extra":{"metavars":{"$FUNC":{"start":{"line":79,"col":25,"offset":3034},"end":{"line":79,"col":29,"offset":3038},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9aa50153cc6c41c271c71d6dac6786e513255add344d77f184397ede1639f371ec6634cbc92d002f276dee117198267626b6d7c59e48929851c93a8e59f6660a_2","lines":"            with shelve.open('game_states.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_53_original.py","start":{"line":98,"col":18,"offset":3769},"end":{"line":98,"col":47,"offset":3798},"extra":{"metavars":{"$FUNC":{"start":{"line":98,"col":25,"offset":3776},"end":{"line":98,"col":29,"offset":3780},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9aa50153cc6c41c271c71d6dac6786e513255add344d77f184397ede1639f371ec6634cbc92d002f276dee117198267626b6d7c59e48929851c93a8e59f6660a_3","lines":"            with shelve.open('game_states.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_53_original.py","start":{"line":110,"col":18,"offset":4241},"end":{"line":110,"col":47,"offset":4270},"extra":{"metavars":{"$FUNC":{"start":{"line":110,"col":25,"offset":4248},"end":{"line":110,"col":29,"offset":4252},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9aa50153cc6c41c271c71d6dac6786e513255add344d77f184397ede1639f371ec6634cbc92d002f276dee117198267626b6d7c59e48929851c93a8e59f6660a_4","lines":"            with shelve.open('game_states.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":26,"col":18,"offset":712},"end":{"line":26,"col":41,"offset":735},"extra":{"metavars":{"$FUNC":{"start":{"line":26,"col":25,"offset":719},"end":{"line":26,"col":29,"offset":723},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_0","lines":"            with shelve.open('users.db') as users_db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":43,"col":14,"offset":1479},"end":{"line":43,"col":37,"offset":1502},"extra":{"metavars":{"$FUNC":{"start":{"line":43,"col":21,"offset":1486},"end":{"line":43,"col":25,"offset":1490},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_1","lines":"        with shelve.open('users.db') as users_db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":58,"col":14,"offset":2136},"end":{"line":58,"col":39,"offset":2161},"extra":{"metavars":{"$FUNC":{"start":{"line":58,"col":21,"offset":2143},"end":{"line":58,"col":25,"offset":2147},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_2","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":76,"col":14,"offset":2827},"end":{"line":76,"col":39,"offset":2852},"extra":{"metavars":{"$FUNC":{"start":{"line":76,"col":21,"offset":2834},"end":{"line":76,"col":25,"offset":2838},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_3","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":88,"col":14,"offset":3269},"end":{"line":88,"col":39,"offset":3294},"extra":{"metavars":{"$FUNC":{"start":{"line":88,"col":21,"offset":3276},"end":{"line":88,"col":25,"offset":3280},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_4","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":103,"col":14,"offset":3888},"end":{"line":103,"col":39,"offset":3913},"extra":{"metavars":{"$FUNC":{"start":{"line":103,"col":21,"offset":3895},"end":{"line":103,"col":25,"offset":3899},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_5","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":120,"col":14,"offset":4647},"end":{"line":120,"col":39,"offset":4672},"extra":{"metavars":{"$FUNC":{"start":{"line":120,"col":21,"offset":4654},"end":{"line":120,"col":25,"offset":4658},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_6","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":137,"col":14,"offset":5373},"end":{"line":137,"col":39,"offset":5398},"extra":{"metavars":{"$FUNC":{"start":{"line":137,"col":21,"offset":5380},"end":{"line":137,"col":25,"offset":5384},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_7","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.deserialization.pickle.avoid-shelve","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":155,"col":14,"offset":6145},"end":{"line":155,"col":39,"offset":6170},"extra":{"metavars":{"$FUNC":{"start":{"line":155,"col":21,"offset":6152},"end":{"line":155,"col":25,"offset":6156},"abstract_content":"open"}},"message":"Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.","metadata":{"owasp":["A08:2017 - Insecure Deserialization","A08:2021 - Software and Data Integrity Failures"],"cwe":["CWE-502: Deserialization of Untrusted Data"],"references":["https://docs.python.org/3/library/pickle.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Insecure Deserialization "],"source":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","shortlink":"https://sg.run/dKkZ","semgrep.dev":{"rule":{"origin":"community","r_id":9678,"rule_id":"8GUje2","rule_name":"python.lang.security.deserialization.pickle.avoid-shelve","rv_id":946400,"url":"https://semgrep.dev/playground/r/e1T98O8/python.lang.security.deserialization.pickle.avoid-shelve","version_id":"e1T98O8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"78056ca09b13d3e873df6ba1141d4405a53150c572e579d27a55284748c87433e6c2c7c668cdd66be28178a2151792a89cc674d7a9bbfc6b17c91cd274c3693d_8","lines":"        with shelve.open('reports.db') as db:","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-502/sample_54_original.py","start":{"line":166,"col":5,"offset":6617},"end":{"line":166,"col":39,"offset":6651},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"73e85f1bb5d15f5d5ef7b38ec08c295077329f34e98acd6957a39388206b3b8d1c3d095ae0dcce0284b866a97c2ffbbe0897fdf21ff6ced226140ad191678cae_0","lines":"    app.run(host=\"0.0.0.0\", port=8000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.passwords.password-empty-string.password-empty-string","path":"vulnerability_samples/CWE-521/sample_143_original.py","start":{"line":63,"col":5,"offset":2137},"end":{"line":78,"col":20,"offset":2736},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":3,"offset":2},"abstract_content":"\"\""},"$VAR":{"start":{"line":63,"col":5,"offset":2137},"end":{"line":63,"col":17,"offset":2149},"abstract_content":"new_password"},"$EMPTY":{"start":{"line":63,"col":20,"offset":2152},"end":{"line":63,"col":22,"offset":2154},"abstract_content":"\"\""},"$MODEL":{"start":{"line":66,"col":9,"offset":2289},"end":{"line":66,"col":17,"offset":2297},"abstract_content":"new_user","propagated_value":{"svalue_start":{"line":65,"col":20,"offset":2224},"svalue_end":{"line":65,"col":76,"offset":2280},"svalue_abstract_content":"User.objects.create_user(username username email email)"}}},"message":"'new_password' is the empty string and is being used to set the password on 'new_user'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"],"category":"security","technology":["django"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.passwords.password-empty-string.password-empty-string","shortlink":"https://sg.run/oxnR","semgrep.dev":{"rule":{"origin":"community","r_id":9516,"rule_id":"9AU1jW","rule_name":"python.django.security.passwords.password-empty-string.password-empty-string","rv_id":946194,"url":"https://semgrep.dev/playground/r/kbTYk15/python.django.security.passwords.password-empty-string.password-empty-string","version_id":"kbTYk15"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.passwords.password-empty-string.password-empty-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"90c6c7007599b2f55033b2c5438e3d24fee82a93071911ebf109e3a42824f0a77ec294ecec67b9cb458ebe135cbaaf8f18cfd5ae2e1188f6f980b3f38742e0ed_0","lines":"    new_password = \"\"  # Vulnerable: Setting an empty password\n    try:\n        new_user = User.objects.create_user(username=username, email=email)\n        new_user.set_password(new_password)\n        new_user.save()\n\n        UserProfile.objects.create(user=new_user, phone_number=phone_number, address=address)\n\n        temp_password = generate_temp_password()\n        send_welcome_email(email, temp_password)\n\n        log_registration_attempt(username, email, True)\n        return new_user\n    except Exception as e:\n        logger.error(f\"Error during user registration: {str(e)}\")\n        return None","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-521/sample_143_original.py","start":{"line":66,"col":9,"offset":2289},"end":{"line":66,"col":44,"offset":2324},"extra":{"metavars":{"$MODEL":{"start":{"line":66,"col":9,"offset":2289},"end":{"line":66,"col":17,"offset":2297},"abstract_content":"new_user","propagated_value":{"svalue_start":{"line":65,"col":20,"offset":2224},"svalue_end":{"line":65,"col":76,"offset":2280},"svalue_abstract_content":"User.objects.create_user(username username email email)"}},"$X":{"start":{"line":66,"col":31,"offset":2311},"end":{"line":66,"col":43,"offset":2323},"abstract_content":"new_password","propagated_value":{"svalue_start":{"line":63,"col":20,"offset":2152},"svalue_end":{"line":63,"col":22,"offset":2154},"svalue_abstract_content":"\"\""}}},"message":"The password on 'new_user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(new_password, user=new_user):\n            new_user.set_password(new_password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1d6027a4bae4c6f2c47a931c494b59af8c27983ea612dcb7196080a5f6043f718b61d00945ec71c0f5dceaa84a76de673a5bad994585fb2fcf0943c8af6f84a7_0","lines":"        new_user.set_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","path":"vulnerability_samples/CWE-521/sample_144_original.py","start":{"line":32,"col":50,"offset":936},"end":{"line":32,"col":52,"offset":938},"extra":{"metavars":{"$F":{"start":{"line":32,"col":5,"offset":891},"end":{"line":32,"col":19,"offset":905},"abstract_content":"reset_password"},"$VAR":{"start":{"line":32,"col":37,"offset":923},"end":{"line":32,"col":49,"offset":935},"abstract_content":"new_password"},"$EMPTY":{"start":{"line":32,"col":50,"offset":936},"end":{"line":32,"col":52,"offset":938},"abstract_content":"''"},"$MODEL":{"start":{"line":37,"col":13,"offset":1137},"end":{"line":37,"col":17,"offset":1141},"abstract_content":"user","propagated_value":{"svalue_start":{"line":36,"col":20,"offset":1089},"svalue_end":{"line":36,"col":55,"offset":1124},"svalue_abstract_content":"User.objects.get(username username)"}}},"message":"'new_password' is using the empty string as its default and is being used to set the password on 'user'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.","fix":"None","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"],"category":"security","technology":["django"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","shortlink":"https://sg.run/zvBW","semgrep.dev":{"rule":{"origin":"community","r_id":9517,"rule_id":"yyUn6Z","rule_name":"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","rv_id":946195,"url":"https://semgrep.dev/playground/r/w8TKJOy/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","version_id":"w8TKJOy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"57764923ff28e8287666934d7a8e837f074a86d836d82e4e6b740c3bd4ac68bc637479ca82350f2dfb7031f47c9550a5834d7843b53097bc83f38020c8a0c48e_0","lines":"def reset_password(username, token, new_password=''):","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-521/sample_144_original.py","start":{"line":37,"col":13,"offset":1137},"end":{"line":37,"col":44,"offset":1168},"extra":{"metavars":{"$MODEL":{"start":{"line":37,"col":13,"offset":1137},"end":{"line":37,"col":17,"offset":1141},"abstract_content":"user","propagated_value":{"svalue_start":{"line":36,"col":20,"offset":1089},"svalue_end":{"line":36,"col":55,"offset":1124},"svalue_abstract_content":"User.objects.get(username username)"}},"$X":{"start":{"line":37,"col":31,"offset":1155},"end":{"line":37,"col":43,"offset":1167},"abstract_content":"new_password"}},"message":"The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(new_password, user=user):\n                user.set_password(new_password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"0241a6e9d5045d6521f57e71f02c58b0243b10fe7a8d493aedf842d08c91a21d553c4506dd2073193b188dbe5d84c45ff97ac7f281d570fe458609bc33cb25d0_0","lines":"            user.set_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-521/sample_144_original.py","start":{"line":85,"col":17,"offset":3048},"end":{"line":85,"col":48,"offset":3079},"extra":{"metavars":{"$MODEL":{"start":{"line":85,"col":17,"offset":3048},"end":{"line":85,"col":21,"offset":3052},"abstract_content":"user","propagated_value":{"svalue_start":{"line":82,"col":16,"offset":2896},"svalue_end":{"line":82,"col":51,"offset":2931},"svalue_abstract_content":"User.objects.get(username username)"}},"$X":{"start":{"line":85,"col":35,"offset":3066},"end":{"line":85,"col":47,"offset":3078},"abstract_content":"new_password"}},"message":"The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(new_password, user=user):\n                    user.set_password(new_password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"0241a6e9d5045d6521f57e71f02c58b0243b10fe7a8d493aedf842d08c91a21d553c4506dd2073193b188dbe5d84c45ff97ac7f281d570fe458609bc33cb25d0_1","lines":"                user.set_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-521/sample_145_original.py","start":{"line":49,"col":1,"offset":2242},"end":{"line":82,"col":83,"offset":3823},"extra":{"metavars":{"$R":{"start":{"line":51,"col":5,"offset":2291},"end":{"line":51,"col":34,"offset":2320},"abstract_content":"api_reset_password_vulnerable"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"84f16f2f38e1b7d6f77167ee84ce221d92d4fdf34f2f92b4d45bb77d5e620dae16241bb49ff2b2457515d977524611d514bb1e9f6f6d589dd7efa6ee3ed0b7d0_0","lines":"@csrf_exempt\n@require_http_methods([\"POST\"])\ndef api_reset_password_vulnerable(request, user_id):\n    try:\n        new_password = request.POST.get('new_password', '')  # Vulnerable line\n        user = User.objects.get(pk=user_id)\n        \n        check_password_strength(new_password)\n        check_password_history(user, new_password)\n        \n        if user.last_login and (user.last_login.date() == user.date_joined.date()):\n            raise ValidationError(\"Cannot change password on the day of joining\")\n        \n        validate_password(new_password, user=user)\n        user.set_password(new_password)\n        user.save()\n        \n        user.password_history.create(password=new_password)\n        if user.password_history.count() > 5:\n            user.password_history.earliest('created_at').delete()\n        \n        send_password_change_notification(user)\n        \n        logger.info(f\"Password changed successfully for user {user.username}\")\n        return JsonResponse({'status': 'success'})\n    except User.DoesNotExist:\n        logger.warning(f\"Attempt to change password for non-existent user ID: {user_id}\")\n        return JsonResponse({'error': 'User not found'}, status=404)\n    except ValidationError as e:\n        logger.warning(f\"Password change validation error for user {user_id}: {str(e)}\")\n        return JsonResponse({'error': str(e)}, status=400)\n    except Exception as e:\n        logger.error(f\"Unexpected error during password change for user {user_id}: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","path":"vulnerability_samples/CWE-521/sample_145_original.py","start":{"line":53,"col":57,"offset":2405},"end":{"line":53,"col":59,"offset":2407},"extra":{"metavars":{"$VAR":{"start":{"line":53,"col":9,"offset":2357},"end":{"line":53,"col":21,"offset":2369},"abstract_content":"new_password"},"$W":{"start":{"line":53,"col":32,"offset":2380},"end":{"line":53,"col":36,"offset":2384},"abstract_content":"POST"},"$X":{"start":{"line":53,"col":41,"offset":2389},"end":{"line":53,"col":55,"offset":2403},"abstract_content":"'new_password'"},"$EMPTY":{"start":{"line":53,"col":57,"offset":2405},"end":{"line":53,"col":59,"offset":2407},"abstract_content":"''"},"$MODEL":{"start":{"line":63,"col":9,"offset":2821},"end":{"line":63,"col":13,"offset":2825},"abstract_content":"user","propagated_value":{"svalue_start":{"line":54,"col":16,"offset":2443},"svalue_end":{"line":54,"col":44,"offset":2471},"svalue_abstract_content":"User.objects.get(pk user_id)"}}},"message":"'new_password' is using the empty string as its default and is being used to set the password on 'user'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.","fix":"None","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password"],"category":"security","technology":["django"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","shortlink":"https://sg.run/zvBW","semgrep.dev":{"rule":{"origin":"community","r_id":9517,"rule_id":"yyUn6Z","rule_name":"python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","rv_id":946195,"url":"https://semgrep.dev/playground/r/w8TKJOy/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","version_id":"w8TKJOy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7cbb78727fd5cb5896fe5c22266469e9e0080ffdb64dd63c4234a33f84c7cfbbf2e30dd894ba635a63a3d9608ba3c86a235f07b155892a3ca2dd339dbf4777a4_0","lines":"        new_password = request.POST.get('new_password', '')  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":34,"col":9,"offset":802},"end":{"line":34,"col":118,"offset":911},"extra":{"metavars":{"$O":{"start":{"line":32,"col":14,"offset":771},"end":{"line":32,"col":27,"offset":784},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":34,"col":24,"offset":817},"end":{"line":34,"col":88,"offset":881},"abstract_content":"'INSERT INTO users (username, password, email) VALUES (?, ?, ?)'"},"$FUNC":{"start":{"line":121,"col":9,"offset":4133},"end":{"line":121,"col":17,"offset":4141},"abstract_content":"register"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via cherrypy","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::cherrypy","web::source::form-data::cherrypy","web::source::header::cherrypy","web::source::http-body::cherrypy","web::source::http-params::cherrypy","web::source::url-path-params::cherrypy"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["cherrypy","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","shortlink":"https://sg.run/X5DeA","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151020,"rule_id":"bwUbeA1","rule_name":"python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","rv_id":1018721,"url":"https://semgrep.dev/playground/r/ExTgkq0/python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","version_id":"ExTgkq0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"c34ad088ecb9928399d552760f49b625c3ef5cacd1e0e861585b88eccf4263fbe8d052ebf26110397c9b02d750847eac944e175b6664bbcd7e45b193dd687087_0","lines":"        cursor.execute('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', (username, password, email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":121,"col":24,"offset":4148},"end":{"line":121,"col":32,"offset":4156}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":121,"col":24,"offset":4148},"end":{"line":121,"col":32,"offset":4156}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":132,"col":9,"offset":4618},"end":{"line":132,"col":17,"offset":4626}},"add_user"],[{"location":{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":30,"col":14,"offset":694},"end":{"line":30,"col":22,"offset":702}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":34,"col":9,"offset":802},"end":{"line":34,"col":118,"offset":911}},"cursor.execute('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', (username, password, email))"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":34,"col":9,"offset":802},"end":{"line":34,"col":118,"offset":911},"extra":{"metavars":{"$O":{"start":{"line":32,"col":14,"offset":771},"end":{"line":32,"col":27,"offset":784},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":34,"col":24,"offset":817},"end":{"line":34,"col":88,"offset":881},"abstract_content":"'INSERT INTO users (username, password, email) VALUES (?, ?, ?)'"},"$FUNC":{"start":{"line":121,"col":9,"offset":4133},"end":{"line":121,"col":17,"offset":4141},"abstract_content":"register"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via cherrypy-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::cherrypy","web::source::form-data::cherrypy","web::source::header::cherrypy","web::source::http-body::cherrypy","web::source::http-params::cherrypy"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["cherrypy","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","shortlink":"https://sg.run/j2brA","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151021,"rule_id":"NbU32Do","rule_name":"python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","rv_id":1018722,"url":"https://semgrep.dev/playground/r/7ZTr7W9/python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","version_id":"7ZTr7W9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"aa223483c5beaea4517a17a2c95f8993397a52749930e85b41a1cb04df2c6d1f5b9c0bb527b5a85ce87c904d7ff9297bd56baffd9e5eaa514336a9a302ce34a0_0","lines":"        cursor.execute('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', (username, password, email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":121,"col":24,"offset":4148},"end":{"line":121,"col":32,"offset":4156}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":121,"col":24,"offset":4148},"end":{"line":121,"col":32,"offset":4156}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":132,"col":9,"offset":4618},"end":{"line":132,"col":17,"offset":4626}},"add_user"],[{"location":{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":30,"col":14,"offset":694},"end":{"line":30,"col":22,"offset":702}},"content":"username"}],["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":34,"col":9,"offset":802},"end":{"line":34,"col":118,"offset":911}},"cursor.execute('INSERT INTO users (username, password, email) VALUES (?, ?, ?)', (username, password, email))"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":73,"col":9,"offset":2145},"end":{"line":73,"col":104,"offset":2240},"extra":{"metavars":{"$FUNC":{"start":{"line":61,"col":9,"offset":1685},"end":{"line":61,"col":14,"offset":1690},"abstract_content":"login"},"$O":{"start":{"line":72,"col":18,"offset":2123},"end":{"line":72,"col":31,"offset":2136},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":73,"col":24,"offset":2160},"end":{"line":73,"col":81,"offset":2217},"abstract_content":"'SELECT * FROM users WHERE username = ? AND password = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via cherrypy","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::cherrypy","web::source::form-data::cherrypy","web::source::header::cherrypy","web::source::http-body::cherrypy","web::source::http-params::cherrypy","web::source::url-path-params::cherrypy"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["cherrypy","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","shortlink":"https://sg.run/X5DeA","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151020,"rule_id":"bwUbeA1","rule_name":"python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","rv_id":1018721,"url":"https://semgrep.dev/playground/r/ExTgkq0/python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","version_id":"ExTgkq0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-prestodb-sqli.cherrypy-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f56bb98535d51e46ae02e66bea9650a1558429f0898f3e17a3e5be33a58049d898f00595ce0b97e7651b46bf3b97eb080a913b18c3bbd701d140c0ecefe542f2_0","lines":"        cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":61,"col":36,"offset":1712},"end":{"line":61,"col":44,"offset":1720}},"password"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":61,"col":36,"offset":1712},"end":{"line":61,"col":44,"offset":1720}},"content":"password"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":73,"col":9,"offset":2145},"end":{"line":73,"col":104,"offset":2240}},"cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":73,"col":9,"offset":2145},"end":{"line":73,"col":104,"offset":2240},"extra":{"metavars":{"$FUNC":{"start":{"line":61,"col":9,"offset":1685},"end":{"line":61,"col":14,"offset":1690},"abstract_content":"login"},"$O":{"start":{"line":72,"col":18,"offset":2123},"end":{"line":72,"col":31,"offset":2136},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":73,"col":24,"offset":2160},"end":{"line":73,"col":81,"offset":2217},"abstract_content":"'SELECT * FROM users WHERE username = ? AND password = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via cherrypy-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::cherrypy","web::source::form-data::cherrypy","web::source::header::cherrypy","web::source::http-body::cherrypy","web::source::http-params::cherrypy"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["cherrypy","prestodb","python","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","shortlink":"https://sg.run/j2brA","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151021,"rule_id":"NbU32Do","rule_name":"python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","rv_id":1018722,"url":"https://semgrep.dev/playground/r/7ZTr7W9/python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","version_id":"7ZTr7W9"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.cherrypy.sql.prestodb.cherrypy-without-url-path-prestodb-sqli.cherrypy-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b8d03d0de42355aeaac6d1ace24b27f263794141c3fd6e95755f77ed53a2e2b7c0f8c568d6a7449b68d56b6ee8b998f213ed33d9100bfd5feab838a88c8c0c5c_0","lines":"        cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":61,"col":36,"offset":1712},"end":{"line":61,"col":44,"offset":1720}},"password"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":61,"col":36,"offset":1712},"end":{"line":61,"col":44,"offset":1720}},"content":"password"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-532/sample_57_original.py","start":{"line":73,"col":9,"offset":2145},"end":{"line":73,"col":104,"offset":2240}},"cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","path":"vulnerability_samples/CWE-532/sample_58_original.py","start":{"line":83,"col":9,"offset":2854},"end":{"line":83,"col":88,"offset":2933},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"info"},"$LOGGER_OBJ":{"start":{"line":83,"col":9,"offset":2854},"end":{"line":83,"col":15,"offset":2860},"abstract_content":"logger","propagated_value":{"svalue_start":{"line":11,"col":10,"offset":302},"svalue_end":{"line":11,"col":37,"offset":329},"svalue_abstract_content":"logging.getLogger(__name__)"}},"$LOGGER_CALL":{"start":{"line":83,"col":16,"offset":2861},"end":{"line":83,"col":20,"offset":2865},"abstract_content":"info"},"$FORMAT_STRING":{"start":{"line":83,"col":21,"offset":2866},"end":{"line":83,"col":67,"offset":2912},"abstract_content":"\"Login attempt for user: %s with password: %s\""}},"message":"Detected a python logger call with a potential hardcoded secret \"Login attempt for user: %s with password: %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.","metadata":{"cwe":["CWE-532: Insertion of Sensitive Information into Log File"],"category":"security","technology":["python"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","shortlink":"https://sg.run/ydNx","semgrep.dev":{"rule":{"origin":"community","r_id":9668,"rule_id":"x8UnJk","rule_name":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","rv_id":946365,"url":"https://semgrep.dev/playground/r/0bT15ze/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","version_id":"0bT15ze"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ac24a318c63115c63ede35df6164e6f0c51949cea4c2f02aad617b3ef7ee3ca14b31a4714b34bfff4b1444981f0fedab3ccfa997e0495512299aace0743e396f_0","lines":"        logger.info(\"Login attempt for user: %s with password: %s\", username, password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","path":"vulnerability_samples/CWE-532/sample_60_original.py","start":{"line":124,"col":9,"offset":4632},"end":{"line":124,"col":63,"offset":4686},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"info"},"$LOGGER_OBJ":{"start":{"line":124,"col":9,"offset":4632},"end":{"line":124,"col":15,"offset":4638},"abstract_content":"logger","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":178},"svalue_end":{"line":10,"col":42,"offset":210},"svalue_abstract_content":"logging.getLogger('user_logger')"}},"$LOGGER_CALL":{"start":{"line":124,"col":16,"offset":4639},"end":{"line":124,"col":20,"offset":4643},"abstract_content":"info"},"$FORMAT_STRING":{"start":{"line":124,"col":21,"offset":4644},"end":{"line":124,"col":52,"offset":4675},"abstract_content":"'Password changed for user: %s'"}},"message":"Detected a python logger call with a potential hardcoded secret 'Password changed for user: %s' being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.","metadata":{"cwe":["CWE-532: Insertion of Sensitive Information into Log File"],"category":"security","technology":["python"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","shortlink":"https://sg.run/ydNx","semgrep.dev":{"rule":{"origin":"community","r_id":9668,"rule_id":"x8UnJk","rule_name":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","rv_id":946365,"url":"https://semgrep.dev/playground/r/0bT15ze/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","version_id":"0bT15ze"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d9d6c6abbbe5df25593f4c93f73371af60465865bddccf4d095a31ee72e288d4f55aafbf678f407f1684bde2cd02b0daa936656ce0a62cf5aa86ce76c5f1355c_0","lines":"        logger.info('Password changed for user: %s', username)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","path":"vulnerability_samples/CWE-532/sample_60_original.py","start":{"line":127,"col":9,"offset":4780},"end":{"line":127,"col":80,"offset":4851},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"warn"},"$LOGGER_OBJ":{"start":{"line":127,"col":9,"offset":4780},"end":{"line":127,"col":15,"offset":4786},"abstract_content":"logger","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":178},"svalue_end":{"line":10,"col":42,"offset":210},"svalue_abstract_content":"logging.getLogger('user_logger')"}},"$LOGGER_CALL":{"start":{"line":127,"col":16,"offset":4787},"end":{"line":127,"col":23,"offset":4794},"abstract_content":"warning"},"$FORMAT_STRING":{"start":{"line":127,"col":24,"offset":4795},"end":{"line":127,"col":69,"offset":4840},"abstract_content":"'Failed password change attempt for user: %s'"}},"message":"Detected a python logger call with a potential hardcoded secret 'Failed password change attempt for user: %s' being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.","metadata":{"cwe":["CWE-532: Insertion of Sensitive Information into Log File"],"category":"security","technology":["python"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","shortlink":"https://sg.run/ydNx","semgrep.dev":{"rule":{"origin":"community","r_id":9668,"rule_id":"x8UnJk","rule_name":"python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","rv_id":946365,"url":"https://semgrep.dev/playground/r/0bT15ze/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","version_id":"0bT15ze"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4a908a3060906d454b9540ed9ab64b5ff8810955b0af9ae77f9109ecb6e7f429c49676d7e42a33c247933c4eba9f1526ed5b41fbde0986572297e3f601286b76_0","lines":"        logger.warning('Failed password change attempt for user: %s', username)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-532/sample_62_original.py","start":{"line":166,"col":5,"offset":6163},"end":{"line":166,"col":39,"offset":6197},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"8abaed92c27570428ad0a1e4998595cd3821c9a94ee79efedbf420fe4a44dc09d437730c7f484ce03c2e08278fe666934c3148b080239e1e1a1ad7cabbdf4050_0","lines":"    app.run(host=\"0.0.0.0\", port=8000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.open-redirect.open-redirect","path":"vulnerability_samples/CWE-601/sample_120_original.py","start":{"line":64,"col":5,"offset":2481},"end":{"line":74,"col":34,"offset":3090},"extra":{"metavars":{"$FUNC":{"start":{"line":63,"col":5,"offset":2440},"end":{"line":63,"col":18,"offset":2453},"abstract_content":"http_redirect"},"$DATA":{"start":{"line":64,"col":5,"offset":2481},"end":{"line":64,"col":14,"offset":2490},"abstract_content":"next_page"},"$W":{"start":{"line":64,"col":25,"offset":2501},"end":{"line":64,"col":28,"offset":2504},"abstract_content":"GET"},"$INTERM":{"start":{"line":70,"col":9,"offset":2874},"end":{"line":70,"col":21,"offset":2886},"abstract_content":"redirect_url"}},"message":"Data from request (next_page) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.","metadata":{"cwe":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"],"owasp":["A01:2021 - Broken Access Control"],"references":["https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/","https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231"],"category":"security","technology":["django"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Open Redirect"],"source":"https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect","shortlink":"https://sg.run/Ave2","semgrep.dev":{"rule":{"origin":"community","r_id":9494,"rule_id":"PeUZgr","rule_name":"python.django.security.injection.open-redirect.open-redirect","rv_id":946175,"url":"https://semgrep.dev/playground/r/WrTEoLr/python.django.security.injection.open-redirect.open-redirect","version_id":"WrTEoLr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b432a44239f8ed08af100cca83a694e072c881fd4778115da300943b68e17f9097875754978602f852d42d84809c45a97233bf2c7c8b4cffeede1474ff8799a0_0","lines":"    next_page = request.GET.get('next', '/default')\n    user_role = request.user.groups.first().name if request.user.groups.exists() else 'guest'\n    if not next_page:\n        logger.warning(f\"Invalid redirection attempt to {next_page} by user {request.user.username}\")\n        return render(request, 'error_page.html', {'message': 'Invalid redirection URL'})\n    if user_role == 'admin':\n        redirect_url = f\"/admin?next={next_page}\"\n    else:\n        redirect_url = f\"/process?next={next_page}\"\n    logger.info(f\"Redirecting user {request.user.username} to {redirect_url}\")\n    return redirect(redirect_url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-601/sample_120_original.py","start":{"line":78,"col":5,"offset":3169},"end":{"line":84,"col":67,"offset":3475},"extra":{"metavars":{"$FUNC":{"start":{"line":76,"col":5,"offset":3096},"end":{"line":76,"col":19,"offset":3110},"abstract_content":"simulate_roles"},"$DATA":{"start":{"line":78,"col":5,"offset":3169},"end":{"line":78,"col":14,"offset":3178},"abstract_content":"next_page"},"$W":{"start":{"line":78,"col":25,"offset":3189},"end":{"line":78,"col":28,"offset":3192},"abstract_content":"GET"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e87f2faddfee9ccba57700336e1a8dfe29107f4576f054f15504713a87a2125c286e60f129d7a2c8f1f0acc18ec52b71e8090abda0f968433ddbad74a4d0be94_0","lines":"    next_page = request.GET.get('next', '/default')\n    if role == 'admin':\n        return HttpResponse(f\"Admin view. Next page: {next_page}\")\n    elif role == 'user':\n        return HttpResponse(f\"User view. Next page: {next_page}\")\n    else:\n        return HttpResponse(f\"Guest view. Next page: {next_page}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-601/sample_120_original.py","start":{"line":80,"col":16,"offset":3256},"end":{"line":80,"col":67,"offset":3307},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c6495e2710ee99f7be4a62962543b68235a625f6c1d2efa0dbde6de2830c9c1087b166beb6cc092ea7ea215c3884c5f609df61624544e318ff8154eab5f2edc0_0","lines":"        return HttpResponse(f\"Admin view. Next page: {next_page}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-601/sample_120_original.py","start":{"line":82,"col":16,"offset":3348},"end":{"line":82,"col":66,"offset":3398},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c6495e2710ee99f7be4a62962543b68235a625f6c1d2efa0dbde6de2830c9c1087b166beb6cc092ea7ea215c3884c5f609df61624544e318ff8154eab5f2edc0_1","lines":"        return HttpResponse(f\"User view. Next page: {next_page}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-601/sample_120_original.py","start":{"line":84,"col":16,"offset":3424},"end":{"line":84,"col":67,"offset":3475},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c6495e2710ee99f7be4a62962543b68235a625f6c1d2efa0dbde6de2830c9c1087b166beb6cc092ea7ea215c3884c5f609df61624544e318ff8154eab5f2edc0_2","lines":"        return HttpResponse(f\"Guest view. Next page: {next_page}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-601/sample_120_original.py","start":{"line":103,"col":9,"offset":4202},"end":{"line":103,"col":48,"offset":4241},"extra":{"metavars":{"$MODEL":{"start":{"line":103,"col":9,"offset":4202},"end":{"line":103,"col":21,"offset":4214},"abstract_content":"request.user"},"$X":{"start":{"line":103,"col":35,"offset":4228},"end":{"line":103,"col":47,"offset":4240},"abstract_content":"new_password","propagated_value":{"svalue_start":{"line":91,"col":24,"offset":3643},"svalue_end":{"line":91,"col":56,"offset":3675},"svalue_abstract_content":"request.POST.get('new_password')"}}},"message":"The password on 'request.user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(new_password, user=request.user):\n            request.user.set_password(new_password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"becbe53ad2b740f35a09fea70193b4cd9181ebe28d8d492781a91193700cfcb4021eefef6a2d9575c25c28f757009649cff425becf83a0a849b4e8c12ef37573_0","lines":"        request.user.set_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.open-redirect.open-redirect","path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":17,"col":9,"offset":566},"end":{"line":19,"col":41,"offset":687},"extra":{"metavars":{"$FUNC":{"start":{"line":16,"col":9,"offset":538},"end":{"line":16,"col":12,"offset":541},"abstract_content":"get"},"$DATA":{"start":{"line":17,"col":9,"offset":566},"end":{"line":17,"col":12,"offset":569},"abstract_content":"url"},"$W":{"start":{"line":17,"col":23,"offset":580},"end":{"line":17,"col":26,"offset":583},"abstract_content":"GET"}},"message":"Data from request (url) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.","metadata":{"cwe":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"],"owasp":["A01:2021 - Broken Access Control"],"references":["https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/","https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231"],"category":"security","technology":["django"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Open Redirect"],"source":"https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect","shortlink":"https://sg.run/Ave2","semgrep.dev":{"rule":{"origin":"community","r_id":9494,"rule_id":"PeUZgr","rule_name":"python.django.security.injection.open-redirect.open-redirect","rv_id":946175,"url":"https://semgrep.dev/playground/r/WrTEoLr/python.django.security.injection.open-redirect.open-redirect","version_id":"WrTEoLr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"94380e605f5038dc588966b3c766f7b6c66c987cd8f32834e5cb966efee15180e42f6a8a407778584a3ac67194c51dbf6401f14c62136b55f48a7bd4efd5a40c_0","lines":"        url = request.GET.get('next', '/')\n        logger.info(f\"Redirecting to: {url}\")\n        return HttpResponseRedirect(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":18,"col":21,"offset":621},"end":{"line":18,"col":45,"offset":645},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":13,"col":10,"offset":475},"end":{"line":13,"col":37,"offset":502},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":15,"col":7,"offset":510},"end":{"line":15,"col":19,"offset":522},"abstract_content":"RedirectView"},"$FUNC":{"start":{"line":16,"col":9,"offset":538},"end":{"line":16,"col":12,"offset":541},"abstract_content":"get"},"$SELF":{"start":{"line":16,"col":13,"offset":542},"end":{"line":16,"col":17,"offset":546},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":16,"col":19,"offset":548},"end":{"line":16,"col":26,"offset":555},"abstract_content":"request"},"$LOG":{"start":{"line":18,"col":16,"offset":616},"end":{"line":18,"col":20,"offset":620},"abstract_content":"info"},"$SINK":{"start":{"line":18,"col":21,"offset":621},"end":{"line":18,"col":45,"offset":645},"abstract_content":"f\"Redirecting to: {url}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d203f10a3e7588e47ac15dcaf8172b8cd88736e7c8cb7f9342390edef054235059104329739f2e2037dc41dd1b867bd4700850f3313a16cf099487f91f4e71ff_0","lines":"        logger.info(f\"Redirecting to: {url}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":16,"col":19,"offset":548},"end":{"line":16,"col":26,"offset":555}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":16,"col":19,"offset":548},"end":{"line":16,"col":26,"offset":555}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":17,"col":9,"offset":566},"end":{"line":17,"col":12,"offset":569}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":18,"col":21,"offset":621},"end":{"line":18,"col":45,"offset":645}},"f\"Redirecting to: {url}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.web.tainted-redirect-django.tainted-redirect-django","path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":19,"col":37,"offset":683},"end":{"line":19,"col":40,"offset":686},"extra":{"metavars":{"$DJANGO_REQUEST":{"start":{"line":17,"col":15,"offset":572},"end":{"line":17,"col":22,"offset":579},"abstract_content":"request"},"$SINK":{"start":{"line":19,"col":37,"offset":683},"end":{"line":19,"col":40,"offset":686},"abstract_content":"url","propagated_value":{"svalue_start":{"line":17,"col":15,"offset":572},"svalue_end":{"line":17,"col":43,"offset":600},"svalue_abstract_content":"request.GET.get('next''/')"}}},"message":"The application builds a URL using user-controlled input which can lead to an open redirect vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain. Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities such as phishing to capture users' credentials. To prevent this vulnerability perform strict input validation of the domain against an allowlist of approved domains. Notify a user in your application that they are leaving the website. Display a domain where they are redirected to the user. A user can then either accept or deny the redirect to an untrusted site.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"],"display-name":"Open Redirect with Django","functional-categories":["web::sink::redirect::django","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A01:2021 - Broken Access Control"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html","https://docs.djangoproject.com/en/5.0/ref/request-response/#django.http.HttpResponseRedirect","https://docs.djangoproject.com/en/5.0/ref/urlresolvers/#reverse","https://docs.djangoproject.com/en/5.0/topics/http/shortcuts/#redirect","https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Open Redirect"],"source":"https://semgrep.dev/r/python.django.web.tainted-redirect-django.tainted-redirect-django","shortlink":"https://sg.run/wdr4n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137929,"rule_id":"j2Ug4w7","rule_name":"python.django.web.tainted-redirect-django.tainted-redirect-django","rv_id":947838,"url":"https://semgrep.dev/playground/r/qkT4ozn/python.django.web.tainted-redirect-django.tainted-redirect-django","version_id":"qkT4ozn"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.web.tainted-redirect-django.tainted-redirect-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7b944317ded1c65a92b9f0a28c33274d28556090ade194899e0fc9f0931bd99ac4f9b0d2caad30cc2a8cab1162adb6767b81ddaf4b388b392b45ad39085f63cf_0","lines":"        return HttpResponseRedirect(url)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":17,"col":15,"offset":572},"end":{"line":17,"col":26,"offset":583}},"request.GET"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":17,"col":9,"offset":566},"end":{"line":17,"col":12,"offset":569}},"content":"url"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":19,"col":37,"offset":683},"end":{"line":19,"col":40,"offset":686}},"url"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":59,"col":13,"offset":2152},"end":{"line":59,"col":44,"offset":2183},"extra":{"metavars":{"$MODEL":{"start":{"line":59,"col":13,"offset":2152},"end":{"line":59,"col":17,"offset":2156},"abstract_content":"user","propagated_value":{"svalue_start":{"line":55,"col":16,"offset":1969},"svalue_end":{"line":55,"col":28,"offset":1981},"svalue_abstract_content":"request.user"}},"$X":{"start":{"line":59,"col":31,"offset":2170},"end":{"line":59,"col":43,"offset":2182},"abstract_content":"new_password","propagated_value":{"svalue_start":{"line":57,"col":24,"offset":2061},"svalue_end":{"line":57,"col":56,"offset":2093},"svalue_abstract_content":"request.POST.get('new_password')"}}},"message":"The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(new_password, user=user):\n                user.set_password(new_password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6284cb2db79c44010a3eb959ffcd4b6a612757c25df28a59929a24851d2b07dcf63a7a4382369fa10ff051c8ca4b6b4a3f0011281e42e937897df8c55e37a103_0","lines":"            user.set_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":119,"col":25,"offset":4392},"end":{"line":119,"col":65,"offset":4432},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":13,"col":10,"offset":475},"end":{"line":13,"col":37,"offset":502},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":104,"col":7,"offset":3863},"end":{"line":104,"col":14,"offset":3870},"abstract_content":"UserAPI"},"$FUNC":{"start":{"line":111,"col":9,"offset":4113},"end":{"line":111,"col":13,"offset":4117},"abstract_content":"post"},"$SELF":{"start":{"line":111,"col":14,"offset":4118},"end":{"line":111,"col":18,"offset":4122},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":111,"col":20,"offset":4124},"end":{"line":111,"col":27,"offset":4131},"abstract_content":"request"},"$LOG":{"start":{"line":119,"col":20,"offset":4387},"end":{"line":119,"col":24,"offset":4391},"abstract_content":"info"},"$SINK":{"start":{"line":119,"col":25,"offset":4392},"end":{"line":119,"col":65,"offset":4432},"abstract_content":"f\"User created via API: {user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"17f9578e366d9d22cbb31228963d09e37d558d335c8550937ad055eb14bb2a2059de687f78e5885ff41080d5071b47e3d80c8e600c89556ee7f3f26a679c1a38_0","lines":"            logger.info(f\"User created via API: {user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":111,"col":20,"offset":4124},"end":{"line":111,"col":27,"offset":4131}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":111,"col":20,"offset":4124},"end":{"line":111,"col":27,"offset":4131}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":112,"col":9,"offset":4142},"end":{"line":112,"col":13,"offset":4146}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":114,"col":13,"offset":4199},"end":{"line":114,"col":17,"offset":4203}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":119,"col":25,"offset":4392},"end":{"line":119,"col":65,"offset":4432}},"f\"User created via API: {user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":122,"col":28,"offset":4562},"end":{"line":122,"col":103,"offset":4637},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":13,"col":10,"offset":475},"end":{"line":13,"col":37,"offset":502},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":104,"col":7,"offset":3863},"end":{"line":104,"col":14,"offset":3870},"abstract_content":"UserAPI"},"$FUNC":{"start":{"line":111,"col":9,"offset":4113},"end":{"line":111,"col":13,"offset":4117},"abstract_content":"post"},"$SELF":{"start":{"line":111,"col":14,"offset":4118},"end":{"line":111,"col":18,"offset":4122},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":111,"col":20,"offset":4124},"end":{"line":111,"col":27,"offset":4131},"abstract_content":"request"},"$LOG":{"start":{"line":122,"col":20,"offset":4554},"end":{"line":122,"col":27,"offset":4561},"abstract_content":"warning"},"$SINK":{"start":{"line":122,"col":28,"offset":4562},"end":{"line":122,"col":103,"offset":4637},"abstract_content":"f\"User creation via API failed: Username {data['username']} already exists\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"05f4a09b339149e6c6af583d80bcdac3ef71df999d9a7202e341fcd00eebffe84d122d65f2afe79ee96dc78f83e05b40df128233ccf6706593eda141f2fc279a_0","lines":"            logger.warning(f\"User creation via API failed: Username {data['username']} already exists\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":111,"col":20,"offset":4124},"end":{"line":111,"col":27,"offset":4131}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":111,"col":20,"offset":4124},"end":{"line":111,"col":27,"offset":4131}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":112,"col":9,"offset":4142},"end":{"line":112,"col":13,"offset":4146}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-601/sample_121_original.py","start":{"line":122,"col":28,"offset":4562},"end":{"line":122,"col":103,"offset":4637}},"f\"User creation via API failed: Username {data['username']} already exists\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-601/sample_122_original.py","start":{"line":57,"col":1,"offset":2270},"end":{"line":83,"col":31,"offset":3311},"extra":{"metavars":{"$R":{"start":{"line":58,"col":5,"offset":2287},"end":{"line":58,"col":22,"offset":2304},"abstract_content":"feedback_redirect"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c0ea1b54644dd32652a9d8e18661137b425567fd176f0e42a3a26d83d16de767482e8ef1088aaa4d70bba2a8e19fc2f439a0557b76082730167b3ab673a59ed3_0","lines":"@csrf_exempt\ndef feedback_redirect(request: HttpRequest):\n    next_page = request.GET.get('next', '/default')\n    user_email = request.GET.get('email')\n    feedback = request.GET.get('feedback')\n    rating = request.GET.get('rating')\n    category = request.GET.get('category')\n\n    if user_email and feedback:\n        feedback_content = f\"Rating: {rating}\\nCategory: {category}\\nFeedback: {feedback}\"\n        try:\n            send_mail(\n                'User Feedback',\n                feedback_content,\n                'noreply@example.com',\n                [user_email],\n                fail_silently=False,\n            )\n            logger.info(f\"Feedback sent to {user_email}\")\n        except Exception as e:\n            logger.error(f\"Failed to send feedback email: {str(e)}\")\n            return JsonResponse({'status': 'error', 'message': 'Failed to send feedback'}, status=500)\n\n    if 'error' in request.GET:\n        return JsonResponse({'status': 'error', 'message': 'An error occurred'}, status=500)\n\n    return redirect(next_page)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.open-redirect.open-redirect","path":"vulnerability_samples/CWE-601/sample_122_original.py","start":{"line":59,"col":5,"offset":2332},"end":{"line":83,"col":31,"offset":3311},"extra":{"metavars":{"$FUNC":{"start":{"line":58,"col":5,"offset":2287},"end":{"line":58,"col":22,"offset":2304},"abstract_content":"feedback_redirect"},"$DATA":{"start":{"line":59,"col":5,"offset":2332},"end":{"line":59,"col":14,"offset":2341},"abstract_content":"next_page"},"$W":{"start":{"line":59,"col":25,"offset":2352},"end":{"line":59,"col":28,"offset":2355},"abstract_content":"GET"}},"message":"Data from request (next_page) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.","metadata":{"cwe":["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"],"owasp":["A01:2021 - Broken Access Control"],"references":["https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/","https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231"],"category":"security","technology":["django"],"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Open Redirect"],"source":"https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect","shortlink":"https://sg.run/Ave2","semgrep.dev":{"rule":{"origin":"community","r_id":9494,"rule_id":"PeUZgr","rule_name":"python.django.security.injection.open-redirect.open-redirect","rv_id":946175,"url":"https://semgrep.dev/playground/r/WrTEoLr/python.django.security.injection.open-redirect.open-redirect","version_id":"WrTEoLr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"efc8401b476eb9a979d38f1bdc16e03e9b96df8eb48bfef3d47825e875a0b4f6afee2d12353eb37517669c516da8e68050fee7def9ce92f66d7b75a26f08f714_0","lines":"    next_page = request.GET.get('next', '/default')\n    user_email = request.GET.get('email')\n    feedback = request.GET.get('feedback')\n    rating = request.GET.get('rating')\n    category = request.GET.get('category')\n\n    if user_email and feedback:\n        feedback_content = f\"Rating: {rating}\\nCategory: {category}\\nFeedback: {feedback}\"\n        try:\n            send_mail(\n                'User Feedback',\n                feedback_content,\n                'noreply@example.com',\n                [user_email],\n                fail_silently=False,\n            )\n            logger.info(f\"Feedback sent to {user_email}\")\n        except Exception as e:\n            logger.error(f\"Failed to send feedback email: {str(e)}\")\n            return JsonResponse({'status': 'error', 'message': 'Failed to send feedback'}, status=500)\n\n    if 'error' in request.GET:\n        return JsonResponse({'status': 'error', 'message': 'An error occurred'}, status=500)\n\n    return redirect(next_page)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_193_original.py","start":{"line":23,"col":24,"offset":590},"end":{"line":23,"col":45,"offset":611},"extra":{"metavars":{"$...ARGS":{"start":{"line":23,"col":33,"offset":599},"end":{"line":23,"col":44,"offset":610},"abstract_content":"config_file"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(config_file)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"6eaf83aa69293debc569c3ac9b69661d7f35ede4219500f731a5d810a60f9eda83ca03e41fba5cf6f4004ff16768929b33924e82f98f1348fe0012ef4c1276b5_0","lines":"                tree = ET.parse(config_file)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":20,"offset":1832},"end":{"line":57,"col":39,"offset":1851},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":49,"col":20,"offset":1503},"end":{"line":49,"col":25,"offset":1508},"abstract_content":"files"},"$SINK":{"start":{"line":54,"col":21,"offset":1719},"end":{"line":54,"col":72,"offset":1770},"abstract_content":"os.path.join(app.config['UPLOAD_FOLDER']filename)"}},"message":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. The xml parsing libraries are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, they are still vulnerable to denial of service attacks such as billion laughs and quadratic blowup. To mitigate these attacks, it is recommended to use a different parser such as defusedxml.","metadata":{"likelihood":"LOW","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"],"display-name":"XML Entity Expansion in Standard Library","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::sax","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.dom","xml::sink::xml-parser::xml.dom.minidom","xml::sink::xml-parser::xml.dom.pulldom","xml::sink::xml-parser::xml.etree","xml::sink::xml-parser::xml.sax"],"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html","https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://cwe.mitre.org/data/definitions/776.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A05_2021-Security_Misconfiguration","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","sax","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.dom","xml.dom.minidom","xml.dom.pulldom","xml.etree","xml.sax"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","shortlink":"https://sg.run/kxl7o","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139072,"rule_id":"WAUWXK0","rule_name":"python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","rv_id":947975,"url":"https://semgrep.dev/playground/r/GxTP03Q/python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","version_id":"GxTP03Q"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"bd88bdcdcd3158103818b0389aa2d0d19ab5e00fb63da0e3bb429af9e391b347be0f54863b37fe567bc90207d02ebeac7a2eb0e24ce5dac02800baa356809d0f_0","lines":"            tree = ET.parse(file_path)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":12,"offset":1495},"end":{"line":49,"col":33,"offset":1516}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":9,"offset":1492}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":53,"col":9,"offset":1657},"end":{"line":53,"col":17,"offset":1665}},"content":"filename"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":54,"col":9,"offset":1707},"end":{"line":54,"col":18,"offset":1716}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":20,"offset":1832},"end":{"line":57,"col":39,"offset":1851}},"ET.parse(file_path)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":20,"offset":1832},"end":{"line":57,"col":39,"offset":1851},"extra":{"metavars":{"$...ARGS":{"start":{"line":57,"col":29,"offset":1841},"end":{"line":57,"col":38,"offset":1850},"abstract_content":"file_path"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(file_path)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9ae86824fb1fee40ff57c7ae70df39543ed4b57a184ab24f1a9f7fd1bda2582fcc8c82c26b55b44bf4bd2f894f3d9b54a974563da52e2391da2b941bbe5dccdc_0","lines":"            tree = ET.parse(file_path)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":28,"offset":1939},"end":{"line":60,"col":51,"offset":1962},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":49,"col":20,"offset":1503},"end":{"line":49,"col":25,"offset":1508},"abstract_content":"files"},"$ELEMENT":{"start":{"line":58,"col":20,"offset":1871},"end":{"line":58,"col":34,"offset":1885},"abstract_content":"tree.getroot()"},"$SINK":{"start":{"line":60,"col":41,"offset":1952},"end":{"line":60,"col":50,"offset":1961},"abstract_content":"'product'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"84d7f772edf4fb9fe4bdae0da0498d0839ec83798ba74d724707a5b5f9801e1b47067b6f222b95b4de3d576c9568187a569804723dc0fa3e2e05f53c5243f21e_0","lines":"            for product in root.findall('product'):","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":12,"offset":1495},"end":{"line":49,"col":33,"offset":1516}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":9,"offset":1492}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":53,"col":9,"offset":1657},"end":{"line":53,"col":17,"offset":1665}},"content":"filename"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":54,"col":9,"offset":1707},"end":{"line":54,"col":18,"offset":1716}},"content":"file_path"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":13,"offset":1825},"end":{"line":57,"col":17,"offset":1829}},"content":"tree"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":58,"col":13,"offset":1864},"end":{"line":58,"col":17,"offset":1868}},"content":"root"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":28,"offset":1939},"end":{"line":60,"col":51,"offset":1962}},"root.findall('product')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":61,"col":24,"offset":1987},"end":{"line":61,"col":44,"offset":2007},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":49,"col":20,"offset":1503},"end":{"line":49,"col":25,"offset":1508},"abstract_content":"files"},"$ELEMENT":{"start":{"line":61,"col":24,"offset":1987},"end":{"line":61,"col":31,"offset":1994},"abstract_content":"product"},"$SINK":{"start":{"line":61,"col":37,"offset":2000},"end":{"line":61,"col":43,"offset":2006},"abstract_content":"'name'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"0333e6698c11fba8410d6c9891a1523377ecbe702ed30b82258b332dff97d0e3cdd6bf598913fd36ba7939a5835464c8e763b510eadf58e0ec5a7874c7b7197b_0","lines":"                name = product.find('name').text","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":12,"offset":1495},"end":{"line":49,"col":33,"offset":1516}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":9,"offset":1492}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":53,"col":9,"offset":1657},"end":{"line":53,"col":17,"offset":1665}},"content":"filename"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":54,"col":9,"offset":1707},"end":{"line":54,"col":18,"offset":1716}},"content":"file_path"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":13,"offset":1825},"end":{"line":57,"col":17,"offset":1829}},"content":"tree"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":58,"col":13,"offset":1864},"end":{"line":58,"col":17,"offset":1868}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":25,"offset":1936},"end":{"line":60,"col":27,"offset":1938}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":17,"offset":1928},"end":{"line":60,"col":24,"offset":1935}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":61,"col":24,"offset":1987},"end":{"line":61,"col":44,"offset":2007}},"product.find('name')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":63,"col":31,"offset":2101},"end":{"line":63,"col":58,"offset":2128},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":49,"col":20,"offset":1503},"end":{"line":49,"col":25,"offset":1508},"abstract_content":"files"},"$ELEMENT":{"start":{"line":63,"col":31,"offset":2101},"end":{"line":63,"col":38,"offset":2108},"abstract_content":"product"},"$SINK":{"start":{"line":63,"col":44,"offset":2114},"end":{"line":63,"col":57,"offset":2127},"abstract_content":"'description'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"6ea813bcfb38092c32edba8b2aa16e87969a076df85df62ee9399a37422250140fff3a2c955a1e210851d8e4d312bbdab220c906a1bec528d0fac8d5a96096fa_0","lines":"                description = product.find('description').text if product.find('description') is not None else \"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":12,"offset":1495},"end":{"line":49,"col":33,"offset":1516}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":9,"offset":1492}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":53,"col":9,"offset":1657},"end":{"line":53,"col":17,"offset":1665}},"content":"filename"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":54,"col":9,"offset":1707},"end":{"line":54,"col":18,"offset":1716}},"content":"file_path"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":13,"offset":1825},"end":{"line":57,"col":17,"offset":1829}},"content":"tree"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":58,"col":13,"offset":1864},"end":{"line":58,"col":17,"offset":1868}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":25,"offset":1936},"end":{"line":60,"col":27,"offset":1938}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":17,"offset":1928},"end":{"line":60,"col":24,"offset":1935}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":63,"col":31,"offset":2101},"end":{"line":63,"col":58,"offset":2128}},"product.find('description')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":63,"col":67,"offset":2137},"end":{"line":63,"col":94,"offset":2164},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":49,"col":20,"offset":1503},"end":{"line":49,"col":25,"offset":1508},"abstract_content":"files"},"$ELEMENT":{"start":{"line":63,"col":67,"offset":2137},"end":{"line":63,"col":74,"offset":2144},"abstract_content":"product"},"$SINK":{"start":{"line":63,"col":80,"offset":2150},"end":{"line":63,"col":93,"offset":2163},"abstract_content":"'description'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"6ea813bcfb38092c32edba8b2aa16e87969a076df85df62ee9399a37422250140fff3a2c955a1e210851d8e4d312bbdab220c906a1bec528d0fac8d5a96096fa_1","lines":"                description = product.find('description').text if product.find('description') is not None else \"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":12,"offset":1495},"end":{"line":49,"col":33,"offset":1516}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":9,"offset":1492}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":53,"col":9,"offset":1657},"end":{"line":53,"col":17,"offset":1665}},"content":"filename"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":54,"col":9,"offset":1707},"end":{"line":54,"col":18,"offset":1716}},"content":"file_path"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":13,"offset":1825},"end":{"line":57,"col":17,"offset":1829}},"content":"tree"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":58,"col":13,"offset":1864},"end":{"line":58,"col":17,"offset":1868}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":25,"offset":1936},"end":{"line":60,"col":27,"offset":1938}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":17,"offset":1928},"end":{"line":60,"col":24,"offset":1935}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":63,"col":67,"offset":2137},"end":{"line":63,"col":94,"offset":2164}},"product.find('description')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":64,"col":60,"offset":2244},"end":{"line":64,"col":81,"offset":2265},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":49,"col":20,"offset":1503},"end":{"line":49,"col":25,"offset":1508},"abstract_content":"files"},"$ELEMENT":{"start":{"line":64,"col":60,"offset":2244},"end":{"line":64,"col":67,"offset":2251},"abstract_content":"product"},"$SINK":{"start":{"line":64,"col":73,"offset":2257},"end":{"line":64,"col":80,"offset":2264},"abstract_content":"'stock'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"8b4e632dee166efeed59b5e9458f34bb0785164b8323b4a4532392e958cf18e3c9cd56fd4ed93b2f543da06337b7d187f3bc9cb22a0be8797e4ba66e66fafe59_0","lines":"                stock = int(product.find('stock').text) if product.find('stock') is not None else 0","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":12,"offset":1495},"end":{"line":49,"col":33,"offset":1516}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":9,"offset":1492}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":53,"col":9,"offset":1657},"end":{"line":53,"col":17,"offset":1665}},"content":"filename"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":54,"col":9,"offset":1707},"end":{"line":54,"col":18,"offset":1716}},"content":"file_path"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":57,"col":13,"offset":1825},"end":{"line":57,"col":17,"offset":1829}},"content":"tree"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":58,"col":13,"offset":1864},"end":{"line":58,"col":17,"offset":1868}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":25,"offset":1936},"end":{"line":60,"col":27,"offset":1938}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":60,"col":17,"offset":1928},"end":{"line":60,"col":24,"offset":1935}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":64,"col":60,"offset":2244},"end":{"line":64,"col":81,"offset":2265}},"product.find('stock')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":142,"col":5,"offset":5181},"end":{"line":142,"col":24,"offset":5200},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8a690fd2408706c1c67459683a117a48ab54b0ee21b3b2b0cc9e04dcdfa5c5a8ece6a1f3c1f3c7a392b4657c7995392d785e8ec4194672083031c67c8f7a5f79_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-611/sample_194_original.py","start":{"line":142,"col":5,"offset":5181},"end":{"line":142,"col":24,"offset":5200},"extra":{"metavars":{"$APP":{"start":{"line":142,"col":5,"offset":5181},"end":{"line":142,"col":8,"offset":5184},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":219},"svalue_end":{"line":9,"col":22,"offset":234},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"e5b3da22ef96a6c2bfaa53f8e14c67ea0686659031d3e4ffba3f2847791a9a4fcf944502e56ea9502e37e5b59c17cc3620d362995f3587c192686cb8c64250c8_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":19,"offset":1037},"end":{"line":40,"col":37,"offset":1055},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":35,"col":24,"offset":884},"end":{"line":35,"col":29,"offset":889},"abstract_content":"files"},"$SINK":{"start":{"line":39,"col":20,"offset":1007},"end":{"line":39,"col":31,"offset":1018},"abstract_content":"file.read()"}},"message":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. The xml parsing libraries are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, they are still vulnerable to denial of service attacks such as billion laughs and quadratic blowup. To mitigate these attacks, it is recommended to use a different parser such as defusedxml.","metadata":{"likelihood":"LOW","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"],"display-name":"XML Entity Expansion in Standard Library","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::sax","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.dom","xml::sink::xml-parser::xml.dom.minidom","xml::sink::xml-parser::xml.dom.pulldom","xml::sink::xml-parser::xml.etree","xml::sink::xml-parser::xml.sax"],"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html","https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://cwe.mitre.org/data/definitions/776.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A05_2021-Security_Misconfiguration","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","sax","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.dom","xml.dom.minidom","xml.dom.pulldom","xml.etree","xml.sax"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","shortlink":"https://sg.run/kxl7o","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139072,"rule_id":"WAUWXK0","rule_name":"python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","rv_id":947975,"url":"https://semgrep.dev/playground/r/GxTP03Q/python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","version_id":"GxTP03Q"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-stdlib.tainted-flask-xml-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"5c18c6ca48e1581d6a896c7c5a28d60a383a381337a942905a29ca982fedf3cdf6abf9cba27808c51cc27f8765d003e9f6d29bfb00e7c7950c392c1b9bfb23f9_0","lines":"        catalog = ET.parse(xml_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":16,"offset":876},"end":{"line":35,"col":37,"offset":897}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":9,"offset":869},"end":{"line":35,"col":13,"offset":873}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":39,"col":9,"offset":996},"end":{"line":39,"col":17,"offset":1004}},"content":"xml_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":19,"offset":1037},"end":{"line":40,"col":37,"offset":1055}},"ET.parse(xml_data)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":19,"offset":1037},"end":{"line":40,"col":37,"offset":1055},"extra":{"metavars":{"$...ARGS":{"start":{"line":40,"col":28,"offset":1046},"end":{"line":40,"col":36,"offset":1054},"abstract_content":"xml_data"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_data)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"583ea701c4105b4801468a516243d1e2277268d0bae59d4ab2a0b3f1bb2025d9376fc97a394402c9edd19891f9f94482cc320d049626616dddd47796dfb8b701_0","lines":"        catalog = ET.parse(xml_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":24,"offset":1165},"end":{"line":46,"col":47,"offset":1188},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":35,"col":24,"offset":884},"end":{"line":35,"col":29,"offset":889},"abstract_content":"files"},"$ELEMENT":{"start":{"line":41,"col":16,"offset":1071},"end":{"line":41,"col":33,"offset":1088},"abstract_content":"catalog.getroot()"},"$SINK":{"start":{"line":46,"col":37,"offset":1178},"end":{"line":46,"col":46,"offset":1187},"abstract_content":"'product'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"4fd4deeb079933e33e690075d8897e3aa62b896eeb4c8959b0513dfc5f0492c5c5ddc3951c1562f0c3d6f15d1f3fbee26765f552c9fe969f209853f6df915cd3_0","lines":"        for product in root.findall('product'):","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":16,"offset":876},"end":{"line":35,"col":37,"offset":897}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":9,"offset":869},"end":{"line":35,"col":13,"offset":873}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":39,"col":9,"offset":996},"end":{"line":39,"col":17,"offset":1004}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":9,"offset":1027},"end":{"line":40,"col":16,"offset":1034}},"content":"catalog"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":41,"col":9,"offset":1064},"end":{"line":41,"col":13,"offset":1068}},"content":"root"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":24,"offset":1165},"end":{"line":46,"col":47,"offset":1188}},"root.findall('product')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":47,"col":20,"offset":1209},"end":{"line":47,"col":40,"offset":1229},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":35,"col":24,"offset":884},"end":{"line":35,"col":29,"offset":889},"abstract_content":"files"},"$ELEMENT":{"start":{"line":47,"col":20,"offset":1209},"end":{"line":47,"col":27,"offset":1216},"abstract_content":"product"},"$SINK":{"start":{"line":47,"col":33,"offset":1222},"end":{"line":47,"col":39,"offset":1228},"abstract_content":"'name'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"a2c3df6ec147937731541b5feda9a27e4f846110633d5ff63eabfb4941b90501ee8c2b690049d523a699b1cdc2de7ae29dff0526ed5856798039cc1d0a798a38_0","lines":"            name = product.find('name').text","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":16,"offset":876},"end":{"line":35,"col":37,"offset":897}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":9,"offset":869},"end":{"line":35,"col":13,"offset":873}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":39,"col":9,"offset":996},"end":{"line":39,"col":17,"offset":1004}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":9,"offset":1027},"end":{"line":40,"col":16,"offset":1034}},"content":"catalog"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":41,"col":9,"offset":1064},"end":{"line":41,"col":13,"offset":1068}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":21,"offset":1162},"end":{"line":46,"col":23,"offset":1164}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":13,"offset":1154},"end":{"line":46,"col":20,"offset":1161}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":47,"col":20,"offset":1209},"end":{"line":47,"col":40,"offset":1229}},"product.find('name')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":49,"col":27,"offset":1315},"end":{"line":49,"col":54,"offset":1342},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":35,"col":24,"offset":884},"end":{"line":35,"col":29,"offset":889},"abstract_content":"files"},"$ELEMENT":{"start":{"line":49,"col":27,"offset":1315},"end":{"line":49,"col":34,"offset":1322},"abstract_content":"product"},"$SINK":{"start":{"line":49,"col":40,"offset":1328},"end":{"line":49,"col":53,"offset":1341},"abstract_content":"'description'"}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with Flask","functional-categories":["web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["flask","flask-wtf","python","stdlib","stdlib2","stdlib3","web","wtforms","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","shortlink":"https://sg.run/wdr7n","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139073,"rule_id":"0oUL8zP","rule_name":"python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","rv_id":947976,"url":"https://semgrep.dev/playground/r/RGTAP8X/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","version_id":"RGTAP8X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.xml.tainted-flask-xml-xpath-stdlib.tainted-flask-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"6a8b2822cf42121c03ba714eb3292995cf922428a3f1b7e06df9d714980e1ecbe2dfc423a296b52ac08f2f358633677fce3cae3a6e35df723d968f16998421d8_0","lines":"            description = product.find('description').text","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":16,"offset":876},"end":{"line":35,"col":37,"offset":897}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":9,"offset":869},"end":{"line":35,"col":13,"offset":873}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":39,"col":9,"offset":996},"end":{"line":39,"col":17,"offset":1004}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":9,"offset":1027},"end":{"line":40,"col":16,"offset":1034}},"content":"catalog"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":41,"col":9,"offset":1064},"end":{"line":41,"col":13,"offset":1068}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":21,"offset":1162},"end":{"line":46,"col":23,"offset":1164}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":13,"offset":1154},"end":{"line":46,"col":20,"offset":1161}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":49,"col":27,"offset":1315},"end":{"line":49,"col":54,"offset":1342}},"product.find('description')"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":51,"col":13,"offset":1361},"end":{"line":54,"col":45,"offset":1521},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":35,"col":24,"offset":884},"end":{"line":35,"col":29,"offset":889},"abstract_content":"files"},"$O":{"start":{"line":51,"col":13,"offset":1361},"end":{"line":51,"col":19,"offset":1367},"abstract_content":"cursor"},"$SINK":{"start":{"line":51,"col":28,"offset":1376},"end":{"line":54,"col":16,"offset":1492},"abstract_content":"'''\n                INSERT INTO products (name, price, description)\n                VALUES (?, ?, ?)\n            '''"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ec2badc9d1eb1918047d48fa21605a7a143e26925eb3d87c70a1886eecf93ebc29ff8a770dd2af35b62a382332764300615b472d7a05a53ef77390ec3d3eee72_0","lines":"            cursor.execute('''\n                INSERT INTO products (name, price, description)\n                VALUES (?, ?, ?)\n            ''', (name, price, description))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":16,"offset":876},"end":{"line":35,"col":37,"offset":897}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":9,"offset":869},"end":{"line":35,"col":13,"offset":873}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":39,"col":9,"offset":996},"end":{"line":39,"col":17,"offset":1004}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":9,"offset":1027},"end":{"line":40,"col":16,"offset":1034}},"content":"catalog"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":41,"col":9,"offset":1064},"end":{"line":41,"col":13,"offset":1068}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":21,"offset":1162},"end":{"line":46,"col":23,"offset":1164}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":13,"offset":1154},"end":{"line":46,"col":20,"offset":1161}},"content":"product"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":47,"col":13,"offset":1202},"end":{"line":47,"col":17,"offset":1206}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":51,"col":13,"offset":1361},"end":{"line":54,"col":45,"offset":1521}},"cursor.execute('''\n                INSERT INTO products (name, price, description)\n                VALUES (?, ?, ?)\n            ''', (name, price, description))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":51,"col":13,"offset":1361},"end":{"line":54,"col":45,"offset":1521},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":35,"col":24,"offset":884},"end":{"line":35,"col":29,"offset":889},"abstract_content":"files"},"$O":{"start":{"line":51,"col":13,"offset":1361},"end":{"line":51,"col":19,"offset":1367},"abstract_content":"cursor"},"$SINK":{"start":{"line":51,"col":28,"offset":1376},"end":{"line":54,"col":16,"offset":1492},"abstract_content":"'''\n                INSERT INTO products (name, price, description)\n                VALUES (?, ?, ?)\n            '''"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"76909e6aeb7d7ab4730f14cde6a4a842510fc5582b9836655a90997f4f59051f03ef1ac078c98d133a69284170ff1ec296c310e947ce5409f802e4b3a324fbde_0","lines":"            cursor.execute('''\n                INSERT INTO products (name, price, description)\n                VALUES (?, ?, ?)\n            ''', (name, price, description))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":16,"offset":876},"end":{"line":35,"col":37,"offset":897}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":35,"col":9,"offset":869},"end":{"line":35,"col":13,"offset":873}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":39,"col":9,"offset":996},"end":{"line":39,"col":17,"offset":1004}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":40,"col":9,"offset":1027},"end":{"line":40,"col":16,"offset":1034}},"content":"catalog"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":41,"col":9,"offset":1064},"end":{"line":41,"col":13,"offset":1068}},"content":"root"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":21,"offset":1162},"end":{"line":46,"col":23,"offset":1164}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":46,"col":13,"offset":1154},"end":{"line":46,"col":20,"offset":1161}},"content":"product"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":47,"col":13,"offset":1202},"end":{"line":47,"col":17,"offset":1206}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":51,"col":13,"offset":1361},"end":{"line":54,"col":45,"offset":1521}},"cursor.execute('''\n                INSERT INTO products (name, price, description)\n                VALUES (?, ?, ?)\n            ''', (name, price, description))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":83,"col":9,"offset":2527},"end":{"line":83,"col":77,"offset":2595},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":78,"col":2,"offset":2374},"end":{"line":78,"col":5,"offset":2377},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":180},"svalue_end":{"line":8,"col":22,"offset":195},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":78,"col":6,"offset":2378},"end":{"line":78,"col":11,"offset":2383},"abstract_content":"route"},"$FUNC":{"start":{"line":79,"col":5,"offset":2434},"end":{"line":79,"col":16,"offset":2445},"abstract_content":"get_product"},"$PARAM":{"start":{"line":79,"col":17,"offset":2446},"end":{"line":79,"col":27,"offset":2456},"abstract_content":"product_id"},"$O":{"start":{"line":82,"col":18,"offset":2507},"end":{"line":82,"col":29,"offset":2518},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":83,"col":24,"offset":2542},"end":{"line":83,"col":61,"offset":2579},"abstract_content":"'SELECT * FROM products WHERE id = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"7e1b8090e9fff4f50e5ec691073762e8eb1b081c6d77c360b9220f46d675dbb46c6bf1587d3b7df3e043e035c36d8c2d235b39c83f6a92ee882730b18388004b_0","lines":"        cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":79,"col":17,"offset":2446},"end":{"line":79,"col":27,"offset":2456}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":79,"col":17,"offset":2446},"end":{"line":79,"col":27,"offset":2456}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":83,"col":9,"offset":2527},"end":{"line":83,"col":77,"offset":2595}},"cursor.execute('SELECT * FROM products WHERE id = ?', (product_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":104,"col":9,"offset":3281},"end":{"line":107,"col":65,"offset":3453},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":98,"col":24,"offset":3083},"end":{"line":98,"col":28,"offset":3087},"abstract_content":"json"},"$O":{"start":{"line":103,"col":18,"offset":3261},"end":{"line":103,"col":29,"offset":3272},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":104,"col":24,"offset":3296},"end":{"line":107,"col":12,"offset":3400},"abstract_content":"'''\n            INSERT INTO products (name, price, description)\n            VALUES (?, ?, ?)\n        '''"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f161ee9737fc4d4244581db9e917eae7c1bf5f3cc6b7ab7fe93f2279e9d4b6ef2b5441991e4b7363173a0944991c705178f92ca8d56871f85492d4c1358c4bd0_0","lines":"        cursor.execute('''\n            INSERT INTO products (name, price, description)\n            VALUES (?, ?, ?)\n        ''', (data['name'], data['price'], data['description']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":107,"col":15,"offset":3403},"end":{"line":107,"col":27,"offset":3415}},"data['name']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":104,"col":9,"offset":3281},"end":{"line":107,"col":65,"offset":3453}},"cursor.execute('''\n            INSERT INTO products (name, price, description)\n            VALUES (?, ?, ?)\n        ''', (data['name'], data['price'], data['description']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":104,"col":9,"offset":3281},"end":{"line":107,"col":65,"offset":3453},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":98,"col":24,"offset":3083},"end":{"line":98,"col":28,"offset":3087},"abstract_content":"json"},"$O":{"start":{"line":103,"col":18,"offset":3261},"end":{"line":103,"col":29,"offset":3272},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":104,"col":24,"offset":3296},"end":{"line":107,"col":12,"offset":3400},"abstract_content":"'''\n            INSERT INTO products (name, price, description)\n            VALUES (?, ?, ?)\n        '''"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"0fd6dc109150faf60345046d36c0279a5faad72577f9d9690ed1092c8944243db3ddc561e069b58ceba526f08c781d118273566b872814a92629b97698bbd27e_0","lines":"        cursor.execute('''\n            INSERT INTO products (name, price, description)\n            VALUES (?, ?, ?)\n        ''', (data['name'], data['price'], data['description']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":107,"col":15,"offset":3403},"end":{"line":107,"col":27,"offset":3415}},"data['name']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":104,"col":9,"offset":3281},"end":{"line":107,"col":65,"offset":3453}},"cursor.execute('''\n            INSERT INTO products (name, price, description)\n            VALUES (?, ?, ?)\n        ''', (data['name'], data['price'], data['description']))"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":38,"offset":4593},"extra":{"metavars":{"$CONNECTION":{"start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":15,"offset":4570},"abstract_content":"cursor"},"$QUERY":{"start":{"line":139,"col":24,"offset":4579},"end":{"line":139,"col":29,"offset":4584},"abstract_content":"query","propagated_value":{"svalue_start":{"line":138,"col":17,"offset":4493},"svalue_end":{"line":138,"col":79,"offset":4555},"svalue_abstract_content":"f\"UPDATE products SET {', '.join(update_fields)} WHERE id = ?\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"43f3e34af558655780f8e9e745d9a561890b19807a85e3af373503be02a5114830c798122c00c8891f6ac64a79839b9d923654fe0e368578b4a50d57ff9f1503_0","lines":"        cursor.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":38,"offset":4593},"extra":{"metavars":{"$APP":{"start":{"line":119,"col":2,"offset":3890},"end":{"line":119,"col":5,"offset":3893},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":180},"svalue_end":{"line":8,"col":22,"offset":195},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":119,"col":6,"offset":3894},"end":{"line":119,"col":11,"offset":3899},"abstract_content":"route"},"$FUNC":{"start":{"line":120,"col":5,"offset":3950},"end":{"line":120,"col":19,"offset":3964},"abstract_content":"update_product"},"$PARAM":{"start":{"line":120,"col":20,"offset":3965},"end":{"line":120,"col":30,"offset":3975},"abstract_content":"product_id"},"$PROPERTY":{"start":{"line":122,"col":24,"offset":4010},"end":{"line":122,"col":28,"offset":4014},"abstract_content":"json"},"$SINK":{"start":{"line":138,"col":17,"offset":4493},"end":{"line":138,"col":79,"offset":4555},"abstract_content":"f\"UPDATE products SET {', '.join(update_fields)} WHERE id = ?\""},"$O":{"start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":15,"offset":4570},"abstract_content":"cursor"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"9e188147a40bde4f8b0c6f893cb9985f81cd20efdcf99905de4aaeda69b3c593bb9da2feb75363285178383b6419b49405605c69445f82e906141a8a533adb8f_0","lines":"        cursor.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":120,"col":20,"offset":3965},"end":{"line":120,"col":30,"offset":3975}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":120,"col":20,"offset":3965},"end":{"line":120,"col":30,"offset":3975}},"content":"product_id"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":136,"col":9,"offset":4442},"end":{"line":136,"col":15,"offset":4448}},"content":"params"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":38,"offset":4593}},"cursor.execute(query, params)"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":38,"offset":4593},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":122,"col":24,"offset":4010},"end":{"line":122,"col":28,"offset":4014},"abstract_content":"json"},"$SINK":{"start":{"line":138,"col":17,"offset":4493},"end":{"line":138,"col":79,"offset":4555},"abstract_content":"f\"UPDATE products SET {', '.join(update_fields)} WHERE id = ?\""},"$O":{"start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":15,"offset":4570},"abstract_content":"cursor"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"fa9792a67cbf06367bada0e585c4dc7373c05be2978e524b178de769a25dfd1d67d4e1871d0fc6308429e8c21db943c19b67f45ff859053e3fe637758d8014cc_0","lines":"        cursor.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":122,"col":16,"offset":4002},"end":{"line":122,"col":28,"offset":4014}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":122,"col":9,"offset":3995},"end":{"line":122,"col":13,"offset":3999}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":134,"col":17,"offset":4400},"end":{"line":134,"col":23,"offset":4406}},"content":"params"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":139,"col":9,"offset":4564},"end":{"line":139,"col":38,"offset":4593}},"cursor.execute(query, params)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":145,"col":22,"offset":4734},"end":{"line":145,"col":54,"offset":4766},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":119,"col":2,"offset":3890},"end":{"line":119,"col":5,"offset":3893},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":180},"svalue_end":{"line":8,"col":22,"offset":195},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":119,"col":6,"offset":3894},"end":{"line":119,"col":11,"offset":3899},"abstract_content":"route"},"$FUNC":{"start":{"line":120,"col":5,"offset":3950},"end":{"line":120,"col":19,"offset":3964},"abstract_content":"update_product"},"$PARAM":{"start":{"line":120,"col":20,"offset":3965},"end":{"line":120,"col":30,"offset":3975},"abstract_content":"product_id"},"$LOG":{"start":{"line":145,"col":17,"offset":4729},"end":{"line":145,"col":21,"offset":4733},"abstract_content":"info"},"$SINK":{"start":{"line":145,"col":22,"offset":4734},"end":{"line":145,"col":54,"offset":4766},"abstract_content":"f\"Product updated: {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"940a8ece74fd69b24e8c1c2a9f00d9a4cf718d1b0a995d972860c0ce8fe9f45b66039213f93e6c6e7771bef141440c342533f4534b98a85ab5a7281a565657ea_0","lines":"        logging.info(f\"Product updated: {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":120,"col":20,"offset":3965},"end":{"line":120,"col":30,"offset":3975}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":120,"col":20,"offset":3965},"end":{"line":120,"col":30,"offset":3975}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":145,"col":22,"offset":4734},"end":{"line":145,"col":54,"offset":4766}},"f\"Product updated: {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":160,"col":9,"offset":5303},"end":{"line":160,"col":75,"offset":5369},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":155,"col":2,"offset":5144},"end":{"line":155,"col":5,"offset":5147},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":180},"svalue_end":{"line":8,"col":22,"offset":195},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":155,"col":6,"offset":5148},"end":{"line":155,"col":11,"offset":5153},"abstract_content":"route"},"$FUNC":{"start":{"line":156,"col":5,"offset":5207},"end":{"line":156,"col":19,"offset":5221},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":156,"col":20,"offset":5222},"end":{"line":156,"col":30,"offset":5232},"abstract_content":"product_id"},"$O":{"start":{"line":159,"col":18,"offset":5283},"end":{"line":159,"col":29,"offset":5294},"abstract_content":"db.cursor()"},"$SINK":{"start":{"line":160,"col":24,"offset":5318},"end":{"line":160,"col":59,"offset":5353},"abstract_content":"'DELETE FROM products WHERE id = ?'"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"a9d5dbbc29e15f1de3bd1d013357386ce6880e3d8fc6dac2a542e5637f0a71ec16145e487dd15d9b701fb2a7c50effbbdd391c1bd702d545ab13ea8b724908df_0","lines":"        cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":156,"col":20,"offset":5222},"end":{"line":156,"col":30,"offset":5232}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":156,"col":20,"offset":5222},"end":{"line":156,"col":30,"offset":5232}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":160,"col":9,"offset":5303},"end":{"line":160,"col":75,"offset":5369}},"cursor.execute('DELETE FROM products WHERE id = ?', (product_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":166,"col":22,"offset":5510},"end":{"line":166,"col":54,"offset":5542},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":155,"col":2,"offset":5144},"end":{"line":155,"col":5,"offset":5147},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":180},"svalue_end":{"line":8,"col":22,"offset":195},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":155,"col":6,"offset":5148},"end":{"line":155,"col":11,"offset":5153},"abstract_content":"route"},"$FUNC":{"start":{"line":156,"col":5,"offset":5207},"end":{"line":156,"col":19,"offset":5221},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":156,"col":20,"offset":5222},"end":{"line":156,"col":30,"offset":5232},"abstract_content":"product_id"},"$LOG":{"start":{"line":166,"col":17,"offset":5505},"end":{"line":166,"col":21,"offset":5509},"abstract_content":"info"},"$SINK":{"start":{"line":166,"col":22,"offset":5510},"end":{"line":166,"col":54,"offset":5542},"abstract_content":"f\"Product deleted: {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9b8f0fa2f7ab054eb19fa15d6a4a6c7d544ab1d9e9c43c0a8de4c05bda4f29a5a4447e6d2f43dbfc846602470c21f997596d46d656a22b0aaea12cfd169ae94b_0","lines":"        logging.info(f\"Product deleted: {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":156,"col":20,"offset":5222},"end":{"line":156,"col":30,"offset":5232}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":156,"col":20,"offset":5222},"end":{"line":156,"col":30,"offset":5232}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":166,"col":22,"offset":5510},"end":{"line":166,"col":54,"offset":5542}},"f\"Product deleted: {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":200,"col":5,"offset":6740},"end":{"line":200,"col":24,"offset":6759},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"be77b64631190a1f1ea8478fb0adeed1e29c1150067de39afea79ba3a38ed54dad8944add7a729775d48058a927ec1b3ae95cfadddfa45f41f2b5a7b2fd6f72c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-611/sample_63_original.py","start":{"line":200,"col":5,"offset":6740},"end":{"line":200,"col":24,"offset":6759},"extra":{"metavars":{"$APP":{"start":{"line":200,"col":5,"offset":6740},"end":{"line":200,"col":8,"offset":6743},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":180},"svalue_end":{"line":8,"col":22,"offset":195},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"4380f5f5eb0810afedc3116b11f77f6deef57a8fced3e3076ad16af7edfd6864989a00d9d38189af4a1e9251a981f8deb9aafddeca7ba150fdc7333ba1461b62_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.xml.tainted-django-xml-stdlib.tainted-django-xml-stdlib","path":"vulnerability_samples/CWE-611/sample_64_original.py","start":{"line":65,"col":23,"offset":2005},"end":{"line":65,"col":41,"offset":2023},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$CLS":{"start":{"line":61,"col":7,"offset":1884},"end":{"line":61,"col":24,"offset":1901},"abstract_content":"UpdateProfileView"},"$FUNC":{"start":{"line":62,"col":9,"offset":1917},"end":{"line":62,"col":13,"offset":1921},"abstract_content":"post"},"$SELF":{"start":{"line":62,"col":14,"offset":1922},"end":{"line":62,"col":18,"offset":1926},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":62,"col":20,"offset":1928},"end":{"line":62,"col":27,"offset":1935},"abstract_content":"request"},"$SINK":{"start":{"line":63,"col":20,"offset":1957},"end":{"line":63,"col":32,"offset":1969},"abstract_content":"request.body"}},"message":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. The xml parsing libraries are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, they are still vulnerable to denial of service attacks such as billion laughs and quadratic blowup. To mitigate these attacks, it is recommended to use a different parser such as defusedxml.","metadata":{"likelihood":"LOW","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"],"display-name":"XML Entity Expansion with Django","functional-categories":["web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi","xml::sink::xml-parser::sax","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.dom","xml::sink::xml-parser::xml.dom.minidom","xml::sink::xml-parser::xml.dom.pulldom","xml::sink::xml-parser::xml.etree","xml::sink::xml-parser::xml.sax"],"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html","https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://cwe.mitre.org/data/definitions/776.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A05_2021-Security_Misconfiguration","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","python","sax","stdlib","stdlib2","stdlib3","web","xml","xml.dom","xml.dom.minidom","xml.dom.pulldom","xml.etree","xml.sax"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.django.xml.tainted-django-xml-stdlib.tainted-django-xml-stdlib","shortlink":"https://sg.run/j2q7l","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139065,"rule_id":"JDUNBxA","rule_name":"python.django.xml.tainted-django-xml-stdlib.tainted-django-xml-stdlib","rv_id":947841,"url":"https://semgrep.dev/playground/r/6xTxqOo/python.django.xml.tainted-django-xml-stdlib.tainted-django-xml-stdlib","version_id":"6xTxqOo"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.xml.tainted-django-xml-stdlib.tainted-django-xml-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"0346147e31eee558b3e4db3be71e5b13aaa79798f2aa2ae565a56d8ad9e86645587418c84c52b93a4adc979c868533c6f48401a73621b5b0ff6e51f38fe099bd_0","lines":"            profile = ET.parse(xml_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_64_original.py","start":{"line":65,"col":23,"offset":2005},"end":{"line":65,"col":41,"offset":2023}},"ET.parse(xml_data)"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_64_original.py","start":{"line":65,"col":23,"offset":2005},"end":{"line":65,"col":41,"offset":2023}},"ET.parse(xml_data)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_64_original.py","start":{"line":65,"col":23,"offset":2005},"end":{"line":65,"col":41,"offset":2023},"extra":{"metavars":{"$...ARGS":{"start":{"line":65,"col":32,"offset":2014},"end":{"line":65,"col":40,"offset":2022},"abstract_content":"xml_data"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_data)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"8c60fa4c613a42602b0ef29dbcd01087553403f309c36329a891a3e9f83c339eead2814e62de06f95aab7abbc64715a6a9601ca62fa96ae713c8ea91979bde84_0","lines":"            profile = ET.parse(xml_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_66_original.py","start":{"line":55,"col":25,"offset":1690},"end":{"line":55,"col":43,"offset":1708},"extra":{"metavars":{"$...ARGS":{"start":{"line":55,"col":34,"offset":1699},"end":{"line":55,"col":42,"offset":1707},"abstract_content":"xml_data"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_data)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0439dcfd57db3c883fc5c949b15c25bef87c06b6706e69f75c1e7570b795786781aec21c91eee45e1bb4362fe8c418146d81686a7d6d3b40790f80736f7efeed_0","lines":"        event_details = ET.parse(xml_data).getroot()  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_66_original.py","start":{"line":100,"col":25,"offset":3509},"end":{"line":100,"col":43,"offset":3527},"extra":{"metavars":{"$...ARGS":{"start":{"line":100,"col":34,"offset":3518},"end":{"line":100,"col":42,"offset":3526},"abstract_content":"xml_data"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_data)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0439dcfd57db3c883fc5c949b15c25bef87c06b6706e69f75c1e7570b795786781aec21c91eee45e1bb4362fe8c418146d81686a7d6d3b40790f80736f7efeed_1","lines":"        event_details = ET.parse(xml_data).getroot()  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":72,"col":16,"offset":1899},"end":{"line":72,"col":34,"offset":1917},"extra":{"metavars":{"$...ARGS":{"start":{"line":72,"col":25,"offset":1908},"end":{"line":72,"col":33,"offset":1916},"abstract_content":"xml_data"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_data)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"5cfe0c4f5b40e061c31175f3075fb81f9be28d4f4b6aee26e63604ef2ed964bf63be74f0bff574267bafddc43b57de925f8c878865e3cf0a04b5c32dce271885_0","lines":"        tree = ET.parse(xml_data)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":96,"col":13,"offset":2692},"end":{"line":96,"col":93,"offset":2772},"extra":{"metavars":{"$APP":{"start":{"line":85,"col":2,"offset":2334},"end":{"line":85,"col":7,"offset":2339},"abstract_content":"route"},"$FUNC":{"start":{"line":86,"col":5,"offset":2379},"end":{"line":86,"col":12,"offset":2386},"abstract_content":"get_xml"},"$PARAM":{"start":{"line":96,"col":33,"offset":2712},"end":{"line":96,"col":35,"offset":2714},"abstract_content":"id"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"01805866eeb887848580df77583f222a08fc1c340fc175531f3f40a3c5277369a8ce84136674bb8bfb8453876b6d991286c286d6dba72f7891d167a90c6ebf15_0","lines":"            return f\"XML entry {id}: Tag: {tag}, Content: {content}, Timestamp: {timestamp}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":96,"col":33,"offset":2712},"end":{"line":96,"col":35,"offset":2714}},"id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":96,"col":13,"offset":2692},"end":{"line":96,"col":93,"offset":2772}},"return f\"XML entry {id}: Tag: {tag}, Content: {content}, Timestamp: {timestamp}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":99,"col":13,"offset":2833},"end":{"line":99,"col":54,"offset":2874},"extra":{"metavars":{"$APP":{"start":{"line":85,"col":2,"offset":2334},"end":{"line":85,"col":7,"offset":2339},"abstract_content":"route"},"$FUNC":{"start":{"line":86,"col":5,"offset":2379},"end":{"line":86,"col":12,"offset":2386},"abstract_content":"get_xml"},"$PARAM":{"start":{"line":99,"col":50,"offset":2870},"end":{"line":99,"col":52,"offset":2872},"abstract_content":"id"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"01805866eeb887848580df77583f222a08fc1c340fc175531f3f40a3c5277369a8ce84136674bb8bfb8453876b6d991286c286d6dba72f7891d167a90c6ebf15_1","lines":"            return f\"No XML entry found with id {id}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":99,"col":50,"offset":2870},"end":{"line":99,"col":52,"offset":2872}},"id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":99,"col":13,"offset":2833},"end":{"line":99,"col":54,"offset":2874}},"return f\"No XML entry found with id {id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":120,"col":13,"offset":3578},"end":{"line":120,"col":58,"offset":3623},"extra":{"metavars":{"$APP":{"start":{"line":115,"col":2,"offset":3405},"end":{"line":115,"col":7,"offset":3410},"abstract_content":"route"},"$FUNC":{"start":{"line":116,"col":5,"offset":3456},"end":{"line":116,"col":15,"offset":3466},"abstract_content":"delete_xml"},"$PARAM":{"start":{"line":120,"col":33,"offset":3598},"end":{"line":120,"col":35,"offset":3600},"abstract_content":"id"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5e5f4e8d1478fd5df9f3f9fa363673790d6feb069876c55c73efccc0fc131e1b8b47ba47d38ba2b6fd7614b5e584edc5dbb0a4a5c93ac05fa9a855e6c6816889_0","lines":"            return f\"XML entry {id} deleted successfully\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":120,"col":33,"offset":3598},"end":{"line":120,"col":35,"offset":3600}},"id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":120,"col":13,"offset":3578},"end":{"line":120,"col":58,"offset":3623}},"return f\"XML entry {id} deleted successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":123,"col":13,"offset":3684},"end":{"line":123,"col":54,"offset":3725},"extra":{"metavars":{"$APP":{"start":{"line":115,"col":2,"offset":3405},"end":{"line":115,"col":7,"offset":3410},"abstract_content":"route"},"$FUNC":{"start":{"line":116,"col":5,"offset":3456},"end":{"line":116,"col":15,"offset":3466},"abstract_content":"delete_xml"},"$PARAM":{"start":{"line":123,"col":50,"offset":3721},"end":{"line":123,"col":52,"offset":3723},"abstract_content":"id"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5e5f4e8d1478fd5df9f3f9fa363673790d6feb069876c55c73efccc0fc131e1b8b47ba47d38ba2b6fd7614b5e584edc5dbb0a4a5c93ac05fa9a855e6c6816889_1","lines":"            return f\"No XML entry found with id {id}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":123,"col":50,"offset":3721},"end":{"line":123,"col":52,"offset":3723}},"id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-611/sample_68_original.py","start":{"line":123,"col":13,"offset":3684},"end":{"line":123,"col":54,"offset":3725}},"return f\"No XML entry found with id {id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_69_original.py","start":{"line":36,"col":20,"offset":1136},"end":{"line":36,"col":38,"offset":1154},"extra":{"metavars":{"$...ARGS":{"start":{"line":36,"col":29,"offset":1145},"end":{"line":36,"col":37,"offset":1153},"abstract_content":"xml_data"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_data)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"22829501ef1956287c78a4ec28e2b94285333c7f6ba906ba7e5711ae66d64196b9975658fe727d568bc4e2a07058531a61bff4dd55e2a2800dba90fe7b178f5b_0","lines":"            tree = ET.parse(xml_data)  # Vulnerable XML parsing","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","path":"vulnerability_samples/CWE-611/sample_70_original.py","start":{"line":60,"col":16,"offset":1896},"end":{"line":60,"col":39,"offset":1919},"extra":{"metavars":{"$...ARGS":{"start":{"line":60,"col":25,"offset":1905},"end":{"line":60,"col":38,"offset":1918},"abstract_content":"xml_file.file"}},"message":"The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.","fix":"defusedxml.etree.ElementTree.parse(xml_file.file)","metadata":{"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"cwe":["CWE-611: Improper Restriction of XML External Entity Reference"],"references":["https://docs.python.org/3/library/xml.html","https://github.com/tiran/defusedxml","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","shortlink":"https://sg.run/n3jG","semgrep.dev":{"rule":{"origin":"community","r_id":72436,"rule_id":"X5Uqnx","rule_name":"python.lang.security.use-defused-xml-parse.use-defused-xml-parse","rv_id":946406,"url":"https://semgrep.dev/playground/r/7ZTrQyb/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","version_id":"7ZTrQyb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.use-defused-xml-parse.use-defused-xml-parse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"3c69f893413fdbaee2af0bc2dfd765101836a4e92b9b2759a3d32262ea9ea5bf75c2c4f97bba64b7ee0676941854e8e2a85161301d34cf576644df2ba3b3a676_0","lines":"        tree = ET.parse(xml_file.file)  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-614/sample_196_original.py","start":{"line":134,"col":13,"offset":5331},"end":{"line":134,"col":71,"offset":5389},"extra":{"metavars":{"$FUNC":{"start":{"line":129,"col":24,"offset":5158},"end":{"line":129,"col":33,"offset":5167},"abstract_content":"matchdict"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e54fd9bda76be2418ddfc87687b03ac66cab4e0106c92f9aad74df2d022e3b3cdade7ba6bd0fb3d0b4dc8bae5496dd3ac6bf35e63a5b043c0c6ba1e4a06b636c_0","lines":"            return f\"Profile of {user.username} (Email: {user.email})\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-614/sample_196_original.py","start":{"line":129,"col":16,"offset":5150},"end":{"line":129,"col":45,"offset":5179}},"request.matchdict['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-614/sample_196_original.py","start":{"line":129,"col":5,"offset":5139},"end":{"line":129,"col":13,"offset":5147}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-614/sample_196_original.py","start":{"line":132,"col":9,"offset":5238},"end":{"line":132,"col":13,"offset":5242}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-614/sample_196_original.py","start":{"line":134,"col":13,"offset":5331},"end":{"line":134,"col":71,"offset":5389}},"return f\"Profile of {user.username} (Email: {user.email})\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":60,"col":22,"offset":1794},"end":{"line":60,"col":52,"offset":1824},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":49,"col":24,"offset":1377},"end":{"line":49,"col":32,"offset":1385},"abstract_content":"get_json"},"$LOG":{"start":{"line":60,"col":17,"offset":1789},"end":{"line":60,"col":21,"offset":1793},"abstract_content":"info"},"$SINK":{"start":{"line":60,"col":22,"offset":1794},"end":{"line":60,"col":52,"offset":1824},"abstract_content":"f\"User registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"86b7bfcedd1881af5edfbb4393dff9fe19a9b9eb57b78b8e9eae16207a5c417fb6923f2eadbad3e8f7ecd9b83470fbe3f80744ef983f7f84039c52ad37edf40b_0","lines":"        logging.info(f\"User registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":49,"col":16,"offset":1369},"end":{"line":49,"col":34,"offset":1387}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":49,"col":9,"offset":1362},"end":{"line":49,"col":13,"offset":1366}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":51,"col":9,"offset":1451},"end":{"line":51,"col":17,"offset":1459}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":60,"col":22,"offset":1794},"end":{"line":60,"col":52,"offset":1824}},"f\"User registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":82,"col":26,"offset":2671},"end":{"line":82,"col":55,"offset":2700},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":72,"col":24,"offset":2251},"end":{"line":72,"col":32,"offset":2259},"abstract_content":"get_json"},"$LOG":{"start":{"line":82,"col":21,"offset":2666},"end":{"line":82,"col":25,"offset":2670},"abstract_content":"info"},"$SINK":{"start":{"line":82,"col":26,"offset":2671},"end":{"line":82,"col":55,"offset":2700},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"670455ebca9f308d7afd7ea861a700807c97303758d77ec475898fdfe0d47bd027d4dbba21f2a750c2e3c80cff6d830aae4431f26309f37cc77da8c1bf430e28_0","lines":"            logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":72,"col":16,"offset":2243},"end":{"line":72,"col":34,"offset":2261}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":72,"col":9,"offset":2236},"end":{"line":72,"col":13,"offset":2240}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":74,"col":9,"offset":2325},"end":{"line":74,"col":17,"offset":2333}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":82,"col":26,"offset":2671},"end":{"line":82,"col":55,"offset":2700}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-668/sample_123_original.py","start":{"line":193,"col":5,"offset":6746},"end":{"line":193,"col":39,"offset":6780},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"2befdccd5c1d9a7b21a74fd108f32bc7eeb2a595a00b1f3faf6501667d42e55ae0fae55ee5a1c1abe116b184e4ddddc9e2a1831bd5220dcabe82d3446af82c4d_0","lines":"    app.run(host=\"0.0.0.0\", port=5000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":14,"col":1,"offset":506},"end":{"line":14,"col":27,"offset":532},"extra":{"metavars":{"$M":{"start":{"line":14,"col":1,"offset":506},"end":{"line":14,"col":4,"offset":509},"abstract_content":"app"}},"message":"Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","shortlink":"https://sg.run/LwPo","semgrep.dev":{"rule":{"origin":"community","r_id":9539,"rule_id":"JDUyJR","rule_name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","rv_id":946212,"url":"https://semgrep.dev/playground/r/JdTDy8x/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","version_id":"JdTDy8x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ddc4c012e84656122cab12a6a6de9132418d9ae6752864a83c49c306c6d330dd21cee24bbc5d64d65f6d663b907071cb322fafea5760868817fcaa0c364ea27c_0","lines":"app.config['DEBUG'] = True","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":72,"col":18,"offset":2539},"end":{"line":72,"col":69,"offset":2590},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":67,"col":2,"offset":2375},"end":{"line":67,"col":5,"offset":2378},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":299},"svalue_end":{"line":10,"col":22,"offset":314},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":67,"col":6,"offset":2379},"end":{"line":67,"col":11,"offset":2384},"abstract_content":"route"},"$FUNC":{"start":{"line":69,"col":5,"offset":2436},"end":{"line":69,"col":13,"offset":2444},"abstract_content":"api_data"},"$PARAM":{"start":{"line":69,"col":14,"offset":2445},"end":{"line":69,"col":26,"offset":2457},"abstract_content":"current_user"},"$LOG":{"start":{"line":72,"col":13,"offset":2534},"end":{"line":72,"col":17,"offset":2538},"abstract_content":"info"},"$SINK":{"start":{"line":72,"col":18,"offset":2539},"end":{"line":72,"col":69,"offset":2590},"abstract_content":"f\"Data processed for user: {current_user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"cbbeff6bfa3ac39f4ffab4e0edf5720bf72b01dc8da6357928a575083447f6039b25e1b626be7c3f11eb015d8f86e30d65aff5d758060877f7a7d08fb0baecac_0","lines":"    logging.info(f\"Data processed for user: {current_user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":69,"col":14,"offset":2445},"end":{"line":69,"col":26,"offset":2457}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":69,"col":14,"offset":2445},"end":{"line":69,"col":26,"offset":2457}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":72,"col":18,"offset":2539},"end":{"line":72,"col":69,"offset":2590}},"f\"Data processed for user: {current_user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":92,"col":5,"offset":3217},"end":{"line":92,"col":32,"offset":3244},"extra":{"metavars":{"$MODEL":{"start":{"line":92,"col":5,"offset":3217},"end":{"line":92,"col":9,"offset":3221},"abstract_content":"user","propagated_value":{"svalue_start":{"line":91,"col":12,"offset":3176},"svalue_end":{"line":91,"col":48,"offset":3212},"svalue_abstract_content":"User(username username email email)"}},"$X":{"start":{"line":92,"col":23,"offset":3235},"end":{"line":92,"col":31,"offset":3243},"abstract_content":"password","propagated_value":{"svalue_start":{"line":79,"col":16,"offset":2759},"svalue_end":{"line":79,"col":36,"offset":2779},"svalue_abstract_content":"data.get('password')"}}},"message":"The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(password, user=user):\n        user.set_password(password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5d526eddce96cb6ead7d0583fe4f6e32f21923fcde83728169b02be319ce00369ea4fec2135a4200b891eca4dbb1b7962410fb5512c9cfa7eaf0ce76148fee3a_0","lines":"    user.set_password(password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":95,"col":18,"offset":3311},"end":{"line":95,"col":52,"offset":3345},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":77,"col":20,"offset":2697},"end":{"line":77,"col":28,"offset":2705},"abstract_content":"get_json"},"$LOG":{"start":{"line":95,"col":13,"offset":3306},"end":{"line":95,"col":17,"offset":3310},"abstract_content":"info"},"$SINK":{"start":{"line":95,"col":18,"offset":3311},"end":{"line":95,"col":52,"offset":3345},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e581e9a08d758ffb47da5a68e7771d779b925317e9b5e2cfacd65768f4ffa6d994d0ba8265b5c133e3f7d3d66b6f3efdfa07bf06aaf6a70ef6ff6ed779e06fcc_0","lines":"    logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":77,"col":12,"offset":2689},"end":{"line":77,"col":30,"offset":2707}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":77,"col":5,"offset":2682},"end":{"line":77,"col":9,"offset":2686}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":78,"col":5,"offset":2712},"end":{"line":78,"col":13,"offset":2720}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":95,"col":18,"offset":3311},"end":{"line":95,"col":52,"offset":3345}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":106,"col":22,"offset":3844},"end":{"line":106,"col":51,"offset":3873},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":100,"col":20,"offset":3488},"end":{"line":100,"col":28,"offset":3496},"abstract_content":"get_json"},"$LOG":{"start":{"line":106,"col":17,"offset":3839},"end":{"line":106,"col":21,"offset":3843},"abstract_content":"info"},"$SINK":{"start":{"line":106,"col":22,"offset":3844},"end":{"line":106,"col":51,"offset":3873},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"90a80d80d72fa97bcb40ca40dc302fc71ae16d54feeecec17b0dc03fd445979cc7395187b5431f600f17c9ac56b519fb410e96511fd46acc9259a9ef81f84416_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":100,"col":12,"offset":3480},"end":{"line":100,"col":30,"offset":3498}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":100,"col":5,"offset":3473},"end":{"line":100,"col":9,"offset":3477}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":101,"col":5,"offset":3503},"end":{"line":101,"col":13,"offset":3511}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":106,"col":22,"offset":3844},"end":{"line":106,"col":51,"offset":3873}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":125,"col":22,"offset":4674},"end":{"line":125,"col":74,"offset":4726},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":110,"col":2,"offset":3981},"end":{"line":110,"col":5,"offset":3984},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":299},"svalue_end":{"line":10,"col":22,"offset":314},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":110,"col":6,"offset":3985},"end":{"line":110,"col":11,"offset":3990},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":4046},"end":{"line":112,"col":10,"offset":4051},"abstract_content":"posts"},"$PARAM":{"start":{"line":112,"col":11,"offset":4052},"end":{"line":112,"col":23,"offset":4064},"abstract_content":"current_user"},"$LOG":{"start":{"line":125,"col":17,"offset":4669},"end":{"line":125,"col":21,"offset":4673},"abstract_content":"info"},"$SINK":{"start":{"line":125,"col":22,"offset":4674},"end":{"line":125,"col":74,"offset":4726},"abstract_content":"f\"New post created by user: {current_user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"cf82973c51c0560e0a811ef07144c3fa57f94f52aeaefbb2739e68685dc05ddc079d9f19e5619495acda1ac782095182b67fff0be2295585acc3ae29e3dcd9d3_0","lines":"        logging.info(f\"New post created by user: {current_user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":112,"col":11,"offset":4052},"end":{"line":112,"col":23,"offset":4064}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":112,"col":11,"offset":4052},"end":{"line":112,"col":23,"offset":4064}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":125,"col":22,"offset":4674},"end":{"line":125,"col":74,"offset":4726}},"f\"New post created by user: {current_user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":142,"col":22,"offset":5412},"end":{"line":142,"col":70,"offset":5460},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":128,"col":2,"offset":4800},"end":{"line":128,"col":5,"offset":4803},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":299},"svalue_end":{"line":10,"col":22,"offset":314},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":128,"col":6,"offset":4804},"end":{"line":128,"col":11,"offset":4809},"abstract_content":"route"},"$FUNC":{"start":{"line":130,"col":5,"offset":4888},"end":{"line":130,"col":9,"offset":4892},"abstract_content":"post"},"$PARAM":{"start":{"line":130,"col":10,"offset":4893},"end":{"line":130,"col":22,"offset":4905},"abstract_content":"current_user"},"$LOG":{"start":{"line":142,"col":17,"offset":5407},"end":{"line":142,"col":21,"offset":5411},"abstract_content":"info"},"$SINK":{"start":{"line":142,"col":22,"offset":5412},"end":{"line":142,"col":70,"offset":5460},"abstract_content":"f\"Post updated by user: {current_user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2c9d3d41368b451532b85444a0d17d12c1df2c7c592a96d22a81b268f981bef137a87b1b93af2902af1004c1f30495535623687d9f9c2e6df073e5b4b652a316_0","lines":"        logging.info(f\"Post updated by user: {current_user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":130,"col":10,"offset":4893},"end":{"line":130,"col":22,"offset":4905}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":130,"col":10,"offset":4893},"end":{"line":130,"col":22,"offset":4905}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":142,"col":22,"offset":5412},"end":{"line":142,"col":70,"offset":5460}},"f\"Post updated by user: {current_user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":147,"col":22,"offset":5645},"end":{"line":147,"col":70,"offset":5693},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":128,"col":2,"offset":4800},"end":{"line":128,"col":5,"offset":4803},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":299},"svalue_end":{"line":10,"col":22,"offset":314},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":128,"col":6,"offset":4804},"end":{"line":128,"col":11,"offset":4809},"abstract_content":"route"},"$FUNC":{"start":{"line":130,"col":5,"offset":4888},"end":{"line":130,"col":9,"offset":4892},"abstract_content":"post"},"$PARAM":{"start":{"line":130,"col":10,"offset":4893},"end":{"line":130,"col":22,"offset":4905},"abstract_content":"current_user"},"$LOG":{"start":{"line":147,"col":17,"offset":5640},"end":{"line":147,"col":21,"offset":5644},"abstract_content":"info"},"$SINK":{"start":{"line":147,"col":22,"offset":5645},"end":{"line":147,"col":70,"offset":5693},"abstract_content":"f\"Post deleted by user: {current_user.username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d86c7153ebe92a04e0cd40613bc094f3b398fc61fcb9e0f315d462235ec03a1197a23dfe9c2aeeb372de7fa02f54330d6e407edea2a911d2d5164475dc003aa4_0","lines":"        logging.info(f\"Post deleted by user: {current_user.username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":130,"col":10,"offset":4893},"end":{"line":130,"col":22,"offset":4905}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":130,"col":10,"offset":4893},"end":{"line":130,"col":22,"offset":4905}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-668/sample_124_original.py","start":{"line":147,"col":22,"offset":5645},"end":{"line":147,"col":70,"offset":5693}},"f\"Post deleted by user: {current_user.username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.web.django-cookie-httponly-missing.django-cookie-httponly-missing","path":"vulnerability_samples/CWE-668/sample_125_original.py","start":{"line":73,"col":5,"offset":2880},"end":{"line":73,"col":80,"offset":2955},"extra":{"metavars":{"$RESPONSE":{"start":{"line":72,"col":16,"offset":2832},"end":{"line":72,"col":59,"offset":2875},"abstract_content":"Response(f\"Preference set to {preference}\")"},"$SET_COOKIE":{"start":{"line":73,"col":14,"offset":2889},"end":{"line":73,"col":24,"offset":2899},"abstract_content":"set_cookie"},"$...ARGS":{"start":{"line":73,"col":25,"offset":2900},"end":{"line":73,"col":79,"offset":2954},"abstract_content":"'preference'preference samesite'Lax'secure False"}},"message":"Detected a cookie where the `HttpOnly` flag is either missing or disabled. The `HttpOnly` cookie flag instructs the browser to forbid client-side JavaScript to read the cookie. If JavaScript interaction is required, you can ignore this finding. However, set the `HttpOnly` flag to `true` in all other cases.","fix":"Response(f\"Preference set to {preference}\").set_cookie('preference', preference, samesite='Lax', secure=False, httponly=True)","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"],"display-name":"Missing HttpOnly Flag in Cookie","functional-categories":["web::search::cookie-config::django","web::search::cookie-config::starlette"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"],"technology":["cookie","cookies","django","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cookie Security"],"source":"https://semgrep.dev/r/python.django.web.django-cookie-httponly-missing.django-cookie-httponly-missing","shortlink":"https://sg.run/9Az3z","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137923,"rule_id":"6JUvlyl","rule_name":"python.django.web.django-cookie-httponly-missing.django-cookie-httponly-missing","rv_id":947831,"url":"https://semgrep.dev/playground/r/RGTAPY6/python.django.web.django-cookie-httponly-missing.django-cookie-httponly-missing","version_id":"RGTAPY6"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.web.django-cookie-httponly-missing.django-cookie-httponly-missing","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ca4b14f62e17c5c406a8109503b883c57067c0d69c7dae9a85471fec66258ded74cd23cfe772e4fd5bfbd5704b40e3f18c6103a742bbd19676fa596298f950b1_0","lines":"    response.set_cookie('preference', preference, samesite='Lax', secure=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.web.fastapi-cookie-httponly-missing.fastapi-cookie-httponly-missing","path":"vulnerability_samples/CWE-668/sample_125_original.py","start":{"line":73,"col":5,"offset":2880},"end":{"line":73,"col":80,"offset":2955},"extra":{"metavars":{"$RESPONSE":{"start":{"line":72,"col":16,"offset":2832},"end":{"line":72,"col":59,"offset":2875},"abstract_content":"Response(f\"Preference set to {preference}\")"},"$...ARGS":{"start":{"line":73,"col":25,"offset":2900},"end":{"line":73,"col":79,"offset":2954},"abstract_content":"'preference'preference samesite'Lax'secure False"}},"message":"Detected a cookie where the `HttpOnly` flag is either missing or disabled. The `HttpOnly` cookie flag instructs the browser to forbid client-side JavaScript to read the cookie. If JavaScript interaction is required, you can ignore this finding. However, set the `HttpOnly` flag to `true` in all other cases.","fix":"Response(f\"Preference set to {preference}\").set_cookie('preference', preference, samesite='Lax', secure=False, httponly=True)","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"],"display-name":"Missing 'HttpOnly' Flag in FastAPI Cookie","functional-categories":["web::search::cookie-config::fastapi","web::search::cookie-config::starlette"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"],"technology":["cookie","cookies","fastapi","starlette","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cookie Security"],"source":"https://semgrep.dev/r/python.fastapi.web.fastapi-cookie-httponly-missing.fastapi-cookie-httponly-missing","shortlink":"https://sg.run/DbnXd","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137952,"rule_id":"4bURLZl","rule_name":"python.fastapi.web.fastapi-cookie-httponly-missing.fastapi-cookie-httponly-missing","rv_id":947895,"url":"https://semgrep.dev/playground/r/qkT4od1/python.fastapi.web.fastapi-cookie-httponly-missing.fastapi-cookie-httponly-missing","version_id":"qkT4od1"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.web.fastapi-cookie-httponly-missing.fastapi-cookie-httponly-missing","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d0a289e93c8d51e797c0b62c0cd9cbf4af86f63b6bf54143bdad882466e708604ff1c09dee53c89aa0d7e251fe329cfe4bcbf73fc781cc9be6e41f51b85b1d6c_0","lines":"    response.set_cookie('preference', preference, samesite='Lax', secure=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.web.django-cookie-secure-false.django-cookie-secure-false","path":"vulnerability_samples/CWE-668/sample_125_original.py","start":{"line":73,"col":74,"offset":2949},"end":{"line":73,"col":79,"offset":2954},"extra":{"metavars":{"$RESPONSE":{"start":{"line":72,"col":16,"offset":2832},"end":{"line":72,"col":59,"offset":2875},"abstract_content":"Response(f\"Preference set to {preference}\")"},"$SET_COOKIE":{"start":{"line":73,"col":14,"offset":2889},"end":{"line":73,"col":24,"offset":2899},"abstract_content":"set_cookie"},"$FALSE":{"start":{"line":73,"col":74,"offset":2949},"end":{"line":73,"col":79,"offset":2954},"abstract_content":"False"}},"message":"Detected a cookie where the `Secure` flag is either missing or disabled. The `Secure` cookie flag instructs the browser to forbid sending the cookie over an insecure HTTP request. Set the `Secure` flag to `true` so the cookie will only be sent over HTTPS.","fix":"True","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"],"display-name":"Missing 'Secure' Attribute in django Cookie","functional-categories":["web::search::cookie-config::django","web::search::cookie-config::starlette"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"],"technology":["cookie","cookies","django","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cookie Security"],"source":"https://semgrep.dev/r/python.django.web.django-cookie-secure-false.django-cookie-secure-false","shortlink":"https://sg.run/bwGWd","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137926,"rule_id":"pKU1dbZ","rule_name":"python.django.web.django-cookie-secure-false.django-cookie-secure-false","rv_id":947834,"url":"https://semgrep.dev/playground/r/DkTNW4l/python.django.web.django-cookie-secure-false.django-cookie-secure-false","version_id":"DkTNW4l"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.web.django-cookie-secure-false.django-cookie-secure-false","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"250ebb00f4bf600026413b288544f1a81a06c34196eeaa1cd62b21d8ba02d1ae4841342427811a90814d71a35e6884656854ca08fe744a14631e72df6c8fc9f5_0","lines":"    response.set_cookie('preference', preference, samesite='Lax', secure=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.web.fastapi-cookie-secure-false.fastapi-cookie-secure-false","path":"vulnerability_samples/CWE-668/sample_125_original.py","start":{"line":73,"col":74,"offset":2949},"end":{"line":73,"col":79,"offset":2954},"extra":{"metavars":{"$RESPONSE":{"start":{"line":72,"col":16,"offset":2832},"end":{"line":72,"col":59,"offset":2875},"abstract_content":"Response(f\"Preference set to {preference}\")"},"$FALSE":{"start":{"line":73,"col":74,"offset":2949},"end":{"line":73,"col":79,"offset":2954},"abstract_content":"False"}},"message":"Detected a cookie where the `Secure` flag is either missing or disabled. The `Secure` cookie flag instructs the browser to forbid sending the cookie over an insecure HTTP request. Set the `Secure` flag to `true` so the cookie will only be sent over HTTPS.","fix":"True","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"],"display-name":"Missing 'Secure' Attribute in FastAPI Cookie","functional-categories":["web::search::cookie-config::fastapi","web::search::cookie-config::starlette"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://owasp.org/Top10/A05_2021-Security_Misconfiguration"],"technology":["cookie","cookies","fastapi","starlette","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cookie Security"],"source":"https://semgrep.dev/r/python.fastapi.web.fastapi-cookie-secure-false.fastapi-cookie-secure-false","shortlink":"https://sg.run/0oDPB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137954,"rule_id":"JDUNBDz","rule_name":"python.fastapi.web.fastapi-cookie-secure-false.fastapi-cookie-secure-false","rv_id":947897,"url":"https://semgrep.dev/playground/r/YDTvr1r/python.fastapi.web.fastapi-cookie-secure-false.fastapi-cookie-secure-false","version_id":"YDTvr1r"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.web.fastapi-cookie-secure-false.fastapi-cookie-secure-false","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"071cf23c5e4b35a8c46fbb2a6b45549d882349fc7e2c3646051afbe4d8fa4f197241b3c83d0a751ee02d530097bb514e64efebf11e89b65f0588e45c5de5c8ce_0","lines":"    response.set_cookie('preference', preference, samesite='Lax', secure=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":69,"col":12,"offset":2086},"end":{"line":69,"col":60,"offset":2134},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"15de46b4049d4a22e6f796af7204c46a4e0e0ec4f27e875c371fd3fba16e1f5d060108690dc855ae06424f26880d11e3bc6a417d226cbf3b1c24bea5519e94de_0","lines":"    return render_template_string(HTML_TEMPLATE, result=\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.subprocess-injection.subprocess-injection","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":18,"offset":2255},"end":{"line":75,"col":103,"offset":2340},"extra":{"metavars":{"$FUNC":{"start":{"line":75,"col":29,"offset":2266},"end":{"line":75,"col":41,"offset":2278},"abstract_content":"check_output"}},"message":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.","metadata":{"category":"security","technology":["flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"confidence":"HIGH","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection","shortlink":"https://sg.run/5gW3","semgrep.dev":{"rule":{"origin":"community","r_id":31147,"rule_id":"8GU3qp","rule_name":"python.flask.security.injection.subprocess-injection.subprocess-injection","rv_id":946227,"url":"https://semgrep.dev/playground/r/zyTlk7Y/python.flask.security.injection.subprocess-injection.subprocess-injection","version_id":"zyTlk7Y"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"3d55dd18d13ab8312f31fa21057b7d014951b757029b106d7912cd45f4836b53e784781fbce4a7ea39954af746fd2ad06451b434fe58e445d7d4bc7bc99cd1e0_0","lines":"        result = subprocess.check_output(f\"ls -lah {directory}\", shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":17,"offset":2194},"end":{"line":73,"col":51,"offset":2228}},"request.args.get(\"directory\", \".\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":5,"offset":2182},"end":{"line":73,"col":14,"offset":2191}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":18,"offset":2255},"end":{"line":75,"col":103,"offset":2340}},"subprocess.check_output(f\"ls -lah {directory}\", shell=True, stderr=subprocess.STDOUT)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":42,"offset":2279},"end":{"line":75,"col":64,"offset":2301},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":73,"col":25,"offset":2202},"end":{"line":73,"col":29,"offset":2206},"abstract_content":"args"},"$FUNC":{"start":{"line":75,"col":29,"offset":2266},"end":{"line":75,"col":41,"offset":2278},"abstract_content":"check_output"},"$CMD":{"start":{"line":75,"col":42,"offset":2279},"end":{"line":75,"col":64,"offset":2301},"abstract_content":"f\"ls -lah {directory}\""}},"message":"Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. Untrusted input in a command can lead to command injection, allowing attackers to execute arbitrary commands and gain control of the system. To prevent this: 1. Avoid direct command execution: Don't run OS commands with user input directly. 2. Validate and sanitize input: Ensure input is safe by removing or escaping dangerous characters. 3. (preferred) Use safe methods: Use `subprocess.run` without `shell=True` to safely execute commands, as it doesn't call a system shell by default. If `shell=True` is necessary, properly quote and escape all input to prevent shell injection. This is a secure by default approach.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["secure default"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"OS Command Injection with Flask","functional-categories":["os::sink::os-command-or-thread::stdlib","os::sink::os-command-or-thread::stdlib2","os::sink::os-command-or-thread::stdlib3","os::sink::os-command-or-thread::subprocess","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.python.org/3/library/os.html","https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module","https://owasp.org/Top10/A03_2021-Injection","https://semgrep.dev/docs/cheat-sheets/python-command-injection/","https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"],"technology":["flask","flask-wtf","stdlib","stdlib2","stdlib3","subprocess","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","shortlink":"https://sg.run/bwGOd","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139070,"rule_id":"BYUXgZq","rule_name":"python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","rv_id":947954,"url":"https://semgrep.dev/playground/r/NdTqAbJ/python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","version_id":"NdTqAbJ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"709277e25547596e05ef1bfedd16df2e4d674e95f9ae34a06b9b4bc1fea2af6377eb25f0135aa2c62adba3d7f9f18a79146f2da32e90d4022abbbb9465a08e03_0","lines":"        result = subprocess.check_output(f\"ls -lah {directory}\", shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":17,"offset":2194},"end":{"line":73,"col":51,"offset":2228}},"request.args.get(\"directory\", \".\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":5,"offset":2182},"end":{"line":73,"col":14,"offset":2191}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":42,"offset":2279},"end":{"line":75,"col":64,"offset":2301}},"f\"ls -lah {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":42,"offset":2279},"end":{"line":75,"col":64,"offset":2301},"extra":{"metavars":{"$FUNC":{"start":{"line":75,"col":29,"offset":2266},"end":{"line":75,"col":41,"offset":2278},"abstract_content":"check_output"},"$CMD":{"start":{"line":75,"col":42,"offset":2279},"end":{"line":75,"col":64,"offset":2301},"abstract_content":"f\"ls -lah {directory}\""}},"message":"Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"asvs":{"control_id":"5.3.8 OS Command Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html","https://docs.python.org/3/library/shlex.html","https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","shortlink":"https://sg.run/NWxp","semgrep.dev":{"rule":{"origin":"community","r_id":27271,"rule_id":"JDUz3R","rule_name":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","rv_id":946391,"url":"https://semgrep.dev/playground/r/9lTy1bg/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","version_id":"9lTy1bg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"78c035b630bf8cc78af204b2c0d28290037552bc709ae5b6494725b00ee47787a6afc90eb647905389ce6052a403279208f8cec743bdc1ffbd266ae2fafb7c5f_0","lines":"        result = subprocess.check_output(f\"ls -lah {directory}\", shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":17,"offset":2194},"end":{"line":73,"col":51,"offset":2228}},"request.args.get(\"directory\", \".\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":5,"offset":2182},"end":{"line":73,"col":14,"offset":2191}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":42,"offset":2279},"end":{"line":75,"col":64,"offset":2301}},"f\"ls -lah {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":75,"col":72,"offset":2309},"end":{"line":75,"col":76,"offset":2313},"extra":{"metavars":{"$FUNC":{"start":{"line":75,"col":29,"offset":2266},"end":{"line":75,"col":41,"offset":2278},"abstract_content":"check_output"},"$TRUE":{"start":{"line":75,"col":72,"offset":2309},"end":{"line":75,"col":76,"offset":2313},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"17921370354911ed4d1118ff852afc4ca889e5a3bddebb851475f62122f2e984cbe078ea0ffc76f354a363151aa0434375b4c1c2ad36c3b68862cb67081ce9ea_0","lines":"        result = subprocess.check_output(f\"ls -lah {directory}\", shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":76,"col":22,"offset":2371},"end":{"line":76,"col":54,"offset":2403},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":73,"col":25,"offset":2202},"end":{"line":73,"col":29,"offset":2206},"abstract_content":"args"},"$LOG":{"start":{"line":76,"col":17,"offset":2366},"end":{"line":76,"col":21,"offset":2370},"abstract_content":"info"},"$SINK":{"start":{"line":76,"col":22,"offset":2371},"end":{"line":76,"col":54,"offset":2403},"abstract_content":"f\"Listed directory: {directory}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"69156349c92a41bcba917241a359444ff2d5f43807874ca4566c7b4bcd49ebe73bd8cf3a1f5e472769a359048ed29033b63fdf724ea4c8ee386d37c70ce2c6df_0","lines":"        logging.info(f\"Listed directory: {directory}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":17,"offset":2194},"end":{"line":73,"col":51,"offset":2228}},"request.args.get(\"directory\", \".\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":5,"offset":2182},"end":{"line":73,"col":14,"offset":2191}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":76,"col":22,"offset":2371},"end":{"line":76,"col":54,"offset":2403}},"f\"Listed directory: {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":79,"col":23,"offset":2539},"end":{"line":79,"col":62,"offset":2578},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":73,"col":25,"offset":2202},"end":{"line":73,"col":29,"offset":2206},"abstract_content":"args"},"$LOG":{"start":{"line":79,"col":17,"offset":2533},"end":{"line":79,"col":22,"offset":2538},"abstract_content":"error"},"$SINK":{"start":{"line":79,"col":23,"offset":2539},"end":{"line":79,"col":62,"offset":2578},"abstract_content":"f\"Error listing directory: {directory}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a84257eb105ca255a2c9c7446e7ac53c15e07ab0973689a87c17c2a688a92e412ec8608a45816e9be66054c8b652c0f356732efdd0e485185d12e62cb458b7e6_0","lines":"        logging.error(f\"Error listing directory: {directory}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":17,"offset":2194},"end":{"line":73,"col":51,"offset":2228}},"request.args.get(\"directory\", \".\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":73,"col":5,"offset":2182},"end":{"line":73,"col":14,"offset":2191}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":79,"col":23,"offset":2539},"end":{"line":79,"col":62,"offset":2578}},"f\"Error listing directory: {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":86,"col":21,"offset":2759},"end":{"line":86,"col":30,"offset":2768},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":84,"col":25,"offset":2708},"end":{"line":84,"col":29,"offset":2712},"abstract_content":"form"},"$SINK":{"start":{"line":86,"col":21,"offset":2759},"end":{"line":86,"col":30,"offset":2768},"abstract_content":"directory","propagated_value":{"svalue_start":{"line":84,"col":17,"offset":2700},"svalue_end":{"line":84,"col":46,"offset":2729},"svalue_abstract_content":"request.form.get(\"directory\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"74dd088f0a5adfad7cd59df26e067148baff68a525173f3778b08ab838780eac9c52ccd4b24bb9b336acd302a5a9b1aaefdaea61bb2ab8f98832bafd65bbaa45_0","lines":"        os.makedirs(directory)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":84,"col":17,"offset":2700},"end":{"line":84,"col":46,"offset":2729}},"request.form.get(\"directory\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":84,"col":5,"offset":2688},"end":{"line":84,"col":14,"offset":2697}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":86,"col":21,"offset":2759},"end":{"line":86,"col":30,"offset":2768}},"directory"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":88,"col":22,"offset":2857},"end":{"line":88,"col":55,"offset":2890},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":84,"col":25,"offset":2708},"end":{"line":84,"col":29,"offset":2712},"abstract_content":"form"},"$LOG":{"start":{"line":88,"col":17,"offset":2852},"end":{"line":88,"col":21,"offset":2856},"abstract_content":"info"},"$SINK":{"start":{"line":88,"col":22,"offset":2857},"end":{"line":88,"col":55,"offset":2890},"abstract_content":"f\"Created directory: {directory}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"90cfdc25150696ba0fbb0fceea0a6955f3a0b642c6baa6556f2bac8bdcf5fcef56f2eed9eeab78c0a975e0606d8ee5bc37f84fef3ddc1ed72882efdd49ef752c_0","lines":"        logging.info(f\"Created directory: {directory}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":84,"col":17,"offset":2700},"end":{"line":84,"col":46,"offset":2729}},"request.form.get(\"directory\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":84,"col":5,"offset":2688},"end":{"line":84,"col":14,"offset":2697}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":88,"col":22,"offset":2857},"end":{"line":88,"col":55,"offset":2890}},"f\"Created directory: {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":91,"col":23,"offset":2996},"end":{"line":91,"col":63,"offset":3036},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":84,"col":25,"offset":2708},"end":{"line":84,"col":29,"offset":2712},"abstract_content":"form"},"$LOG":{"start":{"line":91,"col":17,"offset":2990},"end":{"line":91,"col":22,"offset":2995},"abstract_content":"error"},"$SINK":{"start":{"line":91,"col":23,"offset":2996},"end":{"line":91,"col":63,"offset":3036},"abstract_content":"f\"Error creating directory: {directory}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"34a97f75cfeb20ac3d57bf9c6471b9aa33f164ec51669f9d0b625515bf33e6bd9ee2d5160f866d276834ad60eb088e572f27e7a7a2db3bc477460601223ea2ef_0","lines":"        logging.error(f\"Error creating directory: {directory}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":84,"col":17,"offset":2700},"end":{"line":84,"col":46,"offset":2729}},"request.form.get(\"directory\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":84,"col":5,"offset":2688},"end":{"line":84,"col":14,"offset":2697}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":91,"col":23,"offset":2996},"end":{"line":91,"col":63,"offset":3036}},"f\"Error creating directory: {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":98,"col":18,"offset":3214},"end":{"line":98,"col":27,"offset":3223},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3166},"end":{"line":96,"col":29,"offset":3170},"abstract_content":"form"},"$SINK":{"start":{"line":98,"col":18,"offset":3214},"end":{"line":98,"col":27,"offset":3223},"abstract_content":"directory","propagated_value":{"svalue_start":{"line":96,"col":17,"offset":3158},"svalue_end":{"line":96,"col":46,"offset":3187},"svalue_abstract_content":"request.form.get(\"directory\")"}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"74dd088f0a5adfad7cd59df26e067148baff68a525173f3778b08ab838780eac9c52ccd4b24bb9b336acd302a5a9b1aaefdaea61bb2ab8f98832bafd65bbaa45_1","lines":"        os.rmdir(directory)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":96,"col":17,"offset":3158},"end":{"line":96,"col":46,"offset":3187}},"request.form.get(\"directory\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":96,"col":5,"offset":3146},"end":{"line":96,"col":14,"offset":3155}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":98,"col":18,"offset":3214},"end":{"line":98,"col":27,"offset":3223}},"directory"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":100,"col":22,"offset":3312},"end":{"line":100,"col":55,"offset":3345},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3166},"end":{"line":96,"col":29,"offset":3170},"abstract_content":"form"},"$LOG":{"start":{"line":100,"col":17,"offset":3307},"end":{"line":100,"col":21,"offset":3311},"abstract_content":"info"},"$SINK":{"start":{"line":100,"col":22,"offset":3312},"end":{"line":100,"col":55,"offset":3345},"abstract_content":"f\"Deleted directory: {directory}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bd340ef92569d7254fed2538f2692997c344688b92ab0cf0a7f5457248ab1043bc7e116a078ca23a09c3211195fe4ee7c64a0f90a6d9db72a740a26c226fa9e8_0","lines":"        logging.info(f\"Deleted directory: {directory}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":96,"col":17,"offset":3158},"end":{"line":96,"col":46,"offset":3187}},"request.form.get(\"directory\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":96,"col":5,"offset":3146},"end":{"line":96,"col":14,"offset":3155}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":100,"col":22,"offset":3312},"end":{"line":100,"col":55,"offset":3345}},"f\"Deleted directory: {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":103,"col":23,"offset":3451},"end":{"line":103,"col":63,"offset":3491},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":25,"offset":3166},"end":{"line":96,"col":29,"offset":3170},"abstract_content":"form"},"$LOG":{"start":{"line":103,"col":17,"offset":3445},"end":{"line":103,"col":22,"offset":3450},"abstract_content":"error"},"$SINK":{"start":{"line":103,"col":23,"offset":3451},"end":{"line":103,"col":63,"offset":3491},"abstract_content":"f\"Error deleting directory: {directory}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d7ff642a9b5b7d41931b120745b7adac1cd70edd9c8b39ac1fd02859463897c469cc7896a684fe4cc045e80b08d8099e89975a2170697eb5d6a3ca8b29f22764_0","lines":"        logging.error(f\"Error deleting directory: {directory}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":96,"col":17,"offset":3158},"end":{"line":96,"col":46,"offset":3187}},"request.form.get(\"directory\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":96,"col":5,"offset":3146},"end":{"line":96,"col":14,"offset":3155}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":103,"col":23,"offset":3451},"end":{"line":103,"col":63,"offset":3491}},"f\"Error deleting directory: {directory}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":117,"col":22,"offset":3990},"end":{"line":117,"col":50,"offset":4018},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"files"},"$PROPERTY":{"start":{"line":110,"col":20,"offset":3698},"end":{"line":110,"col":25,"offset":3703},"abstract_content":"files"},"$LOG":{"start":{"line":117,"col":17,"offset":3985},"end":{"line":117,"col":21,"offset":3989},"abstract_content":"info"},"$SINK":{"start":{"line":117,"col":22,"offset":3990},"end":{"line":117,"col":50,"offset":4018},"abstract_content":"f\"Uploaded file: {filename}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b1f1f74393a6096b29476483ee9f6bb1126c2ec0a29bb9fc3a3ce8125c101eb999cd67d4000374ac2721aa86b2d6f1985bb9b4cc8b051d6eb810ac5f6bfa2da0_0","lines":"        logging.info(f\"Uploaded file: {filename}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":110,"col":12,"offset":3690},"end":{"line":110,"col":33,"offset":3711}},"request.files['file']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":110,"col":5,"offset":3683},"end":{"line":110,"col":9,"offset":3687}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":114,"col":9,"offset":3816},"end":{"line":114,"col":17,"offset":3824}},"content":"filename"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":117,"col":22,"offset":3990},"end":{"line":117,"col":50,"offset":4018}},"f\"Uploaded file: {filename}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.subprocess-injection.subprocess-injection","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":18,"offset":4196},"end":{"line":124,"col":88,"offset":4266},"extra":{"metavars":{"$FUNC":{"start":{"line":124,"col":29,"offset":4207},"end":{"line":124,"col":41,"offset":4219},"abstract_content":"check_output"}},"message":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.","metadata":{"category":"security","technology":["flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"confidence":"HIGH","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection","shortlink":"https://sg.run/5gW3","semgrep.dev":{"rule":{"origin":"community","r_id":31147,"rule_id":"8GU3qp","rule_name":"python.flask.security.injection.subprocess-injection.subprocess-injection","rv_id":946227,"url":"https://semgrep.dev/playground/r/zyTlk7Y/python.flask.security.injection.subprocess-injection.subprocess-injection","version_id":"zyTlk7Y"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"3d55dd18d13ab8312f31fa21057b7d014951b757029b106d7912cd45f4836b53e784781fbce4a7ea39954af746fd2ad06451b434fe58e445d7d4bc7bc99cd1e0_1","lines":"        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":15,"offset":4142},"end":{"line":122,"col":42,"offset":4169}},"request.form.get(\"command\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":5,"offset":4132},"end":{"line":122,"col":12,"offset":4139}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":18,"offset":4196},"end":{"line":124,"col":88,"offset":4266}},"subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":42,"offset":4220},"end":{"line":124,"col":49,"offset":4227},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":122,"col":23,"offset":4150},"end":{"line":122,"col":27,"offset":4154},"abstract_content":"form"},"$FUNC":{"start":{"line":124,"col":29,"offset":4207},"end":{"line":124,"col":41,"offset":4219},"abstract_content":"check_output"},"$CMD":{"start":{"line":124,"col":42,"offset":4220},"end":{"line":124,"col":49,"offset":4227},"abstract_content":"command","propagated_value":{"svalue_start":{"line":122,"col":15,"offset":4142},"svalue_end":{"line":122,"col":42,"offset":4169},"svalue_abstract_content":"request.form.get(\"command\")"}}},"message":"Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands. Untrusted input in a command can lead to command injection, allowing attackers to execute arbitrary commands and gain control of the system. To prevent this: 1. Avoid direct command execution: Don't run OS commands with user input directly. 2. Validate and sanitize input: Ensure input is safe by removing or escaping dangerous characters. 3. (preferred) Use safe methods: Use `subprocess.run` without `shell=True` to safely execute commands, as it doesn't call a system shell by default. If `shell=True` is necessary, properly quote and escape all input to prevent shell injection. This is a secure by default approach.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["secure default"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"OS Command Injection with Flask","functional-categories":["os::sink::os-command-or-thread::stdlib","os::sink::os-command-or-thread::stdlib2","os::sink::os-command-or-thread::stdlib3","os::sink::os-command-or-thread::subprocess","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.python.org/3/library/os.html","https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module","https://owasp.org/Top10/A03_2021-Injection","https://semgrep.dev/docs/cheat-sheets/python-command-injection/","https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"],"technology":["flask","flask-wtf","stdlib","stdlib2","stdlib3","subprocess","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","shortlink":"https://sg.run/bwGOd","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139070,"rule_id":"BYUXgZq","rule_name":"python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","rv_id":947954,"url":"https://semgrep.dev/playground/r/NdTqAbJ/python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","version_id":"NdTqAbJ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.os.tainted-os-command-stdlib-flask-secure-default.tainted-os-command-stdlib-flask-secure-default","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"3dcb43186cd2d5537b0f1fcddfa067f524b425bc8662ead59ee7a5319950ccfdbc3df80566ee1a533e33162882ef99a0bb1a48d4bd60fa0063742e4fb57498a4_0","lines":"        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":15,"offset":4142},"end":{"line":122,"col":42,"offset":4169}},"request.form.get(\"command\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":5,"offset":4132},"end":{"line":122,"col":12,"offset":4139}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":42,"offset":4220},"end":{"line":124,"col":49,"offset":4227}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":42,"offset":4220},"end":{"line":124,"col":49,"offset":4227},"extra":{"metavars":{"$FUNC":{"start":{"line":124,"col":29,"offset":4207},"end":{"line":124,"col":41,"offset":4219},"abstract_content":"check_output"},"$CMD":{"start":{"line":124,"col":42,"offset":4220},"end":{"line":124,"col":49,"offset":4227},"abstract_content":"command","propagated_value":{"svalue_start":{"line":122,"col":15,"offset":4142},"svalue_end":{"line":122,"col":42,"offset":4169},"svalue_abstract_content":"request.form.get(\"command\")"}}},"message":"Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"asvs":{"control_id":"5.3.8 OS Command Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html","https://docs.python.org/3/library/shlex.html","https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","shortlink":"https://sg.run/NWxp","semgrep.dev":{"rule":{"origin":"community","r_id":27271,"rule_id":"JDUz3R","rule_name":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","rv_id":946391,"url":"https://semgrep.dev/playground/r/9lTy1bg/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","version_id":"9lTy1bg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"abc9da032461986e88a94a1e4aad7aba07cc2389c0113ebeeb220e851bc8e7bb787bbb837f8edbd651d62e63b73c492e11aa6ac62ab34acf198e6f5ca3b07ce8_0","lines":"        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":15,"offset":4142},"end":{"line":122,"col":42,"offset":4169}},"request.form.get(\"command\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":5,"offset":4132},"end":{"line":122,"col":12,"offset":4139}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":42,"offset":4220},"end":{"line":124,"col":49,"offset":4227}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":124,"col":57,"offset":4235},"end":{"line":124,"col":61,"offset":4239},"extra":{"metavars":{"$FUNC":{"start":{"line":124,"col":29,"offset":4207},"end":{"line":124,"col":41,"offset":4219},"abstract_content":"check_output"},"$TRUE":{"start":{"line":124,"col":57,"offset":4235},"end":{"line":124,"col":61,"offset":4239},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"17921370354911ed4d1118ff852afc4ca889e5a3bddebb851475f62122f2e984cbe078ea0ffc76f354a363151aa0434375b4c1c2ad36c3b68862cb67081ce9ea_1","lines":"        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT).decode()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":125,"col":22,"offset":4297},"end":{"line":125,"col":52,"offset":4327},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":122,"col":23,"offset":4150},"end":{"line":122,"col":27,"offset":4154},"abstract_content":"form"},"$LOG":{"start":{"line":125,"col":17,"offset":4292},"end":{"line":125,"col":21,"offset":4296},"abstract_content":"info"},"$SINK":{"start":{"line":125,"col":22,"offset":4297},"end":{"line":125,"col":52,"offset":4327},"abstract_content":"f\"Executed command: {command}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"937a3e147181b2b661dc2b51034a278cb2c5ea49e2a8a09c0e8d3132e69df92d9f8cf1c39ba6fc542668af950f4d1f095033005039a5821a7b9657c58664db79_0","lines":"        logging.info(f\"Executed command: {command}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":15,"offset":4142},"end":{"line":122,"col":42,"offset":4169}},"request.form.get(\"command\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":5,"offset":4132},"end":{"line":122,"col":12,"offset":4139}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":125,"col":22,"offset":4297},"end":{"line":125,"col":52,"offset":4327}},"f\"Executed command: {command}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":129,"col":23,"offset":4506},"end":{"line":129,"col":60,"offset":4543},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":122,"col":23,"offset":4150},"end":{"line":122,"col":27,"offset":4154},"abstract_content":"form"},"$LOG":{"start":{"line":129,"col":17,"offset":4500},"end":{"line":129,"col":22,"offset":4505},"abstract_content":"error"},"$SINK":{"start":{"line":129,"col":23,"offset":4506},"end":{"line":129,"col":60,"offset":4543},"abstract_content":"f\"Error executing command: {command}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0bb47126b0fc4946816d67755c6be327770add557da8cbd08bce4b525fa9af216cae719ed6e3dca6ab9c36ba756f8f146e0fb5a9908045c1155de1d0cc94fa3b_0","lines":"        logging.error(f\"Error executing command: {command}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":15,"offset":4142},"end":{"line":122,"col":42,"offset":4169}},"request.form.get(\"command\")"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":122,"col":5,"offset":4132},"end":{"line":122,"col":12,"offset":4139}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":129,"col":23,"offset":4506},"end":{"line":129,"col":60,"offset":4543}},"f\"Error executing command: {command}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":160,"col":5,"offset":5440},"end":{"line":160,"col":24,"offset":5459},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f4fc9bdfe8fa3fa850ab707a9ef0977ae894413e5cae6369fce9344d0c10a716b236491088c95c06539e82a1d2da97c5a310ab425eacb7df6e132b43aa256cb8_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-78/sample_168_original.py","start":{"line":160,"col":5,"offset":5440},"end":{"line":160,"col":24,"offset":5459},"extra":{"metavars":{"$APP":{"start":{"line":160,"col":5,"offset":5440},"end":{"line":160,"col":8,"offset":5443},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":159},"svalue_end":{"line":7,"col":22,"offset":174},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"ca1f30b09ed255275fc97bda33dcd5a22830e89ae65925935c613e34e4f36d4f087400abb46ad7440c7a258a8cebf49935b1b77dadce10fe3724a5075ad4e719_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-78/sample_169_original.py","start":{"line":31,"col":1,"offset":918},"end":{"line":58,"col":83,"offset":1966},"extra":{"metavars":{"$R":{"start":{"line":32,"col":5,"offset":935},"end":{"line":32,"col":27,"offset":957},"abstract_content":"handle_file_operations"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6372610ae2317a298e7eaf12e6727561358acd6388a2837dbd3e65fd92a0ab3e1fab67b22e6e8eee369359fb696e7d0637d296d72f824069bba049c6e1ae2f56_0","lines":"@csrf_exempt\ndef handle_file_operations(request):\n    try:\n        operation = request.POST.get('operation')\n        file_name = request.POST.get('file_name', 'default.log')\n        content = request.POST.get('content', '')\n\n        validate_operation(operation)\n        file_name = sanitize_filename(file_name)\n\n        if operation == 'read':\n            return read_file(file_name)\n        elif operation == 'write':\n            return write_file(file_name, content)\n        elif operation == 'delete':\n            return delete_file(file_name)\n        elif operation == 'export':\n            return export_file(file_name)\n        elif operation == 'list':\n            return list_files()\n\n    except ValidationError as ve:\n        return JsonResponse({'error': str(ve)}, status=400)\n    except FileOperationError as foe:\n        return JsonResponse({'error': str(foe)}, status=500)\n    except Exception as e:\n        logging.error(f\"Unexpected error: {str(e)}\")\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_170_original.py","start":{"line":28,"col":61,"offset":772},"end":{"line":28,"col":65,"offset":776},"extra":{"metavars":{"$FUNC":{"start":{"line":28,"col":33,"offset":744},"end":{"line":28,"col":45,"offset":756},"abstract_content":"check_output"},"$TRUE":{"start":{"line":28,"col":61,"offset":772},"end":{"line":28,"col":65,"offset":776},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"4528cec305b1a1db3ce1f97e632e8807b7195db340b38cfca99b218e322dabf58da010b64631c5e2d368df1537dc3bccbaeaa8563697663337e024357fbffccd_0","lines":"            result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":31,"col":19,"offset":929},"end":{"line":31,"col":28,"offset":938},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$SINK":{"start":{"line":31,"col":19,"offset":929},"end":{"line":31,"col":28,"offset":938},"abstract_content":"file_name"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal in AWS Lambda","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","serverless::source::function-params::aws-lambda"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal"],"technology":["aws","aws-lambda","cloud","codecs","fileaccess","fileinput","io","linecache","os","serverless","shutil","stdlib","stdlib2","stdlib3","tempfile"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","shortlink":"https://sg.run/AbKXg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116494,"rule_id":"QrUWEdj","rule_name":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","rv_id":947760,"url":"https://semgrep.dev/playground/r/ZRT3qR4/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","version_id":"ZRT3qR4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"2798744bdd9da0675b09ce85fb6ad85efcda45df9e337b3c16a6f0de41015440e71b95dc4671b79bd669c0565ac6ae8117ef3e3e42d545540c29b4d0fa072af2_0","lines":"        with open(file_name, 'r') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":108,"col":20,"offset":3827},"end":{"line":108,"col":29,"offset":3836}},"read_file"],[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":29,"col":15,"offset":890},"end":{"line":29,"col":24,"offset":899}},"content":"file_name"}],["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":31,"col":19,"offset":929},"end":{"line":31,"col":28,"offset":938}},"file_name"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":67,"col":22,"offset":2266},"end":{"line":67,"col":28,"offset":2272},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$FUNC":{"start":{"line":67,"col":16,"offset":2260},"end":{"line":67,"col":21,"offset":2265},"abstract_content":"copy2"},"$SINK":{"start":{"line":67,"col":22,"offset":2266},"end":{"line":67,"col":28,"offset":2272},"abstract_content":"source"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal in AWS Lambda","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","serverless::source::function-params::aws-lambda"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal"],"technology":["aws","aws-lambda","cloud","codecs","fileaccess","fileinput","io","linecache","os","serverless","shutil","stdlib","stdlib2","stdlib3","tempfile"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","shortlink":"https://sg.run/AbKXg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116494,"rule_id":"QrUWEdj","rule_name":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","rv_id":947760,"url":"https://semgrep.dev/playground/r/ZRT3qR4/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","version_id":"ZRT3qR4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"07f426fb034a6df305006253c5679884a7ed0d24a44e1d2e51f38b20c45b414d9acdb2da92f0afe868c4e9b83bc60e3177ed1142fb80e218d103a56b161620fa_0","lines":"        shutil.copy2(source, destination)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":112,"col":13,"offset":3993},"end":{"line":112,"col":22,"offset":4002}},"copy_file"],[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":65,"col":15,"offset":2214},"end":{"line":65,"col":21,"offset":2220}},"content":"source"}],["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":67,"col":22,"offset":2266},"end":{"line":67,"col":28,"offset":2272}},"source"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":67,"col":30,"offset":2274},"end":{"line":67,"col":41,"offset":2285},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$FUNC":{"start":{"line":67,"col":16,"offset":2260},"end":{"line":67,"col":21,"offset":2265},"abstract_content":"copy2"},"$FIRST":{"start":{"line":67,"col":22,"offset":2266},"end":{"line":67,"col":28,"offset":2272},"abstract_content":"source"},"$SINK":{"start":{"line":67,"col":30,"offset":2274},"end":{"line":67,"col":41,"offset":2285},"abstract_content":"destination"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal in AWS Lambda","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","serverless::source::function-params::aws-lambda"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal"],"technology":["aws","aws-lambda","cloud","codecs","fileaccess","fileinput","io","linecache","os","serverless","shutil","stdlib","stdlib2","stdlib3","tempfile"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","shortlink":"https://sg.run/AbKXg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116494,"rule_id":"QrUWEdj","rule_name":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","rv_id":947760,"url":"https://semgrep.dev/playground/r/ZRT3qR4/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","version_id":"ZRT3qR4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"5476a1a5a1dc8d2444706995dc1f3a536e553a959c3636bea36e16f4cec4144cec656f9769b1278555ec0e68616d369eaf27a8f191b4dbae5c45516e6678152f_0","lines":"        shutil.copy2(source, destination)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":86,"col":5,"offset":3081},"end":{"line":86,"col":16,"offset":3092}},"content":"destination"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":112,"col":13,"offset":3993},"end":{"line":112,"col":22,"offset":4002}},"copy_file"],[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":65,"col":23,"offset":2222},"end":{"line":65,"col":34,"offset":2233}},"content":"destination"}],["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":67,"col":30,"offset":2274},"end":{"line":67,"col":41,"offset":2285}},"destination"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":75,"col":21,"offset":2602},"end":{"line":75,"col":27,"offset":2608},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$FUNC":{"start":{"line":75,"col":16,"offset":2597},"end":{"line":75,"col":20,"offset":2601},"abstract_content":"move"},"$SINK":{"start":{"line":75,"col":21,"offset":2602},"end":{"line":75,"col":27,"offset":2608},"abstract_content":"source"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal in AWS Lambda","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","serverless::source::function-params::aws-lambda"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal"],"technology":["aws","aws-lambda","cloud","codecs","fileaccess","fileinput","io","linecache","os","serverless","shutil","stdlib","stdlib2","stdlib3","tempfile"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","shortlink":"https://sg.run/AbKXg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116494,"rule_id":"QrUWEdj","rule_name":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","rv_id":947760,"url":"https://semgrep.dev/playground/r/ZRT3qR4/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","version_id":"ZRT3qR4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"6b7131070e503f95f23237999b6fa29b556eefee5c6eff525c27ed282015d2f94d41eeddf7f458e8255d38ad536fc19e8dcf8d9cac85ce3616db6312d986cc63_0","lines":"        shutil.move(source, destination)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":116,"col":13,"offset":4172},"end":{"line":116,"col":22,"offset":4181}},"move_file"],[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":73,"col":15,"offset":2551},"end":{"line":73,"col":21,"offset":2557}},"content":"source"}],["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":75,"col":21,"offset":2602},"end":{"line":75,"col":27,"offset":2608}},"source"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":75,"col":29,"offset":2610},"end":{"line":75,"col":40,"offset":2621},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$FUNC":{"start":{"line":75,"col":16,"offset":2597},"end":{"line":75,"col":20,"offset":2601},"abstract_content":"move"},"$FIRST":{"start":{"line":75,"col":21,"offset":2602},"end":{"line":75,"col":27,"offset":2608},"abstract_content":"source"},"$SINK":{"start":{"line":75,"col":29,"offset":2610},"end":{"line":75,"col":40,"offset":2621},"abstract_content":"destination"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. To prevent this vulnerability, validate and sanitize any input that is used to create references to file paths. Also, enforce strict file access controls. For example, choose privileges allowing public-facing applications to access only the required files.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal in AWS Lambda","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","serverless::source::function-params::aws-lambda"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal"],"technology":["aws","aws-lambda","cloud","codecs","fileaccess","fileinput","io","linecache","os","serverless","shutil","stdlib","stdlib2","stdlib3","tempfile"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","shortlink":"https://sg.run/AbKXg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116494,"rule_id":"QrUWEdj","rule_name":"python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","rv_id":947760,"url":"https://semgrep.dev/playground/r/ZRT3qR4/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","version_id":"ZRT3qR4"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.file.tainted-path-traversal-stdlib-aws-lambda.tainted-path-traversal-stdlib-aws-lambda","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"d12dbaefa7ec4964fd69829499e029d59a35cf1fea75eae1317b0b442203af77ef3c512565319aaaf367587303c8d6b7a818849e9897a462ebf6273005a7f310_0","lines":"        shutil.move(source, destination)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":86,"col":5,"offset":3081},"end":{"line":86,"col":16,"offset":3092}},"content":"destination"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":116,"col":13,"offset":4172},"end":{"line":116,"col":22,"offset":4181}},"move_file"],[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":73,"col":23,"offset":2559},"end":{"line":73,"col":34,"offset":2570}},"content":"destination"}],["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":75,"col":29,"offset":2610},"end":{"line":75,"col":40,"offset":2621}},"destination"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":100,"col":22,"offset":3527},"end":{"line":100,"col":29,"offset":3534},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"popen"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"},"$FUNC":{"start":{"line":100,"col":16,"offset":3521},"end":{"line":100,"col":21,"offset":3526},"abstract_content":"popen"},"$SINK":{"start":{"line":100,"col":22,"offset":3527},"end":{"line":100,"col":29,"offset":3534},"abstract_content":"command","propagated_value":{"svalue_start":{"line":99,"col":23,"offset":3472},"svalue_end":{"line":99,"col":56,"offset":3505},"svalue_abstract_content":"f\"echo '{content}' > {file_name}\""}}},"message":"Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"OS Command Injection in AWS Lambda","functional-categories":["os::sink::os-command-or-thread::commands","os::sink::os-command-or-thread::os","os::sink::os-command-or-thread::popen2","os::sink::os-command-or-thread::stdlib","os::sink::os-command-or-thread::stdlib2","os::sink::os-command-or-thread::stdlib3","os::sink::os-command-or-thread::subprocess","serverless::source::function-params::aws-lambda"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.python.org/3/library/os.html","https://docs.python.org/3/library/subprocess.html#subprocess.Popen","https://owasp.org/Top10/A03_2021-Injection","https://semgrep.dev/docs/cheat-sheets/python-command-injection/","https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"],"technology":["aws","aws-lambda","cloud","commands","os","popen2","serverless","stdlib","stdlib2","stdlib3","subprocess"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","shortlink":"https://sg.run/lBOxB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139657,"rule_id":"eqU0lp0","rule_name":"python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","rv_id":947763,"url":"https://semgrep.dev/playground/r/7ZTre61/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","version_id":"7ZTre61"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"f142229ea8709a5ef8b608bda8ac844118ab8b0de3196c297d7c92d5d8a05cc998ae7b34edb610f74bab93277ff26bbbf689321ac1f13a67abed2898c72fde02_0","lines":"            os.popen(command)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":84,"col":5,"offset":2998},"end":{"line":84,"col":12,"offset":3005}},"content":"content"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":99,"col":13,"offset":3462},"end":{"line":99,"col":20,"offset":3469}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":100,"col":22,"offset":3527},"end":{"line":100,"col":29,"offset":3534}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.aws-lambda.security.dangerous-system-call.dangerous-system-call","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":100,"col":22,"offset":3527},"end":{"line":100,"col":29,"offset":3534},"extra":{"metavars":{"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$CMD":{"start":{"line":100,"col":22,"offset":3527},"end":{"line":100,"col":29,"offset":3534},"abstract_content":"command","propagated_value":{"svalue_start":{"line":99,"col":23,"offset":3472},"svalue_end":{"line":99,"col":56,"offset":3505},"svalue_abstract_content":"f\"echo '{content}' > {file_name}\""}}},"message":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","shortlink":"https://sg.run/jDvN","semgrep.dev":{"rule":{"origin":"community","r_id":18265,"rule_id":"QrUkg6","rule_name":"python.aws-lambda.security.dangerous-system-call.dangerous-system-call","rv_id":946087,"url":"https://semgrep.dev/playground/r/1QToKBg/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","version_id":"1QToKBg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"5f86ed8dfcd5828fc3702f6010e09baba9c2ed3c955b006eaf1fc74678a056e068a81bd3058150800eb73dcaec95256070155a79f4a16352ea71c82b898939e2_0","lines":"            os.popen(command)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":17,"offset":2971},"end":{"line":83,"col":22,"offset":2976}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":99,"col":13,"offset":3462},"end":{"line":99,"col":20,"offset":3469}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":100,"col":22,"offset":3527},"end":{"line":100,"col":29,"offset":3534}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":103,"col":22,"offset":3652},"end":{"line":103,"col":29,"offset":3659},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"},"$FUNC":{"start":{"line":103,"col":16,"offset":3646},"end":{"line":103,"col":21,"offset":3651},"abstract_content":"popen"},"$SINK":{"start":{"line":103,"col":22,"offset":3652},"end":{"line":103,"col":29,"offset":3659},"abstract_content":"command","propagated_value":{"svalue_start":{"line":102,"col":23,"offset":3596},"svalue_end":{"line":102,"col":57,"offset":3630},"svalue_abstract_content":"f\"echo '{content}' >> {file_name}\""}}},"message":"Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"OS Command Injection in AWS Lambda","functional-categories":["os::sink::os-command-or-thread::commands","os::sink::os-command-or-thread::os","os::sink::os-command-or-thread::popen2","os::sink::os-command-or-thread::stdlib","os::sink::os-command-or-thread::stdlib2","os::sink::os-command-or-thread::stdlib3","os::sink::os-command-or-thread::subprocess","serverless::source::function-params::aws-lambda"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.python.org/3/library/os.html","https://docs.python.org/3/library/subprocess.html#subprocess.Popen","https://owasp.org/Top10/A03_2021-Injection","https://semgrep.dev/docs/cheat-sheets/python-command-injection/","https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"],"technology":["aws","aws-lambda","cloud","commands","os","popen2","serverless","stdlib","stdlib2","stdlib3","subprocess"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","shortlink":"https://sg.run/lBOxB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139657,"rule_id":"eqU0lp0","rule_name":"python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","rv_id":947763,"url":"https://semgrep.dev/playground/r/7ZTre61/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","version_id":"7ZTre61"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"f142229ea8709a5ef8b608bda8ac844118ab8b0de3196c297d7c92d5d8a05cc998ae7b34edb610f74bab93277ff26bbbf689321ac1f13a67abed2898c72fde02_1","lines":"            os.popen(command)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":84,"col":5,"offset":2998},"end":{"line":84,"col":12,"offset":3005}},"content":"content"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":102,"col":13,"offset":3586},"end":{"line":102,"col":20,"offset":3593}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":103,"col":22,"offset":3652},"end":{"line":103,"col":29,"offset":3659}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.aws-lambda.security.dangerous-system-call.dangerous-system-call","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":103,"col":22,"offset":3652},"end":{"line":103,"col":29,"offset":3659},"extra":{"metavars":{"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$CMD":{"start":{"line":103,"col":22,"offset":3652},"end":{"line":103,"col":29,"offset":3659},"abstract_content":"command","propagated_value":{"svalue_start":{"line":102,"col":23,"offset":3596},"svalue_end":{"line":102,"col":57,"offset":3630},"svalue_abstract_content":"f\"echo '{content}' >> {file_name}\""}}},"message":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","shortlink":"https://sg.run/jDvN","semgrep.dev":{"rule":{"origin":"community","r_id":18265,"rule_id":"QrUkg6","rule_name":"python.aws-lambda.security.dangerous-system-call.dangerous-system-call","rv_id":946087,"url":"https://semgrep.dev/playground/r/1QToKBg/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","version_id":"1QToKBg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"5f86ed8dfcd5828fc3702f6010e09baba9c2ed3c955b006eaf1fc74678a056e068a81bd3058150800eb73dcaec95256070155a79f4a16352ea71c82b898939e2_1","lines":"            os.popen(command)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":17,"offset":2971},"end":{"line":83,"col":22,"offset":2976}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":102,"col":13,"offset":3586},"end":{"line":102,"col":20,"offset":3593}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":103,"col":22,"offset":3652},"end":{"line":103,"col":29,"offset":3659}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":106,"col":22,"offset":3763},"end":{"line":106,"col":29,"offset":3770},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$EVENT":{"start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905},"abstract_content":"event"},"$FUNC":{"start":{"line":106,"col":16,"offset":3757},"end":{"line":106,"col":21,"offset":3762},"abstract_content":"popen"},"$SINK":{"start":{"line":106,"col":22,"offset":3763},"end":{"line":106,"col":29,"offset":3770},"abstract_content":"command","propagated_value":{"svalue_start":{"line":105,"col":23,"offset":3721},"svalue_end":{"line":105,"col":43,"offset":3741},"svalue_abstract_content":"f\"rm -f {file_name}\""}}},"message":"Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the input, and use safe methods for executing the commands.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"OS Command Injection in AWS Lambda","functional-categories":["os::sink::os-command-or-thread::commands","os::sink::os-command-or-thread::os","os::sink::os-command-or-thread::popen2","os::sink::os-command-or-thread::stdlib","os::sink::os-command-or-thread::stdlib2","os::sink::os-command-or-thread::stdlib3","os::sink::os-command-or-thread::subprocess","serverless::source::function-params::aws-lambda"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.python.org/3/library/os.html","https://docs.python.org/3/library/subprocess.html#subprocess.Popen","https://owasp.org/Top10/A03_2021-Injection","https://semgrep.dev/docs/cheat-sheets/python-command-injection/","https://stackless.readthedocs.io/en/v2.7.16-slp/library/commands.html"],"technology":["aws","aws-lambda","cloud","commands","os","popen2","serverless","stdlib","stdlib2","stdlib3","subprocess"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","shortlink":"https://sg.run/lBOxB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139657,"rule_id":"eqU0lp0","rule_name":"python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","rv_id":947763,"url":"https://semgrep.dev/playground/r/7ZTre61/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","version_id":"7ZTre61"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.os.tainted-os-command-stdlib-aws-lambda-secure-if-array.tainted-os-command-stdlib-aws-lambda-secure-if-array","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"f142229ea8709a5ef8b608bda8ac844118ab8b0de3196c297d7c92d5d8a05cc998ae7b34edb610f74bab93277ff26bbbf689321ac1f13a67abed2898c72fde02_2","lines":"            os.popen(command)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":81,"col":30,"offset":2900},"end":{"line":81,"col":35,"offset":2905}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":105,"col":13,"offset":3711},"end":{"line":105,"col":20,"offset":3718}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":106,"col":22,"offset":3763},"end":{"line":106,"col":29,"offset":3770}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.aws-lambda.security.dangerous-system-call.dangerous-system-call","path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":106,"col":22,"offset":3763},"end":{"line":106,"col":29,"offset":3770},"extra":{"metavars":{"$HANDLER":{"start":{"line":81,"col":5,"offset":2875},"end":{"line":81,"col":29,"offset":2899},"abstract_content":"advanced_file_management"},"$CMD":{"start":{"line":106,"col":22,"offset":3763},"end":{"line":106,"col":29,"offset":3770},"abstract_content":"command","propagated_value":{"svalue_start":{"line":105,"col":23,"offset":3721},"svalue_end":{"line":105,"col":43,"offset":3741},"svalue_abstract_content":"f\"rm -f {file_name}\""}}},"message":"Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html","cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"asvs":{"control_id":"5.2.4 Dyanmic Code Execution Features","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","shortlink":"https://sg.run/jDvN","semgrep.dev":{"rule":{"origin":"community","r_id":18265,"rule_id":"QrUkg6","rule_name":"python.aws-lambda.security.dangerous-system-call.dangerous-system-call","rv_id":946087,"url":"https://semgrep.dev/playground/r/1QToKBg/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","version_id":"1QToKBg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"5f86ed8dfcd5828fc3702f6010e09baba9c2ed3c955b006eaf1fc74678a056e068a81bd3058150800eb73dcaec95256070155a79f4a16352ea71c82b898939e2_2","lines":"            os.popen(command)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":17,"offset":2971},"end":{"line":83,"col":22,"offset":2976}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":83,"col":5,"offset":2959},"end":{"line":83,"col":14,"offset":2968}},"content":"file_name"},{"location":{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":105,"col":13,"offset":3711},"end":{"line":105,"col":20,"offset":3718}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_171_original.py","start":{"line":106,"col":22,"offset":3763},"end":{"line":106,"col":29,"offset":3770}},"command"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_72_original.py","start":{"line":97,"col":57,"offset":3126},"end":{"line":97,"col":61,"offset":3130},"extra":{"metavars":{"$FUNC":{"start":{"line":97,"col":29,"offset":3098},"end":{"line":97,"col":41,"offset":3110},"abstract_content":"check_output"},"$TRUE":{"start":{"line":97,"col":57,"offset":3126},"end":{"line":97,"col":61,"offset":3130},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"edf5537fb341484c8926eab5c507e8e808c75546c2828d6a22e659fd925c357d53dddca15ac55b2af028924e077ba0f36eee822a56fb5bbee51b6ded2146881e_0","lines":"        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.command.subprocess-injection.subprocess-injection","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":18,"offset":967},"end":{"line":32,"col":96,"offset":1045},"extra":{"metavars":{"$FUNC":{"start":{"line":27,"col":5,"offset":781},"end":{"line":27,"col":12,"offset":788},"abstract_content":"execute"},"$REQUEST":{"start":{"line":27,"col":13,"offset":789},"end":{"line":27,"col":20,"offset":796},"abstract_content":"request"}},"message":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.","metadata":{"category":"security","technology":["flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"confidence":"HIGH","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.command.subprocess-injection.subprocess-injection","shortlink":"https://sg.run/49BE","semgrep.dev":{"rule":{"origin":"community","r_id":31144,"rule_id":"EwUepx","rule_name":"python.django.security.injection.command.subprocess-injection.subprocess-injection","rv_id":946170,"url":"https://semgrep.dev/playground/r/GxTP71A/python.django.security.injection.command.subprocess-injection.subprocess-injection","version_id":"GxTP71A"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.command.subprocess-injection.subprocess-injection","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"251ae9fd7cdc28574cf5ebc80752ebcf5b8b7accdf741abe82232f8e705749ab05443c1c032a960243d1596d363b34d58d95c422f6b33982cf642e01024f65d2_0","lines":"        output = subprocess.check_output(f\"ls {command}\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":27,"col":13,"offset":789},"end":{"line":27,"col":20,"offset":796}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":27,"col":13,"offset":789},"end":{"line":27,"col":20,"offset":796}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":15,"offset":813},"end":{"line":28,"col":29,"offset":827}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":23,"col":20,"offset":658},"end":{"line":23,"col":32,"offset":670}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":5,"offset":803},"end":{"line":28,"col":12,"offset":810}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":18,"offset":967},"end":{"line":32,"col":96,"offset":1045}},"subprocess.check_output(f\"ls {command}\", shell=True, stderr=subprocess.STDOUT)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":42,"offset":991},"end":{"line":32,"col":57,"offset":1006},"extra":{"metavars":{"$VIEW":{"start":{"line":27,"col":5,"offset":781},"end":{"line":27,"col":12,"offset":788},"abstract_content":"execute"},"$REQ":{"start":{"line":28,"col":30,"offset":828},"end":{"line":28,"col":37,"offset":835},"abstract_content":"request"},"$ANYTHING":{"start":{"line":28,"col":38,"offset":836},"end":{"line":28,"col":44,"offset":842},"abstract_content":"params"},"$FUNC":{"start":{"line":32,"col":29,"offset":978},"end":{"line":32,"col":41,"offset":990},"abstract_content":"check_output"},"$CMD":{"start":{"line":32,"col":42,"offset":991},"end":{"line":32,"col":57,"offset":1006},"abstract_content":"f\"ls {command}\""}},"message":"Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"asvs":{"control_id":"5.3.8 OS Command Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html","https://docs.python.org/3/library/shlex.html","https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","shortlink":"https://sg.run/NWxp","semgrep.dev":{"rule":{"origin":"community","r_id":27271,"rule_id":"JDUz3R","rule_name":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","rv_id":946391,"url":"https://semgrep.dev/playground/r/9lTy1bg/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","version_id":"9lTy1bg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"01d138ff51b4f478d0bba063179c1eca542cd803246a56f0c76fc9d05762b99f4110efab6d1c7ded61fda3f2132acef004f109c854dd29502fcb67eef763ffc5_0","lines":"        output = subprocess.check_output(f\"ls {command}\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":30,"offset":828},"end":{"line":28,"col":44,"offset":842}},"request.params"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":15,"offset":813},"end":{"line":28,"col":29,"offset":827}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":23,"col":20,"offset":658},"end":{"line":23,"col":32,"offset":670}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":5,"offset":803},"end":{"line":28,"col":12,"offset":810}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":42,"offset":991},"end":{"line":32,"col":57,"offset":1006}},"f\"ls {command}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":42,"offset":991},"end":{"line":32,"col":57,"offset":1006},"extra":{"metavars":{"$FUNC":{"start":{"line":27,"col":5,"offset":781},"end":{"line":27,"col":12,"offset":788},"abstract_content":"execute"},"$PROPERTY":{"start":{"line":28,"col":38,"offset":836},"end":{"line":28,"col":44,"offset":842},"abstract_content":"params"},"$CMD":{"start":{"line":32,"col":42,"offset":991},"end":{"line":32,"col":57,"offset":1006},"abstract_content":"f\"ls {command}\""}},"message":"Detected subprocess function 'execute' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"asvs":{"control_id":"5.3.8 OS Command Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html","https://docs.python.org/3/library/shlex.html","https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","shortlink":"https://sg.run/NWxp","semgrep.dev":{"rule":{"origin":"community","r_id":27271,"rule_id":"JDUz3R","rule_name":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","rv_id":946391,"url":"https://semgrep.dev/playground/r/9lTy1bg/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","version_id":"9lTy1bg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"23df9d5de74a755848d7037f678e2fd66a64f22c08c437d1066f167ab5720eff78cba209208cb723246ac493d0d62eb3c6c7f58366ea41a42a3642f7c4d98bd1_0","lines":"        output = subprocess.check_output(f\"ls {command}\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":30,"offset":828},"end":{"line":28,"col":63,"offset":861}},"request.params.get('command', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":15,"offset":813},"end":{"line":28,"col":29,"offset":827}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":23,"col":20,"offset":658},"end":{"line":23,"col":32,"offset":670}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":28,"col":5,"offset":803},"end":{"line":28,"col":12,"offset":810}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":42,"offset":991},"end":{"line":32,"col":57,"offset":1006}},"f\"ls {command}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":32,"col":65,"offset":1014},"end":{"line":32,"col":69,"offset":1018},"extra":{"metavars":{"$FUNC":{"start":{"line":32,"col":29,"offset":978},"end":{"line":32,"col":41,"offset":990},"abstract_content":"check_output"},"$TRUE":{"start":{"line":32,"col":65,"offset":1014},"end":{"line":32,"col":69,"offset":1018},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"aa4348b0f03216b4fe8be671c7ca344fa3a310134a56025819655f601729b9a7e38060f618fe0121379e42d45093bfdfd4cfb7c1f1dc83476a9b20e0cf5004cc_0","lines":"        output = subprocess.check_output(f\"ls {command}\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.command.subprocess-injection.subprocess-injection","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":18,"offset":3042},"end":{"line":80,"col":118,"offset":3142},"extra":{"metavars":{"$FUNC":{"start":{"line":75,"col":5,"offset":2827},"end":{"line":75,"col":17,"offset":2839},"abstract_content":"search_files"},"$REQUEST":{"start":{"line":75,"col":18,"offset":2840},"end":{"line":75,"col":25,"offset":2847},"abstract_content":"request"}},"message":"Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.","metadata":{"category":"security","technology":["flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"confidence":"HIGH","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.command.subprocess-injection.subprocess-injection","shortlink":"https://sg.run/49BE","semgrep.dev":{"rule":{"origin":"community","r_id":31144,"rule_id":"EwUepx","rule_name":"python.django.security.injection.command.subprocess-injection.subprocess-injection","rv_id":946170,"url":"https://semgrep.dev/playground/r/GxTP71A/python.django.security.injection.command.subprocess-injection.subprocess-injection","version_id":"GxTP71A"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.command.subprocess-injection.subprocess-injection","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"7cb9a430620bf4fb81f08b875b639119de58ffcab6bc374e78c97572ca38e3f5db950148b046c0942f628f0298cac8138e7346c1d83bd59d71a6a8bad8f5871a_0","lines":"        result = subprocess.check_output(f\"find {directory} -name '{pattern}'\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":75,"col":18,"offset":2840},"end":{"line":75,"col":25,"offset":2847}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":75,"col":18,"offset":2840},"end":{"line":75,"col":25,"offset":2847}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":17,"offset":2866},"end":{"line":76,"col":31,"offset":2880}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":23,"col":20,"offset":658},"end":{"line":23,"col":32,"offset":670}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":5,"offset":2854},"end":{"line":76,"col":14,"offset":2863}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":18,"offset":3042},"end":{"line":80,"col":118,"offset":3142}},"subprocess.check_output(f\"find {directory} -name '{pattern}'\", shell=True, stderr=subprocess.STDOUT)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":42,"offset":3066},"end":{"line":80,"col":79,"offset":3103},"extra":{"metavars":{"$VIEW":{"start":{"line":75,"col":5,"offset":2827},"end":{"line":75,"col":17,"offset":2839},"abstract_content":"search_files"},"$REQ":{"start":{"line":76,"col":32,"offset":2881},"end":{"line":76,"col":39,"offset":2888},"abstract_content":"request"},"$ANYTHING":{"start":{"line":76,"col":40,"offset":2889},"end":{"line":76,"col":46,"offset":2895},"abstract_content":"params"},"$FUNC":{"start":{"line":80,"col":29,"offset":3053},"end":{"line":80,"col":41,"offset":3065},"abstract_content":"check_output"},"$CMD":{"start":{"line":80,"col":42,"offset":3066},"end":{"line":80,"col":79,"offset":3103},"abstract_content":"f\"find {directory} -name '{pattern}'\""}},"message":"Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"asvs":{"control_id":"5.3.8 OS Command Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html","https://docs.python.org/3/library/shlex.html","https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","shortlink":"https://sg.run/NWxp","semgrep.dev":{"rule":{"origin":"community","r_id":27271,"rule_id":"JDUz3R","rule_name":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","rv_id":946391,"url":"https://semgrep.dev/playground/r/9lTy1bg/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","version_id":"9lTy1bg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"96de9ead6df95a1cba2e75d49790ba80afc62448fe814ecd02d873e32ba34219267f0313eeb978620591cfd40c73641d873c321d47feba26d10858d1911adaca_0","lines":"        result = subprocess.check_output(f\"find {directory} -name '{pattern}'\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":32,"offset":2881},"end":{"line":76,"col":46,"offset":2895}},"request.params"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":17,"offset":2866},"end":{"line":76,"col":31,"offset":2880}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":23,"col":20,"offset":658},"end":{"line":23,"col":32,"offset":670}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":5,"offset":2854},"end":{"line":76,"col":14,"offset":2863}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":42,"offset":3066},"end":{"line":80,"col":79,"offset":3103}},"f\"find {directory} -name '{pattern}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":42,"offset":3066},"end":{"line":80,"col":79,"offset":3103},"extra":{"metavars":{"$FUNC":{"start":{"line":75,"col":5,"offset":2827},"end":{"line":75,"col":17,"offset":2839},"abstract_content":"search_files"},"$PROPERTY":{"start":{"line":76,"col":40,"offset":2889},"end":{"line":76,"col":46,"offset":2895},"abstract_content":"params"},"$CMD":{"start":{"line":80,"col":42,"offset":3066},"end":{"line":80,"col":79,"offset":3103},"abstract_content":"f\"find {directory} -name '{pattern}'\""}},"message":"Detected subprocess function 'search_files' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"asvs":{"control_id":"5.3.8 OS Command Injection","control_url":"https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements","section":"V5: Validation, Sanitization and Encoding Verification Requirements","version":"4"},"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html","https://docs.python.org/3/library/shlex.html","https://semgrep.dev/docs/cheat-sheets/python-command-injection/"],"category":"security","technology":["python"],"confidence":"MEDIUM","cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","shortlink":"https://sg.run/NWxp","semgrep.dev":{"rule":{"origin":"community","r_id":27271,"rule_id":"JDUz3R","rule_name":"python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","rv_id":946391,"url":"https://semgrep.dev/playground/r/9lTy1bg/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","version_id":"9lTy1bg"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ae2980d608a70ded982ace1dba9e3ac85ebd1d0bcd5f4aab21ed82de79ce739639da07810f1cf3eae9d74670f7a0cbb661f8611d16442791d6d1bfc357f8c5b4_0","lines":"        result = subprocess.check_output(f\"find {directory} -name '{pattern}'\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":32,"offset":2881},"end":{"line":76,"col":67,"offset":2916}},"request.params.get('directory', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":17,"offset":2866},"end":{"line":76,"col":31,"offset":2880}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":23,"col":20,"offset":658},"end":{"line":23,"col":32,"offset":670}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":76,"col":5,"offset":2854},"end":{"line":76,"col":14,"offset":2863}},"content":"directory"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":42,"offset":3066},"end":{"line":80,"col":79,"offset":3103}},"f\"find {directory} -name '{pattern}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_73_original.py","start":{"line":80,"col":87,"offset":3111},"end":{"line":80,"col":91,"offset":3115},"extra":{"metavars":{"$FUNC":{"start":{"line":80,"col":29,"offset":3053},"end":{"line":80,"col":41,"offset":3065},"abstract_content":"check_output"},"$TRUE":{"start":{"line":80,"col":87,"offset":3111},"end":{"line":80,"col":91,"offset":3115},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"aa4348b0f03216b4fe8be671c7ca344fa3a310134a56025819655f601729b9a7e38060f618fe0121379e42d45093bfdfd4cfb7c1f1dc83476a9b20e0cf5004cc_1","lines":"        result = subprocess.check_output(f\"find {directory} -name '{pattern}'\", shell=True, stderr=subprocess.STDOUT)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_74_original.py","start":{"line":62,"col":72,"offset":1980},"end":{"line":62,"col":76,"offset":1984},"extra":{"metavars":{"$FUNC":{"start":{"line":62,"col":20,"offset":1928},"end":{"line":62,"col":23,"offset":1931},"abstract_content":"run"},"$TRUE":{"start":{"line":62,"col":72,"offset":1980},"end":{"line":62,"col":76,"offset":1984},"abstract_content":"True"}},"message":"Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"2ad49f605619e40594cfb14cdb11b7db080576c2fc2a0cb548c7f1ec52117c9d8d051b6fe41cd0e5435afaf076de740dc960be8b84ce147eea692534d2e471ff_0","lines":"        subprocess.run(f\"convert /tmp/plot.png {file_path}.pdf\", shell=True, check=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":30,"col":83,"offset":753},"end":{"line":30,"col":87,"offset":757},"extra":{"metavars":{"$FUNC":{"start":{"line":30,"col":33,"offset":703},"end":{"line":30,"col":45,"offset":715},"abstract_content":"check_output"},"$TRUE":{"start":{"line":30,"col":83,"offset":753},"end":{"line":30,"col":87,"offset":757},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"fe3624366aa861612e7ca6fadf501b9ca6b30348315da9506bb7648ccd638594115b7f7778d3ebc7d01b13ece0b97f3442cb5f4cc1fdc0a6c9778ccb0ed5df43_0","lines":"            result = subprocess.check_output(f\"find . -name '*{pattern}*'\", shell=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":42,"col":71,"offset":1300},"end":{"line":42,"col":75,"offset":1304},"extra":{"metavars":{"$FUNC":{"start":{"line":42,"col":33,"offset":1262},"end":{"line":42,"col":45,"offset":1274},"abstract_content":"check_output"},"$TRUE":{"start":{"line":42,"col":71,"offset":1300},"end":{"line":42,"col":75,"offset":1304},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"fe3624366aa861612e7ca6fadf501b9ca6b30348315da9506bb7648ccd638594115b7f7778d3ebc7d01b13ece0b97f3442cb5f4cc1fdc0a6c9778ccb0ed5df43_1","lines":"            result = subprocess.check_output(f\"cat {filename}\", shell=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":51,"col":71,"offset":1673},"end":{"line":51,"col":75,"offset":1677},"extra":{"metavars":{"$FUNC":{"start":{"line":51,"col":33,"offset":1635},"end":{"line":51,"col":45,"offset":1647},"abstract_content":"check_output"},"$TRUE":{"start":{"line":51,"col":71,"offset":1673},"end":{"line":51,"col":75,"offset":1677},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"fe3624366aa861612e7ca6fadf501b9ca6b30348315da9506bb7648ccd638594115b7f7778d3ebc7d01b13ece0b97f3442cb5f4cc1fdc0a6c9778ccb0ed5df43_2","lines":"            result = subprocess.check_output(f\"grep {command}\", shell=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":84,"col":17,"offset":2914},"end":{"line":84,"col":63,"offset":2960},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":14,"col":10,"offset":375},"end":{"line":14,"col":37,"offset":402},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":82,"col":2,"offset":2744},"end":{"line":82,"col":5,"offset":2747},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":243},"svalue_end":{"line":10,"col":16,"offset":252},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":82,"col":6,"offset":2748},"end":{"line":82,"col":9,"offset":2751},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":82,"col":11,"offset":2753},"end":{"line":82,"col":18,"offset":2760},"abstract_content":"/search"},"$FUNC":{"start":{"line":83,"col":11,"offset":2802},"end":{"line":83,"col":23,"offset":2814},"abstract_content":"search_files"},"$PARAM":{"start":{"line":83,"col":24,"offset":2815},"end":{"line":83,"col":31,"offset":2822},"abstract_content":"pattern"},"$LOG":{"start":{"line":84,"col":12,"offset":2909},"end":{"line":84,"col":16,"offset":2913},"abstract_content":"info"},"$SINK":{"start":{"line":84,"col":17,"offset":2914},"end":{"line":84,"col":63,"offset":2960},"abstract_content":"f\"Searching for files with pattern: {pattern}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7d3ba0a9a47b970d1a0cf9101129601a243d336e24cbf993ac75a33553d19a45b4ec366dcfefc7004c9629f4217407912ab10f9b7fb4a095b6ad52a2983e8b54_0","lines":"    logger.info(f\"Searching for files with pattern: {pattern}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":83,"col":24,"offset":2815},"end":{"line":83,"col":31,"offset":2822}},"pattern"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":83,"col":24,"offset":2815},"end":{"line":83,"col":31,"offset":2822}},"content":"pattern"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":84,"col":17,"offset":2914},"end":{"line":84,"col":63,"offset":2960}},"f\"Searching for files with pattern: {pattern}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":90,"col":17,"offset":3213},"end":{"line":90,"col":44,"offset":3240},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":14,"col":10,"offset":375},"end":{"line":14,"col":37,"offset":402},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":88,"col":2,"offset":3048},"end":{"line":88,"col":5,"offset":3051},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":243},"svalue_end":{"line":10,"col":16,"offset":252},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":88,"col":6,"offset":3052},"end":{"line":88,"col":9,"offset":3055},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":88,"col":11,"offset":3057},"end":{"line":88,"col":16,"offset":3062},"abstract_content":"/view"},"$FUNC":{"start":{"line":89,"col":11,"offset":3103},"end":{"line":89,"col":20,"offset":3112},"abstract_content":"view_file"},"$PARAM":{"start":{"line":89,"col":21,"offset":3113},"end":{"line":89,"col":29,"offset":3121},"abstract_content":"filename"},"$LOG":{"start":{"line":90,"col":12,"offset":3208},"end":{"line":90,"col":16,"offset":3212},"abstract_content":"info"},"$SINK":{"start":{"line":90,"col":17,"offset":3213},"end":{"line":90,"col":44,"offset":3240},"abstract_content":"f\"Viewing file: {filename}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"59f0ad9de30fae233dea64febf6b55630c8b0bfecc9c192f9c69debcd008099cd2649a6c7b40a4f4646c95b0fdf2c834d448f1ec162203c0d3d035c904a815c5_0","lines":"    logger.info(f\"Viewing file: {filename}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":89,"col":21,"offset":3113},"end":{"line":89,"col":29,"offset":3121}},"filename"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":89,"col":21,"offset":3113},"end":{"line":89,"col":29,"offset":3121}},"content":"filename"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":90,"col":17,"offset":3213},"end":{"line":90,"col":44,"offset":3240}},"f\"Viewing file: {filename}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":96,"col":17,"offset":3519},"end":{"line":96,"col":48,"offset":3550},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":14,"col":10,"offset":375},"end":{"line":14,"col":37,"offset":402},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":94,"col":2,"offset":3350},"end":{"line":94,"col":5,"offset":3353},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":243},"svalue_end":{"line":10,"col":16,"offset":252},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":94,"col":6,"offset":3354},"end":{"line":94,"col":9,"offset":3357},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":94,"col":11,"offset":3359},"end":{"line":94,"col":16,"offset":3364},"abstract_content":"/exec"},"$FUNC":{"start":{"line":95,"col":11,"offset":3407},"end":{"line":95,"col":23,"offset":3419},"abstract_content":"exec_command"},"$PARAM":{"start":{"line":95,"col":24,"offset":3420},"end":{"line":95,"col":31,"offset":3427},"abstract_content":"command"},"$LOG":{"start":{"line":96,"col":12,"offset":3514},"end":{"line":96,"col":16,"offset":3518},"abstract_content":"info"},"$SINK":{"start":{"line":96,"col":17,"offset":3519},"end":{"line":96,"col":48,"offset":3550},"abstract_content":"f\"Executing command: {command}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"128fd60d9291f90fee3285b4c162d5e2090360cbcea2fe53d38c953c0517bbb9b93d57430bf8a8e517549d383c632a645cf1632e7729011cef9dc95de70dff0e_0","lines":"    logger.info(f\"Executing command: {command}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":95,"col":24,"offset":3420},"end":{"line":95,"col":31,"offset":3427}},"command"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":95,"col":24,"offset":3420},"end":{"line":95,"col":31,"offset":3427}},"content":"command"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-78/sample_77_original.py","start":{"line":96,"col":17,"offset":3519},"end":{"line":96,"col":48,"offset":3550}},"f\"Executing command: {command}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_166_original.py","start":{"line":65,"col":1,"offset":2070},"end":{"line":105,"col":94,"offset":4131},"extra":{"metavars":{"$R":{"start":{"line":66,"col":5,"offset":2087},"end":{"line":66,"col":20,"offset":2102},"abstract_content":"create_campaign"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"bcf249cd714d90a212ee65a3af298dcb338e6e0324e8488a7656c58e8174e88cd4637e857aca04a4281e11897819d45bb50f684d6672b7a86719b333567f8003_0","lines":"@csrf_exempt\ndef create_campaign(request):\n    if request.method == 'POST':\n        try:\n            campaign_data = json.loads(request.body)\n            is_valid, message = validate_campaign_data(campaign_data)\n            if not is_valid:\n                return JsonResponse({'status': 'error', 'message': message}, status=400)\n\n            new_campaign = Campaign(\n                name=bleach.clean(campaign_data['name']),\n                email_subject=bleach.clean(campaign_data['email_subject']),\n                email_content=bleach.clean(campaign_data['email_content']),\n                start_date=datetime.fromisoformat(campaign_data['start_date']),\n                end_date=datetime.fromisoformat(campaign_data['end_date']) if 'end_date' in campaign_data else None\n            )\n            new_campaign.save()\n\n            min_age = int(campaign_data.get('min_age', 0))\n            max_age = int(campaign_data.get('max_age', 100))\n            interests = bleach.clean(campaign_data.get('interests', ''))\n            users = segment_users(min_age, max_age, interests)\n\n            for user in users:\n                send_mail(\n                    new_campaign.email_subject,\n                    '',\n                    'noreply@example.com',\n                    [user.email],\n                    html_message=new_campaign.email_content\n                )\n                track_campaign_stats(new_campaign.id, 'sent')\n\n            logger.info(f\"Campaign '{new_campaign.name}' created and sent to {len(users)} users\")\n            return JsonResponse({'status': 'success', 'message': 'Campaign created and emails sent successfully'})\n        except json.JSONDecodeError:\n            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data'}, status=400)\n        except Exception as e:\n            logger.error(f\"Error creating campaign: {str(e)}\")\n            return JsonResponse({'status': 'error', 'message': 'Internal server error'}, status=500)\n    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_166_original.py","start":{"line":107,"col":1,"offset":4133},"end":{"line":121,"col":94,"offset":4861},"extra":{"metavars":{"$R":{"start":{"line":108,"col":5,"offset":4150},"end":{"line":108,"col":23,"offset":4168},"abstract_content":"get_campaign_stats"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"86a0543f9432db6487fd0a941d82f9f5de10dbc9d7c05fd3031415479daba3b311629a0e48f1db18c044280b02bab76a407cfa5b3a32547ec1b98051c27f4658_0","lines":"@csrf_exempt\ndef get_campaign_stats(request, campaign_id):\n    if request.method == 'GET':\n        try:\n            campaign = Campaign.objects.get(id=campaign_id)\n            stats = {\n                'name': campaign.name,\n                'total_sent': campaign.total_sent,\n                'total_opened': campaign.total_opened,\n                'open_rate': (campaign.total_opened / campaign.total_sent) * 100 if campaign.total_sent > 0 else 0\n            }\n            return JsonResponse(stats)\n        except Campaign.DoesNotExist:\n            return JsonResponse({'status': 'error', 'message': 'Campaign not found'}, status=404)\n    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_166_original.py","start":{"line":123,"col":1,"offset":4863},"end":{"line":149,"col":94,"offset":6341},"extra":{"metavars":{"$R":{"start":{"line":124,"col":5,"offset":4880},"end":{"line":124,"col":20,"offset":4895},"abstract_content":"update_campaign"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"923299bbae1c96f9ecaa57a428e747e21a10d524c2351a9a55e7df8fe372bfbcd8d7feb005ac6cb5c647f9fc474a161aa51573afa3f52fb6ef725fa07a9cb5df_0","lines":"@csrf_exempt\ndef update_campaign(request, campaign_id):\n    if request.method == 'PUT':\n        try:\n            campaign = Campaign.objects.get(id=campaign_id)\n            update_data = json.loads(request.body)\n            \n            if 'name' in update_data:\n                campaign.name = bleach.clean(update_data['name'])\n            if 'email_subject' in update_data:\n                campaign.email_subject = bleach.clean(update_data['email_subject'])\n            if 'email_content' in update_data:\n                campaign.email_content = bleach.clean(update_data['email_content'])\n            if 'end_date' in update_data:\n                campaign.end_date = datetime.fromisoformat(update_data['end_date'])\n            \n            campaign.save()\n            logger.info(f\"Campaign '{campaign.name}' updated\")\n            return JsonResponse({'status': 'success', 'message': 'Campaign updated successfully'})\n        except Campaign.DoesNotExist:\n            return JsonResponse({'status': 'error', 'message': 'Campaign not found'}, status=404)\n        except json.JSONDecodeError:\n            return JsonResponse({'status': 'error', 'message': 'Invalid JSON data'}, status=400)\n        except Exception as e:\n            logger.error(f\"Error updating campaign: {str(e)}\")\n            return JsonResponse({'status': 'error', 'message': 'Internal server error'}, status=500)\n    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_166_original.py","start":{"line":151,"col":1,"offset":6343},"end":{"line":165,"col":94,"offset":7165},"extra":{"metavars":{"$R":{"start":{"line":152,"col":5,"offset":6360},"end":{"line":152,"col":20,"offset":6375},"abstract_content":"delete_campaign"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8a1ec2c7743dfa531d22816b3e958d6a2e54d9fea0dbf9cfc6e129d1a56b5e5e91acb7e0ce913412c2b836a5d19197b89ce415c4620706b2b8b4b4bfd33e4d3c_0","lines":"@csrf_exempt\ndef delete_campaign(request, campaign_id):\n    if request.method == 'DELETE':\n        try:\n            campaign = Campaign.objects.get(id=campaign_id)\n            campaign_name = campaign.name\n            campaign.delete()\n            logger.info(f\"Campaign '{campaign_name}' deleted\")\n            return JsonResponse({'status': 'success', 'message': 'Campaign deleted successfully'})\n        except Campaign.DoesNotExist:\n            return JsonResponse({'status': 'error', 'message': 'Campaign not found'}, status=404)\n        except Exception as e:\n            logger.error(f\"Error deleting campaign: {str(e)}\")\n            return JsonResponse({'status': 'error', 'message': 'Internal server error'}, status=500)\n    return JsonResponse({'status': 'error', 'message': 'Invalid request method'}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_167_original.py","start":{"line":40,"col":1,"offset":1273},"end":{"line":96,"col":48,"offset":3801},"extra":{"metavars":{"$R":{"start":{"line":41,"col":5,"offset":1290},"end":{"line":41,"col":33,"offset":1318},"abstract_content":"notify_users_about_challenge"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"19f2300e3488712f0f7b41026ef8759cf6b6472502c2f53dbc6875452cd67964bd3fe8c373ea7ae846ea0776cf0d0792fcc9ed9c67800909dfd50832b3503794_0","lines":"@csrf_exempt\ndef notify_users_about_challenge(request):\n    if not (request.user.is_authenticated and request.user.is_superuser):\n        logger.warning(f\"Unauthorized access attempt by user: {request.user}\")\n        return render(request, \"error404.html\")\n\n    if request.method == \"GET\":\n        template_name = \"notification_email_data.html\"\n        return render(request, template_name)\n    elif request.method == \"POST\":\n        try:\n            users = User.objects.exclude(email__exact=\"\").values_list(\"email\", flat=True)\n            subject = request.POST.get(\"subject\")\n            body_template = request.POST.get(\"body_template\")\n            body_html_template = request.POST.get(\"body_html_template\")\n\n            if not subject or not body_template or not body_html_template:\n                raise ValidationError(\"Missing required fields\")\n\n            challenge = get_challenge_details()\n            body = create_email_body(body_template, challenge_name=challenge['name'])\n            body_html = create_email_body(body_html_template, challenge_name=challenge['name'])\n\n            sender = settings.EMAIL_SENDER\n            valid_users = [user for user in users if validate_email(user)]\n\n            if not valid_users:\n                raise EmailValidationError(\"No valid email addresses found\")\n\n            log_email_attempt(subject, valid_users)\n\n            send_mail(\n                subject,\n                body,\n                sender,\n                [settings.EMAIL],\n                bcc=valid_users,\n                html_message=body_html\n            )\n            logger.info(\"Email sent successfully\")\n            return HttpResponse(\"Email sent successfully\")\n        except ValidationError as ve:\n            logger.error(f\"Validation error: {str(ve)}\")\n            return render(request, \"error_email.html\", {\"error\": str(ve)})\n        except EmailValidationError as eve:\n            logger.error(f\"Email validation error: {str(eve)}\")\n            return render(request, \"error_email.html\", {\"error\": str(eve)})\n        except SMTPException as e:\n            logger.error(f\"Failed to send email: {str(e)}\")\n            return render(request, \"error_email.html\", {\"error\": str(e)})\n        except Exception as e:\n            logger.error(f\"Unexpected error: {str(e)}\")\n            logger.error(traceback.format_exc())\n            return render(request, \"error500.html\")\n    else:\n        logger.warning(f\"Invalid request method: {request.method}\")\n        return render(request, \"error404.html\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":10,"col":1,"offset":332},"end":{"line":10,"col":45,"offset":376},"extra":{"metavars":{"$M":{"start":{"line":10,"col":1,"offset":332},"end":{"line":10,"col":4,"offset":335},"abstract_content":"app"}},"message":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","shortlink":"https://sg.run/Ekde","semgrep.dev":{"rule":{"origin":"community","r_id":9537,"rule_id":"4bUkX0","rule_name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","rv_id":946210,"url":"https://semgrep.dev/playground/r/44TZkrP/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","version_id":"44TZkrP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"55b5a1f0029cf636eb69d4e03762cbe97297a20e582ea0b62214699371d5a13486d8c04bdf74a7d8c2d15799e20c6cd7150a42c690cb3c202076878e5b702ef9_0","lines":"app.config['SECRET_KEY'] = 'your_secret_key'","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":34,"col":12,"offset":1036},"end":{"line":34,"col":131,"offset":1155},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_0","lines":"    return render_template_string(\"<h1>Welcome to our website!</h1><a href='/login'>Login</a> | <a href='/register'>Register</a>\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":56,"col":26,"offset":1941},"end":{"line":56,"col":60,"offset":1975},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":39,"col":28,"offset":1282},"end":{"line":39,"col":32,"offset":1286},"abstract_content":"form"},"$LOG":{"start":{"line":56,"col":21,"offset":1936},"end":{"line":56,"col":25,"offset":1940},"abstract_content":"info"},"$SINK":{"start":{"line":56,"col":26,"offset":1941},"end":{"line":56,"col":60,"offset":1975},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"6d7e71ebb8a986089cd83bdb2bd081b2ddc0b4f8c84eedbb52b3bfc5bd4928f5b95a9a95e474ad3f0b6fbf932e66b65e15b9f14ef5e591208741fdce80e50d0e_0","lines":"            logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":39,"col":20,"offset":1274},"end":{"line":39,"col":44,"offset":1298}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":39,"col":9,"offset":1263},"end":{"line":39,"col":17,"offset":1271}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":56,"col":26,"offset":1941},"end":{"line":56,"col":60,"offset":1975}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":62,"col":12,"offset":2196},"end":{"line":79,"col":9,"offset":2884},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_1","lines":"    return render_template_string(\"\"\"\n        <h1>Register</h1>\n        {% with messages = get_flashed_messages() %}\n          {% if messages %}\n            <ul class=\"flashes\">\n            {% for message in messages %}\n              <li>{{ message }}</li>\n            {% endfor %}\n            </ul>\n          {% endif %}\n        {% endwith %}\n        <form method=\"post\">\n            <input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\n            <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n            <input type=\"password\" name=\"password\" placeholder=\"Password\" required><br>\n            <input type=\"submit\" value=\"Register\">\n        </form>\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":89,"col":26,"offset":3261},"end":{"line":89,"col":55,"offset":3290},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":84,"col":28,"offset":3005},"end":{"line":84,"col":32,"offset":3009},"abstract_content":"form"},"$LOG":{"start":{"line":89,"col":21,"offset":3256},"end":{"line":89,"col":25,"offset":3260},"abstract_content":"info"},"$SINK":{"start":{"line":89,"col":26,"offset":3261},"end":{"line":89,"col":55,"offset":3290},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f8339dd519d53702c7695dbc88e683af412120fd8feb0a2efc0454f4639ed9d3f0101aa9f76ab7fbe5be7c32f08e90a8004e95fca33c30f768c3b4dd31ff7d2e_0","lines":"            logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":84,"col":20,"offset":2997},"end":{"line":84,"col":44,"offset":3021}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":84,"col":9,"offset":2986},"end":{"line":84,"col":17,"offset":2994}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":89,"col":26,"offset":3261},"end":{"line":89,"col":55,"offset":3290}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":93,"col":12,"offset":3432},"end":{"line":109,"col":9,"offset":4035},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_2","lines":"    return render_template_string(\"\"\"\n        <h1>Login</h1>\n        {% with messages = get_flashed_messages() %}\n          {% if messages %}\n            <ul class=\"flashes\">\n            {% for message in messages %}\n              <li>{{ message }}</li>\n            {% endfor %}\n            </ul>\n          {% endif %}\n        {% endwith %}\n        <form method=\"post\">\n            <input type=\"text\" name=\"username\" placeholder=\"Username\" required><br>\n            <input type=\"password\" name=\"password\" placeholder=\"Password\" required><br>\n            <input type=\"submit\" value=\"Login\">\n        </form>\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":134,"col":12,"offset":5009},"end":{"line":151,"col":20,"offset":5623},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_3","lines":"    return render_template_string(\"\"\"\n        <h1>Profile</h1>\n        {% with messages = get_flashed_messages() %}\n          {% if messages %}\n            <ul class=\"flashes\">\n            {% for message in messages %}\n              <li>{{ message }}</li>\n            {% endfor %}\n            </ul>\n          {% endif %}\n        {% endwith %}\n        <p>Username: {{ user.username }}</p>\n        <p>Email: {{ user.email }}</p>\n        <form method=\"post\">\n            <input type=\"email\" name=\"email\" placeholder=\"New Email\" required>\n            <input type=\"submit\" value=\"Update Email\">\n        </form>\n    \"\"\", user=user)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":160,"col":16,"offset":5934},"end":{"line":168,"col":26,"offset":6218},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_4","lines":"        return render_template_string(\"\"\"\n            <h1>Search Results</h1>\n            <ul>\n            {% for user in users %}\n                <li>{{ user.username }}</li>\n            {% endfor %}\n            </ul>\n            <a href=\"/dashboard\">Back to Dashboard</a>\n        \"\"\", users=users)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":169,"col":12,"offset":6230},"end":{"line":175,"col":9,"offset":6474},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_5","lines":"    return render_template_string(\"\"\"\n        <h1>Search Users</h1>\n        <form method=\"post\">\n            <input type=\"text\" name=\"search\" placeholder=\"Search username\" required>\n            <input type=\"submit\" value=\"Search\">\n        </form>\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":189,"col":12,"offset":6733},"end":{"line":193,"col":9,"offset":6896},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_6","lines":"    return render_template_string(\"\"\"\n        <h1>404 - Page Not Found</h1>\n        <p>The page you're looking for doesn't exist.</p>\n        <a href=\"/\">Go Home</a>\n    \"\"\"), 404","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":198,"col":12,"offset":7009},"end":{"line":202,"col":9,"offset":7193},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"324898e6ae013c4e9a7bd66916df5c1eed0d4967d215a7950592a58c9dacb52668d5f2208b1af49314144e18703d2af98dcbc71d8d322742a2111eb8c08178a8_7","lines":"    return render_template_string(\"\"\"\n        <h1>500 - Internal Server Error</h1>\n        <p>Something went wrong on our end. Please try again later.</p>\n        <a href=\"/\">Go Home</a>\n    \"\"\"), 500","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":206,"col":5,"offset":7245},"end":{"line":206,"col":24,"offset":7264},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"60fbd0edf00bdafd47cc2cc0d9dbd3b8c8cec0479f8e5707b19c7a51d99df58fb990d7fac45ff188b6ed1e0a8e3bfece96322e7d2e2e787d4c9f11446eab7d69_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-79/sample_172_original.py","start":{"line":206,"col":5,"offset":7245},"end":{"line":206,"col":24,"offset":7264},"extra":{"metavars":{"$APP":{"start":{"line":206,"col":5,"offset":7245},"end":{"line":206,"col":8,"offset":7248},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":256},"svalue_end":{"line":8,"col":22,"offset":271},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"a4d59eb536c1f33dddf492660f3464bb1b1dbbe088fb7804a44a6349be95ffbfc76729b3f909a5d4d4228b5f566e7decee41d4b887295be147b3a00ed200e48a_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":27,"col":9,"offset":776},"end":{"line":52,"col":68,"offset":1852},"extra":{"metavars":{"$FUNC":{"start":{"line":25,"col":5,"offset":731},"end":{"line":25,"col":22,"offset":748},"abstract_content":"user_registration"},"$DATA":{"start":{"line":27,"col":9,"offset":776},"end":{"line":27,"col":14,"offset":781},"abstract_content":"email"},"$W":{"start":{"line":27,"col":25,"offset":792},"end":{"line":27,"col":29,"offset":796},"abstract_content":"POST"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"79c3276d6a82e2939b23de9af6fbe79eef4f96b0cce213d547d7314ac8d7182756d34f50c307003a14ea497dfab3fcb1b41a12c24636a4838c8e3ec0a69c01a4_0","lines":"        email = request.POST.get('email', '')\n        password = request.POST.get('password', '')\n        name = request.POST.get('name', '')\n        age = request.POST.get('age', '')\n\n        validate_email(email)\n        if not validate_password_strength(password):\n            raise UserManagementException(\"Password does not meet strength requirements\")\n        if not name:\n            raise UserManagementException(\"Name is required\")\n        try:\n            age = int(age)\n            if age < 18:\n                raise UserManagementException(f\"User must be 18 or older. Provided age: {age}\")\n        except ValueError:\n            raise UserManagementException(f\"Invalid age: {age}\")\n\n        # Create user profile\n        users_db[email] = {\n            'name': sanitize_input(name),\n            'age': age,\n            'password': password,  # Note: Storing plain text password is not secure\n            'created_at': datetime.now().isoformat()\n        }\n        logging.info(f\"User registered: {email}\")\n        return HttpResponse(f\"User registered with email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":52,"col":16,"offset":1800},"end":{"line":52,"col":68,"offset":1852},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_0","lines":"        return HttpResponse(f\"User registered with email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":55,"col":16,"offset":1965},"end":{"line":55,"col":65,"offset":2014},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_1","lines":"        return HttpResponseBadRequest(f\"Invalid email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":58,"col":16,"offset":2132},"end":{"line":58,"col":46,"offset":2162},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_2","lines":"        return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":66,"col":9,"offset":2422},"end":{"line":79,"col":42,"offset":2915},"extra":{"metavars":{"$FUNC":{"start":{"line":64,"col":5,"offset":2374},"end":{"line":64,"col":25,"offset":2394},"abstract_content":"display_user_profile"},"$DATA":{"start":{"line":66,"col":9,"offset":2422},"end":{"line":66,"col":14,"offset":2427},"abstract_content":"email"},"$W":{"start":{"line":66,"col":25,"offset":2438},"end":{"line":66,"col":28,"offset":2441},"abstract_content":"GET"},"$INTERM":{"start":{"line":71,"col":9,"offset":2603},"end":{"line":71,"col":21,"offset":2615},"abstract_content":"profile_html"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2efdfd308b883ebd31e010d7bd023400e73896b29688a6c10956cf169a98799be5acd732fae9d81206ca808883c76ab6886ae9a0087c3b42f3b4603ed3102d9c_0","lines":"        email = request.GET.get('email', '')\n        if email not in users_db:\n            raise UserManagementException(f\"User not found: {email}\")\n\n        user = users_db[email]\n        profile_html = f\"\"\"\n        <h1>User Profile</h1>\n        <p>Name: {user['name']}</p>\n        <p>Email: {email}</p>\n        <p>Age: {user['age']}</p>\n        <p>Registered: {user['created_at']}</p>\n        \"\"\"\n        logging.info(f\"Profile displayed for user: {email}\")\n        return HttpResponse(profile_html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":71,"col":24,"offset":2618},"end":{"line":77,"col":12,"offset":2812},"extra":{"metavars":{"$ANYTHING":{"start":{"line":66,"col":25,"offset":2438},"end":{"line":66,"col":28,"offset":2441},"abstract_content":"GET"},"$HTMLSTR":{"start":{"line":71,"col":28,"offset":2622},"end":{"line":73,"col":18,"offset":2670},"abstract_content":"\n        <h1>User Profile</h1>\n        <p>Name: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"65f6c56ba90fa6adf054344fb1cf4c13de4b53c7b64316d608f643496e750ad5fea89f96fdd1b5f6b0f1310984bde93b001489cf7b7def84b1c2d5de1bcb8f00_0","lines":"        profile_html = f\"\"\"\n        <h1>User Profile</h1>\n        <p>Name: {user['name']}</p>\n        <p>Email: {email}</p>\n        <p>Age: {user['age']}</p>\n        <p>Registered: {user['created_at']}</p>\n        \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":66,"col":17,"offset":2430},"end":{"line":66,"col":28,"offset":2441}},"request.GET"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":66,"col":9,"offset":2422},"end":{"line":66,"col":14,"offset":2427}},"content":"email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":71,"col":24,"offset":2618},"end":{"line":77,"col":12,"offset":2812}},"f\"\"\"\n        <h1>User Profile</h1>\n        <p>Name: {user['name']}</p>\n        <p>Email: {email}</p>\n        <p>Age: {user['age']}</p>\n        <p>Registered: {user['created_at']}</p>\n        \"\"\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":79,"col":16,"offset":2889},"end":{"line":79,"col":42,"offset":2915},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_3","lines":"        return HttpResponse(profile_html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":82,"col":16,"offset":3038},"end":{"line":82,"col":46,"offset":3068},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_4","lines":"        return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":107,"col":16,"offset":4062},"end":{"line":107,"col":46,"offset":4092},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_5","lines":"        return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":115,"col":9,"offset":4343},"end":{"line":121,"col":62,"offset":4621},"extra":{"metavars":{"$FUNC":{"start":{"line":113,"col":5,"offset":4304},"end":{"line":113,"col":16,"offset":4315},"abstract_content":"delete_user"},"$DATA":{"start":{"line":115,"col":9,"offset":4343},"end":{"line":115,"col":14,"offset":4348},"abstract_content":"email"},"$W":{"start":{"line":115,"col":25,"offset":4359},"end":{"line":115,"col":28,"offset":4362},"abstract_content":"GET"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9f63881b6b4508c1aebd500c2a86a59c595c8aef2673a9d023cd2765df4265be277c008e3adeadf46b2483c943daf87da0271b91eb7221bdc9ecae9f5466c471_0","lines":"        email = request.GET.get('email', '')\n        if email not in users_db:\n            raise UserManagementException(f\"User not found: {email}\")\n\n        del users_db[email]\n        logging.info(f\"User deleted: {email}\")\n        return HttpResponse(f\"User {email} has been deleted\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":121,"col":16,"offset":4575},"end":{"line":121,"col":62,"offset":4621},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_6","lines":"        return HttpResponse(f\"User {email} has been deleted\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_173_original.py","start":{"line":124,"col":16,"offset":4734},"end":{"line":124,"col":46,"offset":4764},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1e78225906084f7615d134a4a0e67de51b887b1a4838529e12c0a078034a07036e607e1c69037cace2e0a2c1737e79a06c6b03436418a1fd2d7979c21931dcdd_7","lines":"        return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":42,"col":1,"offset":1490},"end":{"line":85,"col":25,"offset":3164},"extra":{"metavars":{"$R":{"start":{"line":44,"col":5,"offset":1539},"end":{"line":44,"col":22,"offset":1556},"abstract_content":"user_registration"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4d0dfd4ab0358b1d275779ecd29a72746961bccef7c9bb99c3654b849d00e492e01bfe682c573a70b29dcfd3ee4816a34517370f387ba15e19fea90d4e244c25_0","lines":"@csrf_exempt\n@require_http_methods([\"POST\"])\ndef user_registration(request):\n    try:\n        email = request.POST.get('email', '')\n        password = request.POST.get('password', '')\n        name = request.POST.get('name', '')\n        age = request.POST.get('age', '')\n        bio = request.POST.get('bio', '')\n\n        validate_email(email)\n        validate_password(password)\n\n        if not name:\n            raise ValidationError(\"Name is required\")\n\n        try:\n            age = int(age)\n            if age < 0 or age > 120:\n                raise ValueError(\"Age must be between 0 and 120\")\n        except ValueError:\n            raise ValidationError(\"Invalid age\")\n\n        hashed_password = hash_password(password)\n\n        conn = sqlite3.connect('users.db')\n        c = conn.cursor()\n        c.execute(\"INSERT INTO users (email, name, age, password, bio) VALUES (?, ?, ?, ?, ?)\",\n                  (email, name, age, hashed_password, bio))\n        conn.commit()\n        logging.info(f\"User registered: {email}\")\n        return HttpResponse(f\"User registered with email: {email}\")\n    except ValidationError as e:\n        logging.warning(f\"Validation error during registration: {str(e)}\")\n        return HttpResponseBadRequest(str(e))\n    except sqlite3.IntegrityError:\n        logging.warning(f\"Duplicate email registration attempt: {email}\")\n        return HttpResponseBadRequest(f\"User with email {email} already exists\")\n    except Exception as e:\n        logging.error(f\"Unexpected error during registration: {str(e)}\")\n        return HttpResponseBadRequest(\"An unexpected error occurred\")\n    finally:\n        if 'conn' in locals():\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":46,"col":9,"offset":1584},"end":{"line":73,"col":68,"offset":2581},"extra":{"metavars":{"$FUNC":{"start":{"line":44,"col":5,"offset":1539},"end":{"line":44,"col":22,"offset":1556},"abstract_content":"user_registration"},"$DATA":{"start":{"line":46,"col":9,"offset":1584},"end":{"line":46,"col":14,"offset":1589},"abstract_content":"email"},"$W":{"start":{"line":46,"col":25,"offset":1600},"end":{"line":46,"col":29,"offset":1604},"abstract_content":"POST"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"36f826419559ce989285e9b3c2c9a811dc660f2f79f56f1cc39b575610f7f5dcd0cb7d83337d5cba3345da3c2ff8e6075c4c84f4ffc523232f0e11ece1b63846_0","lines":"        email = request.POST.get('email', '')\n        password = request.POST.get('password', '')\n        name = request.POST.get('name', '')\n        age = request.POST.get('age', '')\n        bio = request.POST.get('bio', '')\n\n        validate_email(email)\n        validate_password(password)\n\n        if not name:\n            raise ValidationError(\"Name is required\")\n\n        try:\n            age = int(age)\n            if age < 0 or age > 120:\n                raise ValueError(\"Age must be between 0 and 120\")\n        except ValueError:\n            raise ValidationError(\"Invalid age\")\n\n        hashed_password = hash_password(password)\n\n        conn = sqlite3.connect('users.db')\n        c = conn.cursor()\n        c.execute(\"INSERT INTO users (email, name, age, password, bio) VALUES (?, ?, ?, ?, ?)\",\n                  (email, name, age, hashed_password, bio))\n        conn.commit()\n        logging.info(f\"User registered: {email}\")\n        return HttpResponse(f\"User registered with email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":73,"col":16,"offset":2529},"end":{"line":73,"col":68,"offset":2581},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_0","lines":"        return HttpResponse(f\"User registered with email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":76,"col":16,"offset":2705},"end":{"line":76,"col":46,"offset":2735},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_1","lines":"        return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":79,"col":16,"offset":2860},"end":{"line":79,"col":81,"offset":2925},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_2","lines":"        return HttpResponseBadRequest(f\"User with email {email} already exists\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":89,"col":5,"offset":3231},"end":{"line":118,"col":25,"offset":4166},"extra":{"metavars":{"$FUNC":{"start":{"line":88,"col":5,"offset":3201},"end":{"line":88,"col":20,"offset":3216},"abstract_content":"display_profile"},"$DATA":{"start":{"line":89,"col":5,"offset":3231},"end":{"line":89,"col":10,"offset":3236},"abstract_content":"email"},"$W":{"start":{"line":89,"col":21,"offset":3247},"end":{"line":89,"col":24,"offset":3250},"abstract_content":"GET"}},"message":"Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest","shortlink":"https://sg.run/DoZP","semgrep.dev":{"rule":{"origin":"community","r_id":9496,"rule_id":"5rUOX1","rule_name":"python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest","rv_id":946181,"url":"https://semgrep.dev/playground/r/6xTxjNq/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest","version_id":"6xTxjNq"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"27fef9cbd341696e3426706236d0eac3e076a6fc39ecdb57fe898c83fbe9775dfbca6ea06f3a9c46e66aa0a11363e1f97e2604660fee7d0dc408588477a08acb_0","lines":"    email = request.GET.get('email', '')\n    \n    if not email:\n        return HttpResponseBadRequest(\"Email is required\")\n\n    try:\n        conn = sqlite3.connect('users.db')\n        c = conn.cursor()\n        c.execute(\"SELECT * FROM users WHERE email = ?\", (email,))\n        user = c.fetchone()\n\n        if not user:\n            return HttpResponseBadRequest(f\"No user found with email: {email}\")\n\n        profile_html = f\"\"\"\n        <h1>User Profile</h1>\n        <p>Email: {user[0]}</p>\n        <p>Name: {user[1]}</p>\n        <p>Age: {user[2]}</p>\n        <p>Bio: {user[4]}</p>\n        \"\"\"\n\n        logging.info(f\"Profile displayed for user: {email}\")\n        return HttpResponse(profile_html)\n    except Exception as e:\n        logging.error(f\"Error displaying profile: {str(e)}\")\n        return HttpResponseBadRequest(\"An error occurred while fetching the profile\")\n    finally:\n        if 'conn' in locals():\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":101,"col":20,"offset":3565},"end":{"line":101,"col":80,"offset":3625},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_3","lines":"            return HttpResponseBadRequest(f\"No user found with email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":112,"col":16,"offset":3897},"end":{"line":112,"col":42,"offset":3923},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_4","lines":"        return HttpResponse(profile_html)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":122,"col":5,"offset":4233},"end":{"line":155,"col":25,"offset":5506},"extra":{"metavars":{"$FUNC":{"start":{"line":121,"col":5,"offset":4204},"end":{"line":121,"col":19,"offset":4218},"abstract_content":"update_profile"},"$DATA":{"start":{"line":122,"col":5,"offset":4233},"end":{"line":122,"col":10,"offset":4238},"abstract_content":"email"},"$W":{"start":{"line":122,"col":21,"offset":4249},"end":{"line":122,"col":25,"offset":4253},"abstract_content":"POST"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4212a0b3e1866495e18a24eba00dde70276dfab57c7cb641f1705eaa2645bc2c0a663fa9f26156577537cfce4322c765397501dc0b22650565823c61e12fe0a9_0","lines":"    email = request.POST.get('email', '')\n    name = request.POST.get('name', '')\n    age = request.POST.get('age', '')\n    bio = request.POST.get('bio', '')\n\n    if not email:\n        return HttpResponseBadRequest(\"Email is required\")\n\n    try:\n        conn = sqlite3.connect('users.db')\n        c = conn.cursor()\n        \n        if name:\n            c.execute(\"UPDATE users SET name = ? WHERE email = ?\", (name, email))\n        if age:\n            age = int(age)\n            if age < 0 or age > 120:\n                raise ValueError(\"Age must be between 0 and 120\")\n            c.execute(\"UPDATE users SET age = ? WHERE email = ?\", (age, email))\n        if bio:\n            c.execute(\"UPDATE users SET bio = ? WHERE email = ?\", (bio, email))\n\n        conn.commit()\n        logging.info(f\"Profile updated for user: {email}\")\n        return HttpResponse(f\"Profile updated for email: {email}\")\n    except ValueError as e:\n        logging.warning(f\"Invalid data in profile update: {str(e)}\")\n        return HttpResponseBadRequest(str(e))\n    except Exception as e:\n        logging.error(f\"Error updating profile: {str(e)}\")\n        return HttpResponseBadRequest(\"An error occurred while updating the profile\")\n    finally:\n        if 'conn' in locals():\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":146,"col":16,"offset":5071},"end":{"line":146,"col":67,"offset":5122},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_5","lines":"        return HttpResponse(f\"Profile updated for email: {email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":149,"col":16,"offset":5235},"end":{"line":149,"col":46,"offset":5265},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_6","lines":"        return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":159,"col":5,"offset":5570},"end":{"line":183,"col":25,"offset":6551},"extra":{"metavars":{"$FUNC":{"start":{"line":158,"col":5,"offset":5544},"end":{"line":158,"col":16,"offset":5555},"abstract_content":"delete_user"},"$DATA":{"start":{"line":159,"col":5,"offset":5570},"end":{"line":159,"col":10,"offset":5575},"abstract_content":"email"},"$W":{"start":{"line":159,"col":21,"offset":5586},"end":{"line":159,"col":25,"offset":5590},"abstract_content":"POST"}},"message":"Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","shortlink":"https://sg.run/BkvA","semgrep.dev":{"rule":{"origin":"community","r_id":9495,"rule_id":"JDUydR","rule_name":"python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","rv_id":946180,"url":"https://semgrep.dev/playground/r/YDTvRdR/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","version_id":"YDTvRdR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"15ed7033348b063d0342752b441b9dc953307d71d200153169910e05d4893b21f4ff845ab5c776cb735d5c064e94bbb3cda12372d059d99dfcf0db1abe9481c3_0","lines":"    email = request.POST.get('email', '')\n    password = request.POST.get('password', '')\n\n    if not email or not password:\n        return HttpResponseBadRequest(\"Email and password are required\")\n\n    try:\n        conn = sqlite3.connect('users.db')\n        c = conn.cursor()\n        c.execute(\"SELECT password FROM users WHERE email = ?\", (email,))\n        stored_password = c.fetchone()\n\n        if not stored_password or stored_password[0] != hash_password(password):\n            return HttpResponseBadRequest(\"Invalid email or password\")\n\n        c.execute(\"DELETE FROM users WHERE email = ?\", (email,))\n        conn.commit()\n        logging.info(f\"User deleted: {email}\")\n        return HttpResponse(f\"User with email {email} has been deleted\")\n    except Exception as e:\n        logging.error(f\"Error deleting user: {str(e)}\")\n        return HttpResponseBadRequest(\"An error occurred while deleting the user\")\n    finally:\n        if 'conn' in locals():\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_174_original.py","start":{"line":177,"col":16,"offset":6259},"end":{"line":177,"col":73,"offset":6316},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"593d4cd03c60db20e21fb55c45a2ce7b8d66f3b1f2dcd61f4f0f50ec2615f9575f562e7fa4579f024fffe2c7c55cc3a996da499e99a3864e3f6cffdc952b3dcd_7","lines":"        return HttpResponse(f\"User with email {email} has been deleted\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_175_original.py","start":{"line":24,"col":1,"offset":872},"end":{"line":62,"col":84,"offset":2324},"extra":{"metavars":{"$R":{"start":{"line":26,"col":5,"offset":921},"end":{"line":26,"col":22,"offset":938},"abstract_content":"user_registration"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c7f5ec70b480cea1f749aaeb3aac8b15f65a933086fbcaad45ebe5c6864fcc2e94d39c27cd0d682d66817f4cb4e669a3429501e4af9e023db100cd6417f9da60_0","lines":"@csrf_exempt\n@require_http_methods([\"POST\"])\ndef user_registration(request):\n    try:\n        data = json.loads(request.body)\n        email = data.get('email', '')\n        password = data.get('password', '')\n        name = data.get('name', '')\n        age = data.get('age', '')\n\n        try:\n            validate_email(email)\n        except ValidationError:\n            return JsonResponse({\"error\": f\"Invalid email: {email}\"}, status=400)\n\n        if len(password) < 8:\n            return JsonResponse({\"error\": f\"Password too short for email: {email}\"}, status=400)\n\n        if not name:\n            return JsonResponse({\"error\": \"Name is required.\"}, status=400)\n\n        try:\n            age = int(age)\n            if age < 18:\n                return JsonResponse({\"error\": \"You must be 18 or older to register.\"}, status=400)\n        except ValueError:\n            return JsonResponse({\"error\": \"Invalid age provided.\"}, status=400)\n\n        user = User.objects.create_user(username=email, email=email, password=password)\n        user.first_name = name\n        user.save()\n\n        UserProfile.objects.create(user=user, age=age)\n\n        logger.info(f\"User registered with email: {email}\")\n        return JsonResponse({\"message\": f\"User registered with email: {email}\"})\n    except Exception as e:\n        logger.error(f\"Error during user registration: {str(e)}\")\n        return JsonResponse({\"error\": \"An unexpected error occurred.\"}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_175_original.py","start":{"line":64,"col":1,"offset":2326},"end":{"line":82,"col":84,"offset":3148},"extra":{"metavars":{"$R":{"start":{"line":66,"col":5,"offset":2375},"end":{"line":66,"col":15,"offset":2385},"abstract_content":"user_login"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f944304832c6baa228efade4475cabe54b04dee70ab6f495b15012543a740fc3a80b8cb69177cfc32edb3e399a2319df863b1937a36159a856587d3d3ccc79bf_0","lines":"@csrf_exempt\n@require_http_methods([\"POST\"])\ndef user_login(request):\n    try:\n        data = json.loads(request.body)\n        email = data.get('email', '')\n        password = data.get('password', '')\n\n        user = authenticate(request, username=email, password=password)\n        if user is not None:\n            login(request, user)\n            logger.info(f\"Login successful for user: {email}\")\n            return JsonResponse({\"message\": f\"Login successful for user: {email}\"})\n        else:\n            logger.warning(f\"Invalid login attempt for user: {email}\")\n            return JsonResponse({\"error\": \"Invalid login credentials.\"}, status=400)\n    except Exception as e:\n        logger.error(f\"Error during user login: {str(e)}\")\n        return JsonResponse({\"error\": \"An unexpected error occurred.\"}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":53,"col":27,"offset":1641},"end":{"line":61,"col":20,"offset":1965},"extra":{"metavars":{"$ANYTHING":{"start":{"line":48,"col":37,"offset":1481},"end":{"line":48,"col":41,"offset":1485},"abstract_content":"POST"},"$HTMLSTR":{"start":{"line":53,"col":31,"offset":1645},"end":{"line":57,"col":54,"offset":1811},"abstract_content":"\n                <html>\n                    <body>\n                        <h1>Thank you for your feedback!</h1>\n                        <p>We appreciate your input, "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c872be63a5ecde4db11c51b675c0fbf6612351b7cac367d3bb6f07b18aa2908695893a7a43c22543b5113751ef3268855d4bd04b9d6a2ae67c7672d25dfbb07a_0","lines":"                content = f\"\"\"\n                <html>\n                    <body>\n                        <h1>Thank you for your feedback!</h1>\n                        <p>We appreciate your input, {user_email}</p>\n                        <p>Your feedback: {feedback.feedback}</p>\n                    </body>\n                </html>\n                \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":48,"col":29,"offset":1473},"end":{"line":48,"col":41,"offset":1485}},"request.POST"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":48,"col":9,"offset":1453},"end":{"line":48,"col":13,"offset":1457}},"content":"form"},{"location":{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":51,"col":17,"offset":1548},"end":{"line":51,"col":25,"offset":1556}},"content":"feedback"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":53,"col":27,"offset":1641},"end":{"line":61,"col":20,"offset":1965}},"f\"\"\"\n                <html>\n                    <body>\n                        <h1>Thank you for your feedback!</h1>\n                        <p>We appreciate your input, {user_email}</p>\n                        <p>Your feedback: {feedback.feedback}</p>\n                    </body>\n                </html>\n                \"\"\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":63,"col":29,"offset":2051},"end":{"line":63,"col":66,"offset":2088},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":14,"col":10,"offset":422},"end":{"line":14,"col":37,"offset":449},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":40,"col":7,"offset":1218},"end":{"line":40,"col":29,"offset":1240},"abstract_content":"FeedbackSubmissionView"},"$FUNC":{"start":{"line":47,"col":9,"offset":1424},"end":{"line":47,"col":13,"offset":1428},"abstract_content":"post"},"$SELF":{"start":{"line":47,"col":14,"offset":1429},"end":{"line":47,"col":18,"offset":1433},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":47,"col":20,"offset":1435},"end":{"line":47,"col":27,"offset":1442},"abstract_content":"request"},"$LOG":{"start":{"line":63,"col":24,"offset":2046},"end":{"line":63,"col":28,"offset":2050},"abstract_content":"info"},"$SINK":{"start":{"line":63,"col":29,"offset":2051},"end":{"line":63,"col":66,"offset":2088},"abstract_content":"f\"Feedback submitted by {user_email}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a1903b5555c500fb786524cba2700c1f13b2d6b148eb1856405c5faf251dca15e867d84ad13cd95dd393b8fe82e46abf991affe8305e1f24bd3f846392bc9dc4_0","lines":"                logger.info(f\"Feedback submitted by {user_email}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":47,"col":20,"offset":1435},"end":{"line":47,"col":27,"offset":1442}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":47,"col":20,"offset":1435},"end":{"line":47,"col":27,"offset":1442}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":48,"col":9,"offset":1453},"end":{"line":48,"col":13,"offset":1457}},"content":"form"},{"location":{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":51,"col":17,"offset":1548},"end":{"line":51,"col":25,"offset":1556}},"content":"feedback"},{"location":{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":52,"col":17,"offset":1587},"end":{"line":52,"col":27,"offset":1597}},"content":"user_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":63,"col":29,"offset":2051},"end":{"line":63,"col":66,"offset":2088}},"f\"Feedback submitted by {user_email}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":64,"col":24,"offset":2113},"end":{"line":64,"col":71,"offset":2160},"extra":{"metavars":{"$TYPE":{"start":{"line":64,"col":59,"offset":2148},"end":{"line":64,"col":70,"offset":2159},"abstract_content":"'text/html'"}},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4684966fe9519818edfe3b95babbbdc26435a9c73bbec079b38583e477a78440602055e838707ee8dd369111e302bcb4a86069ae27a27e3374125e76093994e8_0","lines":"                return HttpResponse(content, content_type='text/html')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.web.tainted-direct-response-django.tainted-direct-response-django","path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":64,"col":24,"offset":2113},"end":{"line":64,"col":71,"offset":2160},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$CLS":{"start":{"line":40,"col":7,"offset":1218},"end":{"line":40,"col":29,"offset":1240},"abstract_content":"FeedbackSubmissionView"},"$FUNC":{"start":{"line":47,"col":9,"offset":1424},"end":{"line":47,"col":13,"offset":1428},"abstract_content":"post"},"$SELF":{"start":{"line":47,"col":14,"offset":1429},"end":{"line":47,"col":18,"offset":1433},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":47,"col":20,"offset":1435},"end":{"line":47,"col":27,"offset":1442},"abstract_content":"request"},"$SINK":{"start":{"line":53,"col":27,"offset":1641},"end":{"line":61,"col":20,"offset":1965},"abstract_content":"f\"\"\"\n                <html>\n                    <body>\n                        <h1>Thank you for your feedback!</h1>\n                        <p>We appreciate your input, {user_email}</p>\n                        <p>Your feedback: {feedback.feedback}</p>\n                    </body>\n                </html>\n                \"\"\""},"$CT":{"start":{"line":64,"col":59,"offset":2148},"end":{"line":64,"col":70,"offset":2159},"abstract_content":"'text/html'"}},"message":"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Cross-Site Scripting (XSS) with Django","functional-categories":["web::sink::direct-response::django","web::sink::html-webpage::django","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A03:2021 - Injection","A07:2017 - Cross-Site Scripting (XSS)"],"references":["https://docs.djangoproject.com/en/5.0/ref/request-response/#httpresponse-objects","https://owasp.org/Top10/A03_2021-Injection"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.web.tainted-direct-response-django.tainted-direct-response-django","shortlink":"https://sg.run/kxlDo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137928,"rule_id":"X5UQjAr","rule_name":"python.django.web.tainted-direct-response-django.tainted-direct-response-django","rv_id":947837,"url":"https://semgrep.dev/playground/r/K3TJ4BW/python.django.web.tainted-direct-response-django.tainted-direct-response-django","version_id":"K3TJ4BW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.web.tainted-direct-response-django.tainted-direct-response-django","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"b2a1108ff5604be9ac426aac546f9186437290d8397d66cbc86fc7c38edc4e9167ffc53fab34a9c7817fa178afec45e09f88630f92188eb7fbe4db63c96d2cf7_0","lines":"                return HttpResponse(content, content_type='text/html')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":64,"col":24,"offset":2113},"end":{"line":64,"col":71,"offset":2160}},"HttpResponse(content, content_type='text/html')"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_176_original.py","start":{"line":64,"col":24,"offset":2113},"end":{"line":64,"col":71,"offset":2160}},"HttpResponse(content, content_type='text/html')"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":56,"col":22,"offset":1605},"end":{"line":56,"col":50,"offset":1633},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":46,"col":25,"offset":1258},"end":{"line":46,"col":29,"offset":1262},"abstract_content":"form"},"$LOG":{"start":{"line":56,"col":17,"offset":1600},"end":{"line":56,"col":21,"offset":1604},"abstract_content":"info"},"$SINK":{"start":{"line":56,"col":22,"offset":1605},"end":{"line":56,"col":50,"offset":1633},"abstract_content":"f\"New post created: {title}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5d8ead0812db66dff318f1d6169f244e7234daf6a6f027d9ffcf3c5d2d3c430d9877aae30ba12c349d4801199dbebd7def9838d9cb1176ddd78f88d7395a2ade_0","lines":"        logging.info(f\"New post created: {title}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":46,"col":17,"offset":1250},"end":{"line":46,"col":38,"offset":1271}},"request.form['title']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":46,"col":9,"offset":1242},"end":{"line":46,"col":14,"offset":1247}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":56,"col":22,"offset":1605},"end":{"line":56,"col":50,"offset":1633}},"f\"New post created: {title}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":57,"col":16,"offset":1650},"end":{"line":57,"col":112,"offset":1746},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"75bd6520a9e941ad9e0d9894286176270adb0ae99e4e2b9b6e99d06486a088bf44ebe33ef88ce0fac246dbac6ce210cad6b2a2695ac6b6dd92590e3313693065_0","lines":"        return render_template_string(\"<h1>{{ title }}</h1><p>{{ content }}</p>\", title=title, content=content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":83,"col":16,"offset":2652},"end":{"line":83,"col":139,"offset":2775},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"75bd6520a9e941ad9e0d9894286176270adb0ae99e4e2b9b6e99d06486a088bf44ebe33ef88ce0fac246dbac6ce210cad6b2a2695ac6b6dd92590e3313693065_1","lines":"        return render_template_string(\"<h1>{{ post.title }}</h1><p>{{ post.content }}</p><small>{{ post.created_at }}</small>\", post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":85,"col":23,"offset":2825},"end":{"line":85,"col":67,"offset":2869},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":77,"col":2,"offset":2443},"end":{"line":77,"col":5,"offset":2446},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":77,"col":6,"offset":2447},"end":{"line":77,"col":11,"offset":2452},"abstract_content":"route"},"$FUNC":{"start":{"line":78,"col":5,"offset":2480},"end":{"line":78,"col":13,"offset":2488},"abstract_content":"get_post"},"$PARAM":{"start":{"line":78,"col":14,"offset":2489},"end":{"line":78,"col":21,"offset":2496},"abstract_content":"post_id"},"$LOG":{"start":{"line":85,"col":17,"offset":2819},"end":{"line":85,"col":22,"offset":2824},"abstract_content":"error"},"$SINK":{"start":{"line":85,"col":23,"offset":2825},"end":{"line":85,"col":67,"offset":2869},"abstract_content":"f\"Error retrieving post {post_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"894c334c488afa424c73c00493a425f006168c02326a0788b773be523416ced4e0f49859f8ffd57c0175b79935bd57f46a3423e1816771b0bf38d8f37c77986e_0","lines":"        logging.error(f\"Error retrieving post {post_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":78,"col":14,"offset":2489},"end":{"line":78,"col":21,"offset":2496}},"post_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":78,"col":14,"offset":2489},"end":{"line":78,"col":21,"offset":2496}},"content":"post_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":85,"col":23,"offset":2825},"end":{"line":85,"col":67,"offset":2869}},"f\"Error retrieving post {post_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":102,"col":22,"offset":3496},"end":{"line":102,"col":47,"offset":3521},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":88,"col":2,"offset":2939},"end":{"line":88,"col":5,"offset":2942},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":88,"col":6,"offset":2943},"end":{"line":88,"col":11,"offset":2948},"abstract_content":"route"},"$FUNC":{"start":{"line":89,"col":5,"offset":3001},"end":{"line":89,"col":16,"offset":3012},"abstract_content":"update_post"},"$PARAM":{"start":{"line":89,"col":17,"offset":3013},"end":{"line":89,"col":24,"offset":3020},"abstract_content":"post_id"},"$LOG":{"start":{"line":102,"col":17,"offset":3491},"end":{"line":102,"col":21,"offset":3495},"abstract_content":"info"},"$SINK":{"start":{"line":102,"col":22,"offset":3496},"end":{"line":102,"col":47,"offset":3521},"abstract_content":"f\"Post {post_id} updated\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3382bf8e951a9dfd51361af534a33a6054278a0dbb08d96666821b57a9b247239041891e63804ed88ef9954489655f8663a0d401543c5c450adbb254ab786fee_0","lines":"        logging.info(f\"Post {post_id} updated\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":89,"col":17,"offset":3013},"end":{"line":89,"col":24,"offset":3020}},"post_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":89,"col":17,"offset":3013},"end":{"line":89,"col":24,"offset":3020}},"content":"post_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":102,"col":22,"offset":3496},"end":{"line":102,"col":47,"offset":3521}},"f\"Post {post_id} updated\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":103,"col":9,"offset":3531},"end":{"line":103,"col":54,"offset":3576},"extra":{"metavars":{"$APP":{"start":{"line":88,"col":2,"offset":2939},"end":{"line":88,"col":5,"offset":2942},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$FUNC":{"start":{"line":89,"col":5,"offset":3001},"end":{"line":89,"col":16,"offset":3012},"abstract_content":"update_post"},"$PARAM":{"start":{"line":103,"col":24,"offset":3546},"end":{"line":103,"col":31,"offset":3553},"abstract_content":"post_id"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"28a881319806ba10278153b70a0fcab15c9e3fa5009eba2de4ffed68fe0487ae3736867b3c064f9198bbcfdc1ef07a6806b0f94b29a2cc29c70d3eef720c363e_0","lines":"        return f\"Post {post_id} updated successfully\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":103,"col":24,"offset":3546},"end":{"line":103,"col":31,"offset":3553}},"post_id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":103,"col":9,"offset":3531},"end":{"line":103,"col":54,"offset":3576}},"return f\"Post {post_id} updated successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":108,"col":23,"offset":3729},"end":{"line":108,"col":65,"offset":3771},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":88,"col":2,"offset":2939},"end":{"line":88,"col":5,"offset":2942},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":88,"col":6,"offset":2943},"end":{"line":88,"col":11,"offset":2948},"abstract_content":"route"},"$FUNC":{"start":{"line":89,"col":5,"offset":3001},"end":{"line":89,"col":16,"offset":3012},"abstract_content":"update_post"},"$PARAM":{"start":{"line":89,"col":17,"offset":3013},"end":{"line":89,"col":24,"offset":3020},"abstract_content":"post_id"},"$LOG":{"start":{"line":108,"col":17,"offset":3723},"end":{"line":108,"col":22,"offset":3728},"abstract_content":"error"},"$SINK":{"start":{"line":108,"col":23,"offset":3729},"end":{"line":108,"col":65,"offset":3771},"abstract_content":"f\"Error updating post {post_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8ba06ae4d0a512d3e64879dc8109e79d54d21f184aedbfb0038d062e0f478e11f420b5d05f4aa3c61f690b8103098fefadc9c779cb556aefcab976b446e0a8e5_0","lines":"        logging.error(f\"Error updating post {post_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":89,"col":17,"offset":3013},"end":{"line":89,"col":24,"offset":3020}},"post_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":89,"col":17,"offset":3013},"end":{"line":89,"col":24,"offset":3020}},"content":"post_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":108,"col":23,"offset":3729},"end":{"line":108,"col":65,"offset":3771}},"f\"Error updating post {post_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":116,"col":22,"offset":4041},"end":{"line":116,"col":47,"offset":4066},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":111,"col":2,"offset":3839},"end":{"line":111,"col":5,"offset":3842},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":111,"col":6,"offset":3843},"end":{"line":111,"col":11,"offset":3848},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":3901},"end":{"line":112,"col":16,"offset":3912},"abstract_content":"delete_post"},"$PARAM":{"start":{"line":112,"col":17,"offset":3913},"end":{"line":112,"col":24,"offset":3920},"abstract_content":"post_id"},"$LOG":{"start":{"line":116,"col":17,"offset":4036},"end":{"line":116,"col":21,"offset":4040},"abstract_content":"info"},"$SINK":{"start":{"line":116,"col":22,"offset":4041},"end":{"line":116,"col":47,"offset":4066},"abstract_content":"f\"Post {post_id} deleted\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"6b43bfa54755506381b30060f28d26e5d26e3b1a4edc91c0196d52ea4c7b1fd1e9d17bdf5553f3abfe44750d0952bee8ab66db983a4da316b67290da18b25808_0","lines":"        logging.info(f\"Post {post_id} deleted\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":112,"col":17,"offset":3913},"end":{"line":112,"col":24,"offset":3920}},"post_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":112,"col":17,"offset":3913},"end":{"line":112,"col":24,"offset":3920}},"content":"post_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":116,"col":22,"offset":4041},"end":{"line":116,"col":47,"offset":4066}},"f\"Post {post_id} deleted\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":117,"col":9,"offset":4076},"end":{"line":117,"col":54,"offset":4121},"extra":{"metavars":{"$APP":{"start":{"line":111,"col":2,"offset":3839},"end":{"line":111,"col":5,"offset":3842},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$FUNC":{"start":{"line":112,"col":5,"offset":3901},"end":{"line":112,"col":16,"offset":3912},"abstract_content":"delete_post"},"$PARAM":{"start":{"line":117,"col":24,"offset":4091},"end":{"line":117,"col":31,"offset":4098},"abstract_content":"post_id"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"41f74c3f7641c486c19c2cc25adbc47cc7f08daa48b69647542d5418a34ab211d97077419fb8f8b22ed8f980e5fb7946064bcb46adfab335c17fb3894c56a5d5_0","lines":"        return f\"Post {post_id} deleted successfully\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":117,"col":24,"offset":4091},"end":{"line":117,"col":31,"offset":4098}},"post_id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":117,"col":9,"offset":4076},"end":{"line":117,"col":54,"offset":4121}},"return f\"Post {post_id} deleted successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":119,"col":23,"offset":4171},"end":{"line":119,"col":65,"offset":4213},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":111,"col":2,"offset":3839},"end":{"line":111,"col":5,"offset":3842},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":111,"col":6,"offset":3843},"end":{"line":111,"col":11,"offset":3848},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":3901},"end":{"line":112,"col":16,"offset":3912},"abstract_content":"delete_post"},"$PARAM":{"start":{"line":112,"col":17,"offset":3913},"end":{"line":112,"col":24,"offset":3920},"abstract_content":"post_id"},"$LOG":{"start":{"line":119,"col":17,"offset":4165},"end":{"line":119,"col":22,"offset":4170},"abstract_content":"error"},"$SINK":{"start":{"line":119,"col":23,"offset":4171},"end":{"line":119,"col":65,"offset":4213},"abstract_content":"f\"Error deleting post {post_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bae4e66c05fdf3bec33d9b51c4c04880c31a0fc9b1d503fc904cf42a420439c0c33b6270d684f15eb66616f5efe79498047827f488b8076898a438aefec8d30d_0","lines":"        logging.error(f\"Error deleting post {post_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":112,"col":17,"offset":3913},"end":{"line":112,"col":24,"offset":3920}},"post_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":112,"col":17,"offset":3913},"end":{"line":112,"col":24,"offset":3920}},"content":"post_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":119,"col":23,"offset":4171},"end":{"line":119,"col":65,"offset":4213}},"f\"Error deleting post {post_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":138,"col":5,"offset":4673},"end":{"line":138,"col":24,"offset":4692},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b0b59b56aa41d5fa370ee0673dcfbcd86f339329c976f9bfa17080d6c786ece6f7a0dd984c79004a772934c43ec3ad77493553c7f30d2f1e47730ca362d4175d_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-79/sample_78_original.py","start":{"line":138,"col":5,"offset":4673},"end":{"line":138,"col":24,"offset":4692},"extra":{"metavars":{"$APP":{"start":{"line":138,"col":5,"offset":4673},"end":{"line":138,"col":8,"offset":4676},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":177},"svalue_end":{"line":7,"col":22,"offset":192},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"eee12340ce68ec0e55cee792606998503faaec1b9933045eac0255f4ec70b0fe6f0a92e62ff07a97257b7ee453212ae4bfd41a0806fefbd78ef8435eb30e3027_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":108,"col":13,"offset":3845},"end":{"line":108,"col":79,"offset":3911},"extra":{"metavars":{"$FUNC":{"start":{"line":102,"col":29,"offset":3528},"end":{"line":102,"col":34,"offset":3533},"abstract_content":"forms"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2fc184b90a749ff2e7637a02e53a7e226093be0464ad11b9205796cfcea8e3d7f16b1c53c2bd8d0a9a39e0a839a9c6c8f04f2c729319c3ed01b57b693bce0801_0","lines":"            return f\"<h2>Feedback from {user_name}</h2><p>{user_feedback}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":102,"col":21,"offset":3520},"end":{"line":102,"col":46,"offset":3545}},"request.forms.get('name')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":102,"col":9,"offset":3508},"end":{"line":102,"col":18,"offset":3517}},"content":"user_name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":108,"col":13,"offset":3845},"end":{"line":108,"col":79,"offset":3911}},"return f\"<h2>Feedback from {user_name}</h2><p>{user_feedback}</p>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":108,"col":20,"offset":3852},"end":{"line":108,"col":79,"offset":3911},"extra":{"metavars":{"$ANYTHING":{"start":{"line":102,"col":29,"offset":3528},"end":{"line":102,"col":34,"offset":3533},"abstract_content":"forms"},"$HTMLSTR":{"start":{"line":108,"col":22,"offset":3854},"end":{"line":108,"col":40,"offset":3872},"abstract_content":"<h2>Feedback from "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a77aa2586ed2df3eceb361fa69fda4daeead0214a285b15273cbf4fe29fd9fb12bca37ed761c0102d02ca3419c6d27ddba5ea8799f93f7945bd8429618659090_0","lines":"            return f\"<h2>Feedback from {user_name}</h2><p>{user_feedback}</p>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":102,"col":21,"offset":3520},"end":{"line":102,"col":34,"offset":3533}},"request.forms"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":102,"col":9,"offset":3508},"end":{"line":102,"col":18,"offset":3517}},"content":"user_name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":108,"col":20,"offset":3852},"end":{"line":108,"col":79,"offset":3911}},"f\"<h2>Feedback from {user_name}</h2><p>{user_feedback}</p>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":136,"col":18,"offset":4879},"end":{"line":136,"col":64,"offset":4925},"extra":{"metavars":{"$ANYTHING":{"start":{"line":133,"col":31,"offset":4698},"end":{"line":133,"col":36,"offset":4703},"abstract_content":"forms"},"$HTMLSTR":{"start":{"line":136,"col":20,"offset":4881},"end":{"line":136,"col":44,"offset":4905},"abstract_content":"<h1>Search Results for '"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"dd8700ef67c52ab031ee6b3ff6543a65553b42076e4226428c1bbef71ee606dfc51630a220831e5a94740c99297e309647f6f3cca324c462b2009521e0e72409_0","lines":"        result = f\"<h1>Search Results for '{search_term}'</h1>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":133,"col":23,"offset":4690},"end":{"line":133,"col":36,"offset":4703}},"request.forms"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":133,"col":9,"offset":4676},"end":{"line":133,"col":20,"offset":4687}},"content":"search_term"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":136,"col":18,"offset":4879},"end":{"line":136,"col":64,"offset":4925}},"f\"<h1>Search Results for '{search_term}'</h1>\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":139,"col":9,"offset":5089},"end":{"line":139,"col":22,"offset":5102},"extra":{"metavars":{"$FUNC":{"start":{"line":133,"col":31,"offset":4698},"end":{"line":133,"col":36,"offset":4703},"abstract_content":"forms"},"$X":{"start":{"line":139,"col":16,"offset":5096},"end":{"line":139,"col":22,"offset":5102},"abstract_content":"result"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e50df48da64576e2d0b4cf6e5b30e3490563cc1f256fbeddaf5e9bbb744ce0649fd897d1e8c567f08165f187c301800d5e98a91bda051ab70f095181500b299a_0","lines":"        return result","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":133,"col":23,"offset":4690},"end":{"line":133,"col":50,"offset":4717}},"request.forms.get('search')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":133,"col":9,"offset":4676},"end":{"line":133,"col":20,"offset":4687}},"content":"search_term"},{"location":{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":136,"col":9,"offset":4870},"end":{"line":136,"col":15,"offset":4876}},"content":"result"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_79_original.py","start":{"line":139,"col":9,"offset":5089},"end":{"line":139,"col":22,"offset":5102}},"return result"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":43,"col":12,"offset":1639},"end":{"line":47,"col":9,"offset":1814},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"40c977b2288a4a209b6e413e49681151d5c92d3ba561819ea29bfafa4e9776eb4180da112847f6dcb4c1ec567f99f5639a3c0e7cc34e7e1240a3feb515efc73b_0","lines":"    return HttpResponse(f\"\"\"\n        <h1>Welcome, {context['username']}!</h1>\n        <p>Email: {context['email']}</p>\n        <p>Custom Message: {context['custom_message']}</p>\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":43,"col":25,"offset":1652},"end":{"line":47,"col":8,"offset":1813},"extra":{"metavars":{"$ANYTHING":{"start":{"line":36,"col":20,"offset":1444},"end":{"line":36,"col":24,"offset":1448},"abstract_content":"user"},"$HTMLSTR":{"start":{"line":43,"col":29,"offset":1656},"end":{"line":44,"col":22,"offset":1678},"abstract_content":"\n        <h1>Welcome, "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8f07e12ed1333c6505ff3075464e189e150322adb29f8da30316825d18249a922e330838bb70387ce3471aff781b983e9024728d2150708b3467c6af784ec51a_0","lines":"    return HttpResponse(f\"\"\"\n        <h1>Welcome, {context['username']}!</h1>\n        <p>Email: {context['email']}</p>\n        <p>Custom Message: {context['custom_message']}</p>\n    \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":36,"col":12,"offset":1436},"end":{"line":36,"col":24,"offset":1448}},"request.user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":36,"col":5,"offset":1429},"end":{"line":36,"col":9,"offset":1433}},"content":"user"},{"location":{"path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":38,"col":5,"offset":1505},"end":{"line":38,"col":12,"offset":1512}},"content":"context"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":43,"col":25,"offset":1652},"end":{"line":47,"col":8,"offset":1813}},"f\"\"\"\n        <h1>Welcome, {context['username']}!</h1>\n        <p>Email: {context['email']}</p>\n        <p>Custom Message: {context['custom_message']}</p>\n    \"\"\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":73,"col":1,"offset":2665},"end":{"line":86,"col":80,"offset":3286},"extra":{"metavars":{"$R":{"start":{"line":75,"col":5,"offset":2714},"end":{"line":75,"col":16,"offset":2725},"abstract_content":"create_user"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ec32fa8d62997e59ea0fbea0a10ad9762046f09d5082d60ceb20414a6c00851a3097870dcb099b4f4f17ee4273729004f5545df70a91a722e4971777bcffe8e4_0","lines":"@csrf_exempt\n@require_http_methods([\"POST\"])\ndef create_user(request):\n    username = request.POST.get('username')\n    password = request.POST.get('password')\n    email = request.POST.get('email')\n    try:\n        validate_email(email)\n        user = User.objects.create_user(username=username, email=email, password=password)\n        logger.info(f\"New user created: {username}\")\n        return JsonResponse({'status': 'success', 'user_id': user.id})\n    except ValidationError as e:\n        logger.warning(f\"User creation failed: {str(e)}\")\n        return JsonResponse({'status': 'error', 'message': str(e)}, status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":122,"col":16,"offset":4337},"end":{"line":129,"col":13,"offset":4674},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"40c977b2288a4a209b6e413e49681151d5c92d3ba561819ea29bfafa4e9776eb4180da112847f6dcb4c1ec567f99f5639a3c0e7cc34e7e1240a3feb515efc73b_1","lines":"        return HttpResponse(f\"\"\"\n            <form method=\"post\">\n                <input type=\"text\" name=\"username\" placeholder=\"Username\">\n                <input type=\"password\" name=\"password\" placeholder=\"Password\">\n                <button type=\"submit\">Login</button>\n            </form>\n            <p style=\"color: red;\">{error}</p>\n        \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-79/sample_80_original.py","start":{"line":132,"col":16,"offset":4799},"end":{"line":138,"col":13,"offset":5057},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"40c977b2288a4a209b6e413e49681151d5c92d3ba561819ea29bfafa4e9776eb4180da112847f6dcb4c1ec567f99f5639a3c0e7cc34e7e1240a3feb515efc73b_2","lines":"        return HttpResponse(f\"\"\"\n            <form method=\"post\">\n                <input type=\"email\" name=\"email\" placeholder=\"New Email\">\n                <button type=\"submit\">Update</button>\n            </form>\n            <p style=\"color: red;\">{error}</p>\n        \"\"\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":118,"col":13,"offset":4035},"end":{"line":118,"col":110,"offset":4132},"extra":{"metavars":{"$FUNC":{"start":{"line":110,"col":24,"offset":3798},"end":{"line":110,"col":30,"offset":3804},"abstract_content":"params"}},"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o","semgrep.dev":{"rule":{"origin":"community","r_id":9535,"rule_id":"QrUz49","rule_name":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","rv_id":946207,"url":"https://semgrep.dev/playground/r/gETe1NK/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","version_id":"gETe1NK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"bb9427a001bee7d201337730865cba48016223a59f83f534541cca854e81ffde82c182257fa9c1841601ee0ce529f24742f0187d8149f400e40a98fb49bd389c_0","lines":"            return f'<h1>Welcome, {username}!</h1><p>Email: {user.email}</p><p>Joined: {user.created_at}</p>'","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":110,"col":16,"offset":3790},"end":{"line":110,"col":46,"offset":3820}},"request.params.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":110,"col":5,"offset":3779},"end":{"line":110,"col":13,"offset":3787}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":118,"col":13,"offset":4035},"end":{"line":118,"col":110,"offset":4132}},"return f'<h1>Welcome, {username}!</h1><p>Email: {user.email}</p><p>Joined: {user.created_at}</p>'"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":118,"col":20,"offset":4042},"end":{"line":118,"col":110,"offset":4132},"extra":{"metavars":{"$ANYTHING":{"start":{"line":110,"col":24,"offset":3798},"end":{"line":110,"col":30,"offset":3804},"abstract_content":"params"},"$HTMLSTR":{"start":{"line":118,"col":22,"offset":4044},"end":{"line":118,"col":35,"offset":4057},"abstract_content":"<h1>Welcome, "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f3f28f853b4827df3943fc56bcb8c7d1e6e2600200b50729540e3844dc6d9f5acf61bd791069e83ef8b89ae953ce92978937a00079847774fd0d5693718a7ea7_0","lines":"            return f'<h1>Welcome, {username}!</h1><p>Email: {user.email}</p><p>Joined: {user.created_at}</p>'","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":110,"col":16,"offset":3790},"end":{"line":110,"col":30,"offset":3804}},"request.params"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":110,"col":5,"offset":3779},"end":{"line":110,"col":13,"offset":3787}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":118,"col":20,"offset":4042},"end":{"line":118,"col":110,"offset":4132}},"f'<h1>Welcome, {username}!</h1><p>Email: {user.email}</p><p>Joined: {user.created_at}</p>'"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":192,"col":21,"offset":6698},"end":{"line":192,"col":60,"offset":6737},"extra":{"metavars":{"$ANYTHING":{"start":{"line":191,"col":20,"offset":6650},"end":{"line":191,"col":26,"offset":6656},"abstract_content":"params"},"$HTMLSTR":{"start":{"line":192,"col":23,"offset":6700},"end":{"line":192,"col":40,"offset":6717},"abstract_content":"<body><h1>Hello, "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9c78052f49d529b7d4920a327ed2e82dc4a1ff81d6b307427d6d3ce88d088d7035dd8a06e31a8fcb7d7865e40149f32260ea602ae4ba87c323362c787dc02eec_0","lines":"    return Response(f'<body><h1>Hello, {name}!</h1></body>')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":191,"col":12,"offset":6642},"end":{"line":191,"col":26,"offset":6656}},"request.params"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":191,"col":5,"offset":6635},"end":{"line":191,"col":9,"offset":6639}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_81_original.py","start":{"line":192,"col":21,"offset":6698},"end":{"line":192,"col":60,"offset":6737}},"f'<body><h1>Hello, {name}!</h1></body>'"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":31,"col":24,"offset":842},"end":{"line":39,"col":12,"offset":1132},"extra":{"metavars":{"$ANYTHING":{"start":{"line":29,"col":43,"offset":703},"end":{"line":29,"col":48,"offset":708},"abstract_content":"query"},"$HTMLSTR":{"start":{"line":31,"col":28,"offset":846},"end":{"line":33,"col":17,"offset":884},"abstract_content":"\n        <html><body>\n            <h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"07bccac82ad54b0b4e1c2d6b3eafef47fd72847808f687b1866cae5d4534b4d696440459d16f8dcc817124a4853edeba25bcee891109c38e9ca35e3b28e150be_0","lines":"        profile_html = f\"\"\"\n        <html><body>\n            <h1>{username}</h1>\n            <p>Bio: {user_profile['bio']}</p>\n            <p>Email: {user_profile['email']}</p>\n            <p>Age: {user_profile['age']}</p>\n            <p>Location: {user_profile['location']}</p>\n        </body></html>\n        \"\"\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":29,"col":35,"offset":695},"end":{"line":29,"col":48,"offset":708}},"request.query"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":29,"col":20,"offset":680},"end":{"line":29,"col":34,"offset":694}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":24,"col":20,"offset":557},"end":{"line":24,"col":32,"offset":569}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":29,"col":9,"offset":669},"end":{"line":29,"col":17,"offset":677}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":31,"col":24,"offset":842},"end":{"line":39,"col":12,"offset":1132}},"f\"\"\"\n        <html><body>\n            <h1>{username}</h1>\n            <p>Bio: {user_profile['bio']}</p>\n            <p>Email: {user_profile['email']}</p>\n            <p>Age: {user_profile['age']}</p>\n            <p>Location: {user_profile['location']}</p>\n        </body></html>\n        \"\"\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":52,"col":20,"offset":1746},"end":{"line":52,"col":76,"offset":1802},"extra":{"metavars":{"$ANYTHING":{"start":{"line":50,"col":36,"offset":1616},"end":{"line":50,"col":41,"offset":1621},"abstract_content":"query"},"$HTMLSTR":{"start":{"line":52,"col":22,"offset":1748},"end":{"line":52,"col":58,"offset":1784},"abstract_content":"<html><body><h1>Search Results for '"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1dae17a8192e34fa4dc5ce0eb9b7b93927d96edfc37066fdfcb9cb3ac9556bc80dfed529558052e39f70071b2585547283e2d8ee309744f5ae7e270080ec5a6c_0","lines":"    results_html = f\"<html><body><h1>Search Results for '{query}'</h1><ul>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":50,"col":28,"offset":1608},"end":{"line":50,"col":41,"offset":1621}},"request.query"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":50,"col":13,"offset":1593},"end":{"line":50,"col":27,"offset":1607}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":24,"col":20,"offset":557},"end":{"line":24,"col":32,"offset":569}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":50,"col":5,"offset":1585},"end":{"line":50,"col":10,"offset":1590}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":52,"col":20,"offset":1746},"end":{"line":52,"col":76,"offset":1802}},"f\"<html><body><h1>Search Results for '{query}'</h1><ul>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":66,"col":38,"offset":2450},"end":{"line":66,"col":87,"offset":2499},"extra":{"metavars":{"$ANYTHING":{"start":{"line":61,"col":30,"offset":2167},"end":{"line":61,"col":34,"offset":2171},"abstract_content":"post"},"$HTMLSTR":{"start":{"line":66,"col":40,"offset":2452},"end":{"line":66,"col":61,"offset":2473},"abstract_content":"<html><body>Welcome, "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"da41c64dabe6fe7b17b8e5720205cd7b6aea275a11a6428c315d0093abe489f3851d69d5a7ba424bf92981da7127e4a407094d445b41206ef480c46c5b009cfe_0","lines":"            return web.Response(text=f\"<html><body>Welcome, {username}!</body></html>\", content_type='text/html')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":61,"col":22,"offset":2159},"end":{"line":61,"col":34,"offset":2171}},"request.post"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":61,"col":16,"offset":2153},"end":{"line":61,"col":21,"offset":2158}},"content":"await"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":61,"col":9,"offset":2146},"end":{"line":61,"col":13,"offset":2150}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":62,"col":20,"offset":2193},"end":{"line":62,"col":34,"offset":2207}},"content":"sanitize_input"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":24,"col":20,"offset":557},"end":{"line":24,"col":32,"offset":569}},"content":"input_string"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":62,"col":9,"offset":2182},"end":{"line":62,"col":17,"offset":2190}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":66,"col":38,"offset":2450},"end":{"line":66,"col":87,"offset":2499}},"f\"<html><body>Welcome, {username}!</body></html>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":74,"col":23,"offset":2937},"end":{"line":74,"col":56,"offset":2970},"extra":{"metavars":{"$ANYTHING":{"start":{"line":73,"col":31,"offset":2896},"end":{"line":73,"col":34,"offset":2899},"abstract_content":"app"},"$HTMLSTR":{"start":{"line":74,"col":25,"offset":2939},"end":{"line":74,"col":29,"offset":2943},"abstract_content":"<li>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c9841d918f134dedaccf11b0c785e535c63252d9d8f4b61de77e8ff061a7c7a9a6ea4044bd4fe7554710804165a30caf82a8b8cab0f53b86a165042f8a1c7ccc_0","lines":"        users_list += f\"<li>{user}: {data['bio']}</li>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":73,"col":23,"offset":2888},"end":{"line":73,"col":34,"offset":2899}},"request.app"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":73,"col":20,"offset":2885},"end":{"line":73,"col":22,"offset":2887}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":73,"col":9,"offset":2874},"end":{"line":73,"col":13,"offset":2878}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":74,"col":23,"offset":2937},"end":{"line":74,"col":56,"offset":2970}},"f\"<li>{user}: {data['bio']}</li>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":77,"col":30,"offset":3065},"end":{"line":77,"col":89,"offset":3124},"extra":{"metavars":{"$ANYTHING":{"start":{"line":73,"col":31,"offset":2896},"end":{"line":73,"col":34,"offset":2899},"abstract_content":"app"},"$HTMLSTR":{"start":{"line":77,"col":32,"offset":3067},"end":{"line":77,"col":62,"offset":3097},"abstract_content":"<html><body><h1>All Users</h1>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"3d9b9a8208040fc2634c8e5b2bfc0fb94fdf2b3ab760d324cd417127cf76513a7eaa2c623e9fd4590ad6bb8d84512d3856d76a2f4670adf467a58dbd350de40a_0","lines":"    return web.Response(text=f\"<html><body><h1>All Users</h1>{users_list}</body></html>\", content_type='text/html')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":73,"col":23,"offset":2888},"end":{"line":73,"col":34,"offset":2899}},"request.app"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":73,"col":20,"offset":2885},"end":{"line":73,"col":22,"offset":2887}},"content":"in"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":73,"col":9,"offset":2874},"end":{"line":73,"col":13,"offset":2878}},"content":"user"},{"location":{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":74,"col":9,"offset":2923},"end":{"line":74,"col":19,"offset":2933}},"content":"users_list"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_82_original.py","start":{"line":77,"col":30,"offset":3065},"end":{"line":77,"col":89,"offset":3124}},"f\"<html><body><h1>All Users</h1>{users_list}</body></html>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":54,"col":25,"offset":1936},"end":{"line":54,"col":144,"offset":2055},"extra":{"metavars":{"$ANYTHING":{"start":{"line":53,"col":26,"offset":1878},"end":{"line":53,"col":38,"offset":1890},"abstract_content":"query_params"},"$HTMLSTR":{"start":{"line":54,"col":27,"offset":1938},"end":{"line":54,"col":50,"offset":1961},"abstract_content":"<html><body><h1>Hello, "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8af813442e6485079e4f66402bfa6a204a5d2992a4ba9b62ca074e9e8f5208f4fe9cff8bab4c00897d96a5a43bdb13f26a4c77726af6ee6b08292a8ba428f93e_0","lines":"    return HTMLResponse(f\"<html><body><h1>Hello, {user_input}!</h1><a href='/register'>Register</a> | <a href='/login'>Login</a></body></html>\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":53,"col":18,"offset":1870},"end":{"line":53,"col":38,"offset":1890}},"request.query_params"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":53,"col":5,"offset":1857},"end":{"line":53,"col":15,"offset":1867}},"content":"user_input"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":54,"col":25,"offset":1936},"end":{"line":54,"col":144,"offset":2055}},"f\"<html><body><h1>Hello, {user_input}!</h1><a href='/register'>Register</a> | <a href='/login'>Login</a></body></html>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":114,"col":29,"offset":4426},"end":{"line":121,"col":12,"offset":4700},"extra":{"metavars":{"$ANYTHING":{"start":{"line":110,"col":24,"offset":4309},"end":{"line":110,"col":36,"offset":4321},"abstract_content":"query_params"},"$HTMLSTR":{"start":{"line":114,"col":33,"offset":4430},"end":{"line":116,"col":26,"offset":4481},"abstract_content":"\n            <html><body>\n            <h1>Profile: "}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"df3114d694359837aab3d9690096d3043c826183a88836a78493d66ae482facc633f8f277c212c93313c831022a4b9aba3f643aba851462b57a5bd76f08f4ab1_0","lines":"        return HTMLResponse(f'''\n            <html><body>\n            <h1>Profile: {user[1]}</h1>\n            <p>Email: {user[2]}</p>\n            <p>Bio: {user[4]}</p>\n            <a href=\"/\">Home</a> | <a href=\"/edit_profile?username={username}\">Edit Profile</a>\n            </body></html>\n        ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":110,"col":16,"offset":4301},"end":{"line":110,"col":36,"offset":4321}},"request.query_params"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":110,"col":5,"offset":4290},"end":{"line":110,"col":13,"offset":4298}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_83_original.py","start":{"line":114,"col":29,"offset":4426},"end":{"line":121,"col":12,"offset":4700}},"f'''\n            <html><body>\n            <h1>Profile: {user[1]}</h1>\n            <p>Email: {user[2]}</p>\n            <p>Bio: {user[4]}</p>\n            <a href=\"/\">Home</a> | <a href=\"/edit_profile?username={username}\">Edit Profile</a>\n            </body></html>\n        '''"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":106,"col":30,"offset":4423},"end":{"line":106,"col":150,"offset":4543},"extra":{"metavars":{"$ANYTHING":{"start":{"line":97,"col":33,"offset":4005},"end":{"line":97,"col":37,"offset":4009},"abstract_content":"form"},"$HTMLSTR":{"start":{"line":106,"col":32,"offset":4425},"end":{"line":106,"col":74,"offset":4467},"abstract_content":"<html><body><h2>Feedback received:</h2><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a2d5c8e9042e30c267fb92bc3aeb511766a82e39b7e88c069d3c458202272457084f08e22a4cf123e57f1bedb4ae4d064d5f2b87e115f733e4b804ac8c6d7752_0","lines":"        return response.html(f\"<html><body><h2>Feedback received:</h2><p>{user_feedback}</p><a href='/dashboard'>Back to Dashboard</a></body></html>\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":97,"col":25,"offset":3997},"end":{"line":97,"col":37,"offset":4009}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":97,"col":9,"offset":3981},"end":{"line":97,"col":22,"offset":3994}},"content":"user_feedback"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":106,"col":30,"offset":4423},"end":{"line":106,"col":150,"offset":4543}},"f\"<html><body><h2>Feedback received:</h2><p>{user_feedback}</p><a href='/dashboard'>Back to Dashboard</a></body></html>\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":106,"col":30,"offset":4423},"end":{"line":106,"col":150,"offset":4543},"extra":{"metavars":{"$APP":{"start":{"line":91,"col":2,"offset":3747},"end":{"line":91,"col":5,"offset":3750},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":232},"svalue_end":{"line":10,"col":27,"offset":252},"svalue_abstract_content":"Sanic(\"FeedbackApp\")"}},"$FUNC":{"start":{"line":92,"col":11,"offset":3812},"end":{"line":92,"col":26,"offset":3827},"abstract_content":"submit_feedback"},"$ROUTEVAR":{"start":{"line":97,"col":25,"offset":3997},"end":{"line":97,"col":32,"offset":4004},"abstract_content":"request"},"$HTMLSTR":{"start":{"line":106,"col":32,"offset":4425},"end":{"line":106,"col":74,"offset":4467},"abstract_content":"<html><body><h2>Feedback received:</h2><p>"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rule_name":"python.flask.security.injection.raw-html-concat.raw-html-format","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a94562a826fb27bb154b5f57532ecb3e8b6735ee8c3a8e6aa1d348409ec8a2273543fcf4b95f4b0d4463b644e6d3b099ba799e620671afe044667f3cc82ea843_0","lines":"        return response.html(f\"<html><body><h2>Feedback received:</h2><p>{user_feedback}</p><a href='/dashboard'>Back to Dashboard</a></body></html>\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":97,"col":25,"offset":3997},"end":{"line":97,"col":32,"offset":4004}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":97,"col":9,"offset":3981},"end":{"line":97,"col":22,"offset":3994}},"content":"user_feedback"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":106,"col":30,"offset":4423},"end":{"line":106,"col":150,"offset":4543}},"f\"<html><body><h2>Feedback received:</h2><p>{user_feedback}</p><a href='/dashboard'>Back to Dashboard</a></body></html>\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":120,"col":19,"offset":5185},"end":{"line":120,"col":71,"offset":5237},"extra":{"metavars":{"$ANYTHING":{"start":{"line":114,"col":21,"offset":4932},"end":{"line":114,"col":25,"offset":4936},"abstract_content":"args"},"$HTMLSTR":{"start":{"line":120,"col":21,"offset":5187},"end":{"line":120,"col":57,"offset":5223},"abstract_content":"<html><body><h2>Search Results for '"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1","semgrep.dev":{"rule":{"origin":"community","r_id":14360,"rule_id":"2ZUPER","rule_name":"python.django.security.injection.raw-html-format.raw-html-format","rv_id":946179,"url":"https://semgrep.dev/playground/r/l4Tx9Gr/python.django.security.injection.raw-html-format.raw-html-format","version_id":"l4Tx9Gr"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"327f4696ab966ef4f28f34046680734f0ba2530ec427453a0e9b952b6838a180b34e9eee883e301414c1b3db94ef6211837eacfd7bab4d35e8feca391409d77b_0","lines":"    result_html = f\"<html><body><h2>Search Results for '{query}'</h2>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":114,"col":13,"offset":4924},"end":{"line":114,"col":25,"offset":4936}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":114,"col":5,"offset":4916},"end":{"line":114,"col":10,"offset":4921}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":120,"col":19,"offset":5185},"end":{"line":120,"col":71,"offset":5237}},"f\"<html><body><h2>Search Results for '{query}'</h2>\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.raw-html-concat.raw-html-format","path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":120,"col":19,"offset":5185},"end":{"line":120,"col":71,"offset":5237},"extra":{"metavars":{"$APP":{"start":{"line":109,"col":2,"offset":4735},"end":{"line":109,"col":5,"offset":4738},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":232},"svalue_end":{"line":10,"col":27,"offset":252},"svalue_abstract_content":"Sanic(\"FeedbackApp\")"}},"$FUNC":{"start":{"line":110,"col":11,"offset":4783},"end":{"line":110,"col":27,"offset":4799},"abstract_content":"search_feedbacks"},"$ROUTEVAR":{"start":{"line":114,"col":13,"offset":4924},"end":{"line":114,"col":20,"offset":4931},"abstract_content":"request"},"$HTMLSTR":{"start":{"line":120,"col":21,"offset":5187},"end":{"line":120,"col":57,"offset":5223},"abstract_content":"<html><body><h2>Search Results for '"}},"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","shortlink":"https://sg.run/Pb7e","semgrep.dev":{"rule":{"origin":"community","r_id":14389,"rule_id":"GdUrJv","rule_name":"python.flask.security.injection.raw-html-concat.raw-html-format","rv_id":946225,"url":"https://semgrep.dev/playground/r/6xTxjPq/python.flask.security.injection.raw-html-concat.raw-html-format","version_id":"6xTxjPq"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c7d88593e3882e625e646c20d0db87ebf156e894116ec9ff412a584ba6003347ef464b2b5b69ecc73b28e8e01be669aed12369bd6cf1ab5c035de57122ef8cee_0","lines":"    result_html = f\"<html><body><h2>Search Results for '{query}'</h2>\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":114,"col":13,"offset":4924},"end":{"line":114,"col":20,"offset":4931}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":114,"col":5,"offset":4916},"end":{"line":114,"col":10,"offset":4921}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":120,"col":19,"offset":5185},"end":{"line":120,"col":71,"offset":5237}},"f\"<html><body><h2>Search Results for '{query}'</h2>\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-79/sample_84_original.py","start":{"line":161,"col":5,"offset":6814},"end":{"line":161,"col":51,"offset":6860},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"423ba910da0aef2596278a25b41c3a743031f951bc5b2f00546b74fc3b830a9f69d7831baf8c20f3f3f6d3092cb49472bc2df986a594bb56632bc3e283a83473_0","lines":"    app.run(host=\"0.0.0.0\", port=8000, debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":43,"col":20,"offset":1147},"end":{"line":43,"col":80,"offset":1207},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":43,"col":31,"offset":1158},"end":{"line":43,"col":36,"offset":1163},"abstract_content":"token","propagated_value":{"svalue_start":{"line":38,"col":17,"offset":934},"svalue_end":{"line":38,"col":53,"offset":970},"svalue_abstract_content":"request.headers.get('Authorization')"}}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"007c989d1511c53244ba196e4964994835df0f51039b33d7052e155b7204f287b92c06ce73446824fd64d60f349a7d499c2bc98d1febe43bfd15086b1b27d046_0","lines":"            data = jwt.decode(token, \"hard_coded_secret\", algorithms=[\"HS256\"])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":74,"col":22,"offset":2512},"end":{"line":74,"col":64,"offset":2554},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":62,"col":20,"offset":2044},"end":{"line":62,"col":24,"offset":2048},"abstract_content":"json"},"$LOG":{"start":{"line":74,"col":17,"offset":2507},"end":{"line":74,"col":21,"offset":2511},"abstract_content":"info"},"$SINK":{"start":{"line":74,"col":22,"offset":2512},"end":{"line":74,"col":64,"offset":2554},"abstract_content":"f'User {username} registered successfully'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5b06b4e404cd7ab3dc44cfdbb8d82658683f70cbdf174bc699c08807c858ad736e211c80580b1e9a7b4060153ecf93b89987765a4bb78a46c79a9229355e3e81_0","lines":"        logging.info(f'User {username} registered successfully')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":63,"col":16,"offset":2064},"end":{"line":63,"col":36,"offset":2084}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":63,"col":5,"offset":2053},"end":{"line":63,"col":13,"offset":2061}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":74,"col":22,"offset":2512},"end":{"line":74,"col":64,"offset":2554}},"f'User {username} registered successfully'"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":77,"col":25,"offset":2686},"end":{"line":77,"col":77,"offset":2738},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":62,"col":20,"offset":2044},"end":{"line":62,"col":24,"offset":2048},"abstract_content":"json"},"$LOG":{"start":{"line":77,"col":17,"offset":2678},"end":{"line":77,"col":24,"offset":2685},"abstract_content":"warning"},"$SINK":{"start":{"line":77,"col":25,"offset":2686},"end":{"line":77,"col":77,"offset":2738},"abstract_content":"f'Attempt to register existing username: {username}'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"53f3cd89e353809a342f10f8afcb8d45e5d3fbd2cf152c4f0049b7e9e66266a40ead98714e82a8233fa176588ddc7cfbb5524210db8532d9cbbbff8554ebbf9b_0","lines":"        logging.warning(f'Attempt to register existing username: {username}')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":63,"col":16,"offset":2064},"end":{"line":63,"col":36,"offset":2084}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":63,"col":5,"offset":2053},"end":{"line":63,"col":13,"offset":2061}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":77,"col":25,"offset":2686},"end":{"line":77,"col":77,"offset":2738}},"f'Attempt to register existing username: {username}'"]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":95,"col":17,"offset":3326},"end":{"line":95,"col":91,"offset":3400},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"473a401794922023eabc90aed1249bb849b5863be6055c2a59dc900e081e8227ec55486c82d8dcdd9827ffe134bea3f4f6c1c12276c332473a0c3b1418505b5a_0","lines":"        token = jwt.encode({'username': username}, \"hard_coded_secret\", algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":95,"col":17,"offset":3326},"end":{"line":95,"col":91,"offset":3400},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":95,"col":28,"offset":3337},"end":{"line":95,"col":50,"offset":3359},"abstract_content":"{'username'username}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"607e747dddae6b70ae0b0e5f2b3e3696a0ce580c5de05f29e66b03eb95a361deea4235f38267cd2993ccc0924e345dc0821f243b0b182aeb0f4c9be1f9728131_0","lines":"        token = jwt.encode({'username': username}, \"hard_coded_secret\", algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":96,"col":22,"offset":3422},"end":{"line":96,"col":63,"offset":3463},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":20,"offset":2911},"end":{"line":84,"col":24,"offset":2915},"abstract_content":"json"},"$LOG":{"start":{"line":96,"col":17,"offset":3417},"end":{"line":96,"col":21,"offset":3421},"abstract_content":"info"},"$SINK":{"start":{"line":96,"col":22,"offset":3422},"end":{"line":96,"col":63,"offset":3463},"abstract_content":"f'User {username} logged in successfully'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a1eedf12180db8309cc6e8754c2c7faad93c6e51affb5e08808ccea0c926efddc9d0335b0fdece39f3a4b9febc2d7f5ffb01df6fb0f80d8c06a3fd79f2aa8fdc_0","lines":"        logging.info(f'User {username} logged in successfully')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":85,"col":16,"offset":2931},"end":{"line":85,"col":36,"offset":2951}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":85,"col":5,"offset":2920},"end":{"line":85,"col":13,"offset":2928}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":96,"col":22,"offset":3422},"end":{"line":96,"col":63,"offset":3463}},"f'User {username} logged in successfully'"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":99,"col":21,"offset":3531},"end":{"line":99,"col":65,"offset":3575},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":20,"offset":2911},"end":{"line":84,"col":24,"offset":2915},"abstract_content":"json"},"$LOG":{"start":{"line":99,"col":13,"offset":3523},"end":{"line":99,"col":20,"offset":3530},"abstract_content":"warning"},"$SINK":{"start":{"line":99,"col":21,"offset":3531},"end":{"line":99,"col":65,"offset":3575},"abstract_content":"f'Failed login attempt for user: {username}'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e5fcc7137b4c163dae6c86e74e9f232c8199437a2116b978fae46710373c5e416d38ee152b2ec81ab76668e1caa075cbc08a4f436a35dcd5bd62c88e8c4e35e9_0","lines":"    logging.warning(f'Failed login attempt for user: {username}')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":85,"col":16,"offset":2931},"end":{"line":85,"col":36,"offset":2951}},"data.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":85,"col":5,"offset":2920},"end":{"line":85,"col":13,"offset":2928}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":99,"col":21,"offset":3531},"end":{"line":99,"col":65,"offset":3575}},"f'Failed login attempt for user: {username}'"]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":109,"col":26,"offset":3878},"end":{"line":109,"col":89,"offset":3941},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"473a401794922023eabc90aed1249bb849b5863be6055c2a59dc900e081e8227ec55486c82d8dcdd9827ffe134bea3f4f6c1c12276c332473a0c3b1418505b5a_1","lines":"        encrypted_data = jwt.encode({'data': data}, \"api_secret_key\", algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":109,"col":26,"offset":3878},"end":{"line":109,"col":89,"offset":3941},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":109,"col":37,"offset":3889},"end":{"line":109,"col":51,"offset":3903},"abstract_content":"{'data'data}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"36922672f27f975cf412e1239c6a534cc033210ed0683eda0468c6ca97c601032c26403fd2c7b776735802018a1990afaeef1720e9ef5cd15d604d3c4126a1ea_0","lines":"        encrypted_data = jwt.encode({'data': data}, \"api_secret_key\", algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":110,"col":22,"offset":3963},"end":{"line":110,"col":76,"offset":4017},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":102,"col":2,"offset":3640},"end":{"line":102,"col":5,"offset":3643},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":202},"svalue_end":{"line":9,"col":22,"offset":217},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":102,"col":6,"offset":3644},"end":{"line":102,"col":11,"offset":3649},"abstract_content":"route"},"$FUNC":{"start":{"line":104,"col":5,"offset":3704},"end":{"line":104,"col":17,"offset":3716},"abstract_content":"encrypt_data"},"$PARAM":{"start":{"line":104,"col":18,"offset":3717},"end":{"line":104,"col":30,"offset":3729},"abstract_content":"current_user"},"$LOG":{"start":{"line":110,"col":17,"offset":3958},"end":{"line":110,"col":21,"offset":3962},"abstract_content":"info"},"$SINK":{"start":{"line":110,"col":22,"offset":3963},"end":{"line":110,"col":76,"offset":4017},"abstract_content":"f'Data encrypted for user: {current_user[\"username\"]}'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4ec75491062de2532268425555abe26a4d17ef79ebbc6e03d313af80322ecc6d84090c7c5c8eff126f07d2dffdab798264fc651ee5f40c1294368ab80bb86138_0","lines":"        logging.info(f'Data encrypted for user: {current_user[\"username\"]}')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":104,"col":18,"offset":3717},"end":{"line":104,"col":30,"offset":3729}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":104,"col":18,"offset":3717},"end":{"line":104,"col":30,"offset":3729}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":110,"col":22,"offset":3963},"end":{"line":110,"col":76,"offset":4017}},"f'Data encrypted for user: {current_user[\"username\"]}'"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":119,"col":18,"offset":4318},"end":{"line":119,"col":81,"offset":4381},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":116,"col":2,"offset":4215},"end":{"line":116,"col":5,"offset":4218},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":202},"svalue_end":{"line":9,"col":22,"offset":217},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":116,"col":6,"offset":4219},"end":{"line":116,"col":11,"offset":4224},"abstract_content":"route"},"$FUNC":{"start":{"line":118,"col":5,"offset":4276},"end":{"line":118,"col":14,"offset":4285},"abstract_content":"protected"},"$PARAM":{"start":{"line":118,"col":15,"offset":4286},"end":{"line":118,"col":27,"offset":4298},"abstract_content":"current_user"},"$LOG":{"start":{"line":119,"col":13,"offset":4313},"end":{"line":119,"col":17,"offset":4317},"abstract_content":"info"},"$SINK":{"start":{"line":119,"col":18,"offset":4318},"end":{"line":119,"col":81,"offset":4381},"abstract_content":"f'Protected route accessed by user: {current_user[\"username\"]}'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7115e41aacd0207523db3c94486ddc0e04778b0f6fe047f34fba1007e9e45410bf79cd4814bbb2d3db70d551173f474e79627c93d16505636be4369b557c20d7_0","lines":"    logging.info(f'Protected route accessed by user: {current_user[\"username\"]}')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":118,"col":15,"offset":4286},"end":{"line":118,"col":27,"offset":4298}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":118,"col":15,"offset":4286},"end":{"line":118,"col":27,"offset":4298}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":119,"col":18,"offset":4318},"end":{"line":119,"col":81,"offset":4381}},"f'Protected route accessed by user: {current_user[\"username\"]}'"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":134,"col":25,"offset":4929},"end":{"line":134,"col":102,"offset":5006},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":130,"col":2,"offset":4753},"end":{"line":130,"col":5,"offset":4756},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":202},"svalue_end":{"line":9,"col":22,"offset":217},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":130,"col":6,"offset":4757},"end":{"line":130,"col":11,"offset":4762},"abstract_content":"route"},"$FUNC":{"start":{"line":132,"col":5,"offset":4823},"end":{"line":132,"col":16,"offset":4834},"abstract_content":"delete_user"},"$LOG":{"start":{"line":134,"col":17,"offset":4921},"end":{"line":134,"col":24,"offset":4928},"abstract_content":"warning"},"$SINK":{"start":{"line":134,"col":25,"offset":4929},"end":{"line":134,"col":102,"offset":5006},"abstract_content":"f'Unauthorized deletion attempt by {current_user[\"username\"]} for {username}'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1c7594e2fa79c049f184ebd03f2b3fdac56c1fe2031ed7345a7dcc01d9c1d5aeb3c4e45e3d2e2567ac25e5291683c14b043cff2a362e222c1e0099b3c92c25ce_0","lines":"        logging.warning(f'Unauthorized deletion attempt by {current_user[\"username\"]} for {username}')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":132,"col":17,"offset":4835},"end":{"line":132,"col":29,"offset":4847}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":132,"col":17,"offset":4835},"end":{"line":132,"col":29,"offset":4847}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":134,"col":25,"offset":4929},"end":{"line":134,"col":102,"offset":5006}},"f'Unauthorized deletion attempt by {current_user[\"username\"]} for {username}'"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":141,"col":18,"offset":5243},"end":{"line":141,"col":44,"offset":5269},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":130,"col":2,"offset":4753},"end":{"line":130,"col":5,"offset":4756},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":202},"svalue_end":{"line":9,"col":22,"offset":217},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":130,"col":6,"offset":4757},"end":{"line":130,"col":11,"offset":4762},"abstract_content":"route"},"$FUNC":{"start":{"line":132,"col":5,"offset":4823},"end":{"line":132,"col":16,"offset":4834},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":132,"col":31,"offset":4849},"end":{"line":132,"col":39,"offset":4857},"abstract_content":"username"},"$LOG":{"start":{"line":141,"col":13,"offset":5238},"end":{"line":141,"col":17,"offset":5242},"abstract_content":"info"},"$SINK":{"start":{"line":141,"col":18,"offset":5243},"end":{"line":141,"col":44,"offset":5269},"abstract_content":"f'User {username} deleted'"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2dd9df67386019c5f4cb81587d60092158e041f1a4c68a8d8c2c1814cee44d4325c31cd6eb242b12a53da18265c0e24feebd8616a3cfb5a8000a040dd7e2d091_0","lines":"    logging.info(f'User {username} deleted')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":132,"col":31,"offset":4849},"end":{"line":132,"col":39,"offset":4857}},"username"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":132,"col":31,"offset":4849},"end":{"line":132,"col":39,"offset":4857}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":141,"col":18,"offset":5243},"end":{"line":141,"col":44,"offset":5269}},"f'User {username} deleted'"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":154,"col":5,"offset":5635},"end":{"line":154,"col":24,"offset":5654},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2650db92dd757c82522366c99ad51a06a6ffad39a362eba1cbe76ee053abe82137e66f9c38dde9d884e7db56bea19d659877b2243c0f9602f0685446cc171d99_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-798/sample_146_original.py","start":{"line":154,"col":5,"offset":5635},"end":{"line":154,"col":24,"offset":5654},"extra":{"metavars":{"$APP":{"start":{"line":154,"col":5,"offset":5635},"end":{"line":154,"col":8,"offset":5638},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":202},"svalue_end":{"line":9,"col":22,"offset":217},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"7ceb6f8ae9ed7056cec624ed436297e8b5aeb801dffe8dda3f212afaa025fd5a7f5b249e8737073e4398a058994aec0569979fe87421515caa8636429d8c76b4_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":53,"col":17,"offset":1937},"end":{"line":53,"col":82,"offset":2002},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"6d750a815c4c169680a65fec66308a787a2de653da4a8b03b2e669406e1c62fe9d5f6826fd7559fe245712b4733806c7a4e5fdd50de0a94df13304c25a417b91_0","lines":"        token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":53,"col":17,"offset":1937},"end":{"line":53,"col":82,"offset":2002},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":53,"col":28,"offset":1948},"end":{"line":53,"col":50,"offset":1970},"abstract_content":"{'username'username}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d1b47799b4b691deca20dcf915add536215fa6ae920a9855b14710837c5cf4e616215d595f85a4c5cca1871a9c32d91bf716983c3a4eea99bdade528a36bdadc_0","lines":"        token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":73,"col":21,"offset":2820},"end":{"line":73,"col":86,"offset":2885},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"6d750a815c4c169680a65fec66308a787a2de653da4a8b03b2e669406e1c62fe9d5f6826fd7559fe245712b4733806c7a4e5fdd50de0a94df13304c25a417b91_1","lines":"            token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":73,"col":21,"offset":2820},"end":{"line":73,"col":86,"offset":2885},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":73,"col":32,"offset":2831},"end":{"line":73,"col":54,"offset":2853},"abstract_content":"{'username'username}"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d1b47799b4b691deca20dcf915add536215fa6ae920a9855b14710837c5cf4e616215d595f85a4c5cca1871a9c32d91bf716983c3a4eea99bdade528a36bdadc_1","lines":"            token = jwt.encode({'username': username}, SECRET_KEY, algorithm='HS256')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":88,"col":19,"offset":3487},"end":{"line":88,"col":70,"offset":3538},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":88,"col":30,"offset":3498},"end":{"line":88,"col":35,"offset":3503},"abstract_content":"token","propagated_value":{"svalue_start":{"line":83,"col":13,"offset":3312},"svalue_end":{"line":83,"col":51,"offset":3350},"svalue_abstract_content":"request.META.get('HTTP_AUTHORIZATION')"}}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"cee8b49bfe6234bd86a69a1b15e7d611ba9ac9069bae4dc7ffac2f34f0980b94ea415d291cc32a1bd94f251c7bcd83c9c8b166bdb8c7085c3de6a1997d9fae47_0","lines":"        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":113,"col":19,"offset":4587},"end":{"line":113,"col":70,"offset":4638},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":113,"col":30,"offset":4598},"end":{"line":113,"col":35,"offset":4603},"abstract_content":"token","propagated_value":{"svalue_start":{"line":108,"col":13,"offset":4412},"svalue_end":{"line":108,"col":51,"offset":4450},"svalue_abstract_content":"request.META.get('HTTP_AUTHORIZATION')"}}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"cee8b49bfe6234bd86a69a1b15e7d611ba9ac9069bae4dc7ffac2f34f0980b94ea415d291cc32a1bd94f251c7bcd83c9c8b166bdb8c7085c3de6a1997d9fae47_1","lines":"        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.unvalidated-password.unvalidated-password","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":123,"col":13,"offset":5076},"end":{"line":123,"col":44,"offset":5107},"extra":{"metavars":{"$MODEL":{"start":{"line":123,"col":13,"offset":5076},"end":{"line":123,"col":17,"offset":5080},"abstract_content":"user","propagated_value":{"svalue_start":{"line":114,"col":16,"offset":4654},"svalue_end":{"line":114,"col":62,"offset":4700},"svalue_abstract_content":"User.objects.get(username payload['username'])"}},"$X":{"start":{"line":123,"col":31,"offset":5094},"end":{"line":123,"col":43,"offset":5106},"abstract_content":"new_password","propagated_value":{"svalue_start":{"line":116,"col":24,"offset":4780},"svalue_end":{"line":116,"col":56,"offset":4812},"svalue_abstract_content":"request.POST.get('new_password')"}}},"message":"The password on 'user' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.","fix":"if django.contrib.auth.password_validation.validate_password(new_password, user=user):\n                user.set_password(new_password)","metadata":{"cwe":["CWE-521: Weak Password Requirements"],"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation"],"category":"security","technology":["django"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authentication"],"source":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","shortlink":"https://sg.run/OPBL","semgrep.dev":{"rule":{"origin":"community","r_id":9475,"rule_id":"L1UywG","rule_name":"python.django.security.audit.unvalidated-password.unvalidated-password","rv_id":946147,"url":"https://semgrep.dev/playground/r/7ZTrQ8B/python.django.security.audit.unvalidated-password.unvalidated-password","version_id":"7ZTrQ8B"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6ddba034247f3d84553c078fd8da77136a43346d72784da59ab8be0739abce5436c32c9b2df0105a3c2504e1ee6fc6141ed539f0707e23fac8695c62fda228f9_0","lines":"            user.set_password(new_password)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":146,"col":19,"offset":6072},"end":{"line":146,"col":70,"offset":6123},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":146,"col":30,"offset":6083},"end":{"line":146,"col":35,"offset":6088},"abstract_content":"token","propagated_value":{"svalue_start":{"line":141,"col":13,"offset":5897},"svalue_end":{"line":141,"col":51,"offset":5935},"svalue_abstract_content":"request.META.get('HTTP_AUTHORIZATION')"}}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"cee8b49bfe6234bd86a69a1b15e7d611ba9ac9069bae4dc7ffac2f34f0980b94ea415d291cc32a1bd94f251c7bcd83c9c8b166bdb8c7085c3de6a1997d9fae47_2","lines":"        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_147_original.py","start":{"line":162,"col":19,"offset":6761},"end":{"line":162,"col":70,"offset":6812},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":162,"col":30,"offset":6772},"end":{"line":162,"col":35,"offset":6777},"abstract_content":"token","propagated_value":{"svalue_start":{"line":157,"col":13,"offset":6586},"svalue_end":{"line":157,"col":51,"offset":6624},"svalue_abstract_content":"request.META.get('HTTP_AUTHORIZATION')"}}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"cee8b49bfe6234bd86a69a1b15e7d611ba9ac9069bae4dc7ffac2f34f0980b94ea415d291cc32a1bd94f251c7bcd83c9c8b166bdb8c7085c3de6a1997d9fae47_3","lines":"        payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"generic.secrets.security.detected-jwt-token.detected-jwt-token","path":"vulnerability_samples/CWE-798/sample_149_original.py","start":{"line":19,"col":19,"offset":459},"end":{"line":19,"col":131,"offset":571},"extra":{"metavars":{},"message":"JWT token detected","metadata":{"source-rule-url":"https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py","category":"security","technology":["secrets","jwt"],"confidence":"LOW","references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"cwe":["CWE-321: Use of Hard-coded Cryptographic Key"],"owasp":["A02:2021 - Cryptographic Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token","shortlink":"https://sg.run/05N5","semgrep.dev":{"rule":{"origin":"community","r_id":12854,"rule_id":"kxU8E8","rule_name":"generic.secrets.security.detected-jwt-token.detected-jwt-token","rv_id":945504,"url":"https://semgrep.dev/playground/r/PkTQZeN/generic.secrets.security.detected-jwt-token.detected-jwt-token","version_id":"PkTQZeN"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"279f6294d81081bb444292b8ef43a125bb13bec3c92c157538d8f31250cadd4ed14a0e11d6da32be5f8eaccc0130d813d3b7a3d0798be2f6f5661dac5ec4303f_0","lines":"    AUTH_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":11,"col":1,"offset":176},"end":{"line":11,"col":44,"offset":219},"extra":{"metavars":{"$M":{"start":{"line":11,"col":1,"offset":176},"end":{"line":11,"col":4,"offset":179},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead","metadata":{"likelihood":"LOW","impact":"LOW","confidence":"LOW","category":"security","cwe":["CWE-489: Active Debug Code"],"owasp":["A05:2021 - Security Misconfiguration"],"references":["https://bento.dev/checks/flask/avoid-hardcoded-config/","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values","https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"],"subcategory":["audit"],"technology":["flask"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","shortlink":"https://sg.run/Ekde","semgrep.dev":{"rule":{"origin":"community","r_id":9537,"rule_id":"4bUkX0","rule_name":"python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","rv_id":946210,"url":"https://semgrep.dev/playground/r/44TZkrP/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","version_id":"44TZkrP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"4a2440d42f3dac498fe4302c4da06d8fbbf470d83949cb4fb55365b77740086e266884af9cd56a7dfa2c4467d2eb922af0f916a186260c8e63111edf59d80304_0","lines":"app.config['SECRET_KEY'] = 'supersecretkey'  # Vulnerable: Hardcoded secret key","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":54,"col":21,"offset":1381},"end":{"line":54,"col":70,"offset":1430},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":50,"col":2,"offset":1238},"end":{"line":50,"col":5,"offset":1241},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":50,"col":6,"offset":1242},"end":{"line":50,"col":11,"offset":1247},"abstract_content":"route"},"$FUNC":{"start":{"line":52,"col":5,"offset":1301},"end":{"line":52,"col":21,"offset":1317},"abstract_content":"get_user_profile"},"$PARAM":{"start":{"line":52,"col":22,"offset":1318},"end":{"line":52,"col":26,"offset":1322},"abstract_content":"user"},"$LOG":{"start":{"line":54,"col":16,"offset":1376},"end":{"line":54,"col":20,"offset":1380},"abstract_content":"info"},"$SINK":{"start":{"line":54,"col":21,"offset":1381},"end":{"line":54,"col":70,"offset":1430},"abstract_content":"f\"Returning cached profile for user {user['id']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f28f545f1b22ec6e2d371e16b1ec321475bc14e7511d02e3c95d2e8e5e7745766bbc45f8c3b3bdaf29973e2e0e24a0cd9f7e74f3d1ff2f5dd1dda74cdb8689a4_0","lines":"        logger.info(f\"Returning cached profile for user {user['id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":52,"col":22,"offset":1318},"end":{"line":52,"col":26,"offset":1322}},"user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":52,"col":22,"offset":1318},"end":{"line":52,"col":26,"offset":1322}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":54,"col":21,"offset":1381},"end":{"line":54,"col":70,"offset":1430}},"f\"Returning cached profile for user {user['id']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":57,"col":17,"offset":1503},"end":{"line":57,"col":58,"offset":1544},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":50,"col":2,"offset":1238},"end":{"line":50,"col":5,"offset":1241},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":50,"col":6,"offset":1242},"end":{"line":50,"col":11,"offset":1247},"abstract_content":"route"},"$FUNC":{"start":{"line":52,"col":5,"offset":1301},"end":{"line":52,"col":21,"offset":1317},"abstract_content":"get_user_profile"},"$PARAM":{"start":{"line":52,"col":22,"offset":1318},"end":{"line":52,"col":26,"offset":1322},"abstract_content":"user"},"$LOG":{"start":{"line":57,"col":12,"offset":1498},"end":{"line":57,"col":16,"offset":1502},"abstract_content":"info"},"$SINK":{"start":{"line":57,"col":17,"offset":1503},"end":{"line":57,"col":58,"offset":1544},"abstract_content":"f\"Fetching profile for user {user['id']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5d52de27fddd966f0af8e4d0efe6f622ec2112b5f8ae44ff7249aba85a30ccdecbb2ea19e6203f6b5767ad54bca2f7de4954be0350f5a4e9ab90cd27275d8396_0","lines":"    logger.info(f\"Fetching profile for user {user['id']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":52,"col":22,"offset":1318},"end":{"line":52,"col":26,"offset":1322}},"user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":52,"col":22,"offset":1318},"end":{"line":52,"col":26,"offset":1322}},"content":"user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":57,"col":17,"offset":1503},"end":{"line":57,"col":58,"offset":1544}},"f\"Fetching profile for user {user['id']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":70,"col":9,"offset":1934},"end":{"line":71,"col":71,"offset":2080},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":63,"col":20,"offset":1692},"end":{"line":63,"col":24,"offset":1696},"abstract_content":"json"},"$O":{"start":{"line":68,"col":9,"offset":1903},"end":{"line":68,"col":22,"offset":1916},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":70,"col":19,"offset":1944},"end":{"line":70,"col":83,"offset":2008},"abstract_content":"\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"d0a72ccfcf0de203e1f278b2f862a3f6a2b2de2c4d8785b4d242c09758244f4a46a9ad90eb95f30ae48180b473eae799ad9e55b5f1f305e733a62fb659d761cf_0","lines":"        c.execute(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\",\n                  (data['username'], data['email'], data['password']))  # Vulnerable: Storing plain text password","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":71,"col":20,"offset":2029},"end":{"line":71,"col":36,"offset":2045}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":70,"col":9,"offset":1934},"end":{"line":71,"col":71,"offset":2080}},"c.execute(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\",\n                  (data['username'], data['email'], data['password']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":70,"col":9,"offset":1934},"end":{"line":71,"col":71,"offset":2080},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":63,"col":20,"offset":1692},"end":{"line":63,"col":24,"offset":1696},"abstract_content":"json"},"$O":{"start":{"line":68,"col":9,"offset":1903},"end":{"line":68,"col":22,"offset":1916},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":70,"col":19,"offset":1944},"end":{"line":70,"col":83,"offset":2008},"abstract_content":"\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"4de3ba3cb7c656adc8d7fe7fbcfebcfed7cf22e6b9bd5b5fcb1b095066d3594af655b2881e5810054782472dbc28a86438f7d6c4dd7596605695e0284da45a1e_0","lines":"        c.execute(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\",\n                  (data['username'], data['email'], data['password']))  # Vulnerable: Storing plain text password","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":71,"col":20,"offset":2029},"end":{"line":71,"col":36,"offset":2045}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":70,"col":9,"offset":1934},"end":{"line":71,"col":71,"offset":2080}},"c.execute(\"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\",\n                  (data['username'], data['email'], data['password']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":73,"col":21,"offset":2166},"end":{"line":73,"col":68,"offset":2213},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":63,"col":20,"offset":1692},"end":{"line":63,"col":24,"offset":1696},"abstract_content":"json"},"$LOG":{"start":{"line":73,"col":16,"offset":2161},"end":{"line":73,"col":20,"offset":2165},"abstract_content":"info"},"$SINK":{"start":{"line":73,"col":21,"offset":2166},"end":{"line":73,"col":68,"offset":2213},"abstract_content":"f\"User {data['username']} created successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9982e2c91567d8c90830b21621c3e19083bd342a80752fd7f9cd7bc0eca2fb849ae4f125941cb4ee3b7a2027fa71f7630e1df0b033fb1c181c2f8ba1d280d2e8_0","lines":"        logger.info(f\"User {data['username']} created successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":73,"col":29,"offset":2174},"end":{"line":73,"col":45,"offset":2190}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":73,"col":21,"offset":2166},"end":{"line":73,"col":68,"offset":2213}},"f\"User {data['username']} created successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":76,"col":24,"offset":2343},"end":{"line":76,"col":101,"offset":2420},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":63,"col":20,"offset":1692},"end":{"line":63,"col":24,"offset":1696},"abstract_content":"json"},"$LOG":{"start":{"line":76,"col":16,"offset":2335},"end":{"line":76,"col":23,"offset":2342},"abstract_content":"warning"},"$SINK":{"start":{"line":76,"col":24,"offset":2343},"end":{"line":76,"col":101,"offset":2420},"abstract_content":"f\"Failed to create user {data['username']}: Username or email already exists\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"80671c9cde2d3cb0da606a0e7ef0dc5ebf7d1974e3d4d1455ee3f65f4a76519beef895774a2b52d967c56863e023b5a784776eefa9236b0afdfa3f01558b6662_0","lines":"        logger.warning(f\"Failed to create user {data['username']}: Username or email already exists\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":76,"col":49,"offset":2368},"end":{"line":76,"col":65,"offset":2384}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":76,"col":24,"offset":2343},"end":{"line":76,"col":101,"offset":2420}},"f\"Failed to create user {data['username']}: Username or email already exists\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":91,"col":9,"offset":2827},"end":{"line":92,"col":61,"offset":2946},"extra":{"metavars":{"$APP":{"start":{"line":81,"col":2,"offset":2533},"end":{"line":81,"col":5,"offset":2536},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":81,"col":6,"offset":2537},"end":{"line":81,"col":11,"offset":2542},"abstract_content":"route"},"$FUNC":{"start":{"line":83,"col":5,"offset":2595},"end":{"line":83,"col":16,"offset":2606},"abstract_content":"update_user"},"$PARAM":{"start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619},"abstract_content":"current_user"},"$PROPERTY":{"start":{"line":84,"col":20,"offset":2641},"end":{"line":84,"col":24,"offset":2645},"abstract_content":"json"},"$O":{"start":{"line":89,"col":9,"offset":2796},"end":{"line":89,"col":22,"offset":2809},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":91,"col":19,"offset":2837},"end":{"line":91,"col":66,"offset":2884},"abstract_content":"\"UPDATE users SET email = ? WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ca3f5493370a9965e9184067c5ed6827a1e7735ec63aeaec953753d461f1a51019b713eae2afc6b5485b28122f8376a130a7c96ace97098e14aa2d091a34314d_0","lines":"        c.execute(\"UPDATE users SET email = ? WHERE username = ?\",\n                  (data['email'], current_user['username']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":91,"col":9,"offset":2827},"end":{"line":92,"col":61,"offset":2946}},"c.execute(\"UPDATE users SET email = ? WHERE username = ?\",\n                  (data['email'], current_user['username']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":91,"col":9,"offset":2827},"end":{"line":92,"col":61,"offset":2946},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":20,"offset":2641},"end":{"line":84,"col":24,"offset":2645},"abstract_content":"json"},"$O":{"start":{"line":89,"col":9,"offset":2796},"end":{"line":89,"col":22,"offset":2809},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":91,"col":19,"offset":2837},"end":{"line":91,"col":66,"offset":2884},"abstract_content":"\"UPDATE users SET email = ? WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"4cd08a5b7da2dd320f440279248ab57d02c6867bbf2bc56daf3cdd582d5a28ed2326b00160c411609dc36d4a62d1b98db2b2c11f9933baa9e05d1b1ef1fa908a_0","lines":"        c.execute(\"UPDATE users SET email = ? WHERE username = ?\",\n                  (data['email'], current_user['username']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":92,"col":20,"offset":2905},"end":{"line":92,"col":33,"offset":2918}},"data['email']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":91,"col":9,"offset":2827},"end":{"line":92,"col":61,"offset":2946}},"c.execute(\"UPDATE users SET email = ? WHERE username = ?\",\n                  (data['email'], current_user['username']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":94,"col":21,"offset":2989},"end":{"line":94,"col":76,"offset":3044},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":81,"col":2,"offset":2533},"end":{"line":81,"col":5,"offset":2536},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":81,"col":6,"offset":2537},"end":{"line":81,"col":11,"offset":2542},"abstract_content":"route"},"$FUNC":{"start":{"line":83,"col":5,"offset":2595},"end":{"line":83,"col":16,"offset":2606},"abstract_content":"update_user"},"$PARAM":{"start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619},"abstract_content":"current_user"},"$LOG":{"start":{"line":94,"col":16,"offset":2984},"end":{"line":94,"col":20,"offset":2988},"abstract_content":"info"},"$SINK":{"start":{"line":94,"col":21,"offset":2989},"end":{"line":94,"col":76,"offset":3044},"abstract_content":"f\"User {current_user['username']} updated successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bd7d81fce1b05e18a15055df115fa21c76edd6ba33c6a568a09217852d9f3221a9a248a098845e9b1b8fa228dcf78d393088ed023accfc3e2c95a906f6750935_0","lines":"        logger.info(f\"User {current_user['username']} updated successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":94,"col":21,"offset":2989},"end":{"line":94,"col":76,"offset":3044}},"f\"User {current_user['username']} updated successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":97,"col":22,"offset":3163},"end":{"line":97,"col":81,"offset":3222},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":81,"col":2,"offset":2533},"end":{"line":81,"col":5,"offset":2536},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":81,"col":6,"offset":2537},"end":{"line":81,"col":11,"offset":2542},"abstract_content":"route"},"$FUNC":{"start":{"line":83,"col":5,"offset":2595},"end":{"line":83,"col":16,"offset":2606},"abstract_content":"update_user"},"$PARAM":{"start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619},"abstract_content":"current_user"},"$LOG":{"start":{"line":97,"col":16,"offset":3157},"end":{"line":97,"col":21,"offset":3162},"abstract_content":"error"},"$SINK":{"start":{"line":97,"col":22,"offset":3163},"end":{"line":97,"col":81,"offset":3222},"abstract_content":"f\"Error updating user {current_user['username']}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b6862abbfb839971386586894cd08aebd9a94baff4b670de97903a8fdcd5b5121ebe99724583b1fcc384ae90baa7c0b40af6695dfdc848b923a6d253495a0b5b_0","lines":"        logger.error(f\"Error updating user {current_user['username']}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":83,"col":17,"offset":2607},"end":{"line":83,"col":29,"offset":2619}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":97,"col":22,"offset":3163},"end":{"line":97,"col":81,"offset":3222}},"f\"Error updating user {current_user['username']}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":108,"col":9,"offset":3494},"end":{"line":108,"col":87,"offset":3572},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":102,"col":2,"offset":3324},"end":{"line":102,"col":5,"offset":3327},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":102,"col":6,"offset":3328},"end":{"line":102,"col":11,"offset":3333},"abstract_content":"route"},"$FUNC":{"start":{"line":104,"col":5,"offset":3389},"end":{"line":104,"col":16,"offset":3400},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413},"abstract_content":"current_user"},"$O":{"start":{"line":106,"col":9,"offset":3463},"end":{"line":106,"col":22,"offset":3476},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":108,"col":19,"offset":3504},"end":{"line":108,"col":57,"offset":3542},"abstract_content":"\"DELETE FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"47b109c56d2967943b2f82f47858d12cdd56dfb9d2295de1bf0ad66e9f217ec308f1ab21bd283b314cc068f3c08beab6385ec65b315e5640469c173222fab486_0","lines":"        c.execute(\"DELETE FROM users WHERE username = ?\", (current_user['username'],))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":108,"col":9,"offset":3494},"end":{"line":108,"col":87,"offset":3572}},"c.execute(\"DELETE FROM users WHERE username = ?\", (current_user['username'],))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":110,"col":21,"offset":3615},"end":{"line":110,"col":76,"offset":3670},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":102,"col":2,"offset":3324},"end":{"line":102,"col":5,"offset":3327},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":102,"col":6,"offset":3328},"end":{"line":102,"col":11,"offset":3333},"abstract_content":"route"},"$FUNC":{"start":{"line":104,"col":5,"offset":3389},"end":{"line":104,"col":16,"offset":3400},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413},"abstract_content":"current_user"},"$LOG":{"start":{"line":110,"col":16,"offset":3610},"end":{"line":110,"col":20,"offset":3614},"abstract_content":"info"},"$SINK":{"start":{"line":110,"col":21,"offset":3615},"end":{"line":110,"col":76,"offset":3670},"abstract_content":"f\"User {current_user['username']} deleted successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2c0797d964059bf935001b95a2b62e498da46e899b5a5d0b6d55ab6f36b93ef2d2183b89b4e981e14b80de9d3707a8bc04f4687b3bb0b9fa31e3b988bfe77694_0","lines":"        logger.info(f\"User {current_user['username']} deleted successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":110,"col":21,"offset":3615},"end":{"line":110,"col":76,"offset":3670}},"f\"User {current_user['username']} deleted successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":113,"col":22,"offset":3789},"end":{"line":113,"col":81,"offset":3848},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":102,"col":2,"offset":3324},"end":{"line":102,"col":5,"offset":3327},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":102,"col":6,"offset":3328},"end":{"line":102,"col":11,"offset":3333},"abstract_content":"route"},"$FUNC":{"start":{"line":104,"col":5,"offset":3389},"end":{"line":104,"col":16,"offset":3400},"abstract_content":"delete_user"},"$PARAM":{"start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413},"abstract_content":"current_user"},"$LOG":{"start":{"line":113,"col":16,"offset":3783},"end":{"line":113,"col":21,"offset":3788},"abstract_content":"error"},"$SINK":{"start":{"line":113,"col":22,"offset":3789},"end":{"line":113,"col":81,"offset":3848},"abstract_content":"f\"Error deleting user {current_user['username']}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9fc3440084800c8f3ce0c002f2d45947239a75a4aa8504f17c6928b008fc10124a488b8540a65c42e1d40319a18f26236ddf0730140e90ac6210dd2172ea2f88_0","lines":"        logger.error(f\"Error deleting user {current_user['username']}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413}},"current_user"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":104,"col":17,"offset":3401},"end":{"line":104,"col":29,"offset":3413}},"content":"current_user"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":113,"col":22,"offset":3789},"end":{"line":113,"col":81,"offset":3848}},"f\"Error deleting user {current_user['username']}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":126,"col":5,"offset":4231},"end":{"line":126,"col":111,"offset":4337},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":120,"col":20,"offset":4020},"end":{"line":120,"col":24,"offset":4024},"abstract_content":"json"},"$O":{"start":{"line":125,"col":9,"offset":4213},"end":{"line":125,"col":22,"offset":4226},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":126,"col":15,"offset":4241},"end":{"line":126,"col":72,"offset":4298},"abstract_content":"\"SELECT * FROM users WHERE username = ? AND password = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"76f85b71d0b92effe3f4fd6fa61d74300933bd6c992cca8bcf2817cee44374d7b0f16dedb3c6ed3ea6b40d9a1b6915cd49363419fd87803d052215882ed496c5_0","lines":"    c.execute(\"SELECT * FROM users WHERE username = ? AND password = ?\", (data['username'], data['password']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":126,"col":75,"offset":4301},"end":{"line":126,"col":91,"offset":4317}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":126,"col":5,"offset":4231},"end":{"line":126,"col":111,"offset":4337}},"c.execute(\"SELECT * FROM users WHERE username = ? AND password = ?\", (data['username'], data['password']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":126,"col":5,"offset":4231},"end":{"line":126,"col":111,"offset":4337},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":120,"col":20,"offset":4020},"end":{"line":120,"col":24,"offset":4024},"abstract_content":"json"},"$O":{"start":{"line":125,"col":9,"offset":4213},"end":{"line":125,"col":22,"offset":4226},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":126,"col":15,"offset":4241},"end":{"line":126,"col":72,"offset":4298},"abstract_content":"\"SELECT * FROM users WHERE username = ? AND password = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ba81d228293f6b7c9f6b421483c69e2eb7c9d687b8a054fdeb5b3f232d293821722f7a671b6af7d44d8c7dbe33bd0c4f88596ad7f8acdd7c2dc509552ac2e33b_0","lines":"    c.execute(\"SELECT * FROM users WHERE username = ? AND password = ?\", (data['username'], data['password']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":126,"col":75,"offset":4301},"end":{"line":126,"col":91,"offset":4317}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":126,"col":5,"offset":4231},"end":{"line":126,"col":111,"offset":4337}},"c.execute(\"SELECT * FROM users WHERE username = ? AND password = ?\", (data['username'], data['password']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":136,"col":21,"offset":4615},"end":{"line":136,"col":70,"offset":4664},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":120,"col":20,"offset":4020},"end":{"line":120,"col":24,"offset":4024},"abstract_content":"json"},"$LOG":{"start":{"line":136,"col":16,"offset":4610},"end":{"line":136,"col":20,"offset":4614},"abstract_content":"info"},"$SINK":{"start":{"line":136,"col":21,"offset":4615},"end":{"line":136,"col":70,"offset":4664},"abstract_content":"f\"User {data['username']} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"bb41368bfbc82d24167ac7ab5f45b72235f27d7031748449585a440ff9a5fc87b25fd2f1a6c2e257f051f675bdc6cb3de7a8f98125c6c2ed0295a45c2c4545d5_0","lines":"        logger.info(f\"User {data['username']} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":136,"col":29,"offset":4623},"end":{"line":136,"col":45,"offset":4639}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":136,"col":21,"offset":4615},"end":{"line":136,"col":70,"offset":4664}},"f\"User {data['username']} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":139,"col":24,"offset":4740},"end":{"line":139,"col":75,"offset":4791},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$LOGGER":{"start":{"line":14,"col":10,"offset":306},"end":{"line":14,"col":37,"offset":333},"abstract_content":"logging.getLogger(__name__)"},"$PROPERTY":{"start":{"line":120,"col":20,"offset":4020},"end":{"line":120,"col":24,"offset":4024},"abstract_content":"json"},"$LOG":{"start":{"line":139,"col":16,"offset":4732},"end":{"line":139,"col":23,"offset":4739},"abstract_content":"warning"},"$SINK":{"start":{"line":139,"col":24,"offset":4740},"end":{"line":139,"col":75,"offset":4791},"abstract_content":"f\"Failed login attempt for user {data['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0231c90e1a9c56771655c50c6da345bb9bf33d7304c3b1f068943561ba23d846e48a9d8712ab62f8cd7040f0559f418106420344cef1fe559e7a9ea703d4851e_0","lines":"        logger.warning(f\"Failed login attempt for user {data['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":139,"col":57,"offset":4773},"end":{"line":139,"col":73,"offset":4789}},"data['username']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":139,"col":24,"offset":4740},"end":{"line":139,"col":75,"offset":4791}},"f\"Failed login attempt for user {data['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":151,"col":5,"offset":5128},"end":{"line":152,"col":44,"offset":5256},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":145,"col":21,"offset":4967},"end":{"line":145,"col":25,"offset":4971},"abstract_content":"args"},"$O":{"start":{"line":150,"col":9,"offset":5110},"end":{"line":150,"col":22,"offset":5123},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":151,"col":15,"offset":5138},"end":{"line":151,"col":88,"offset":5211},"abstract_content":"\"SELECT username, email FROM users WHERE username LIKE ? OR email LIKE ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"7cbefb91ccfba3458f4dc15c9ab1ac87578015b7e49df8e82d03d4c23714b3dfc8883e0f2d4ad877450c6c8aa00e42542d7289388474d215a18e682b9b21f0b5_0","lines":"    c.execute(\"SELECT username, email FROM users WHERE username LIKE ? OR email LIKE ?\",\n              (f\"%{query}%\", f\"%{query}%\"))  # Vulnerable: SQL Injection","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":145,"col":13,"offset":4959},"end":{"line":145,"col":34,"offset":4980}},"request.args.get('q')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":145,"col":5,"offset":4951},"end":{"line":145,"col":10,"offset":4956}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":151,"col":5,"offset":5128},"end":{"line":152,"col":44,"offset":5256}},"c.execute(\"SELECT username, email FROM users WHERE username LIKE ? OR email LIKE ?\",\n              (f\"%{query}%\", f\"%{query}%\"))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":151,"col":5,"offset":5128},"end":{"line":152,"col":44,"offset":5256},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":145,"col":21,"offset":4967},"end":{"line":145,"col":25,"offset":4971},"abstract_content":"args"},"$O":{"start":{"line":150,"col":9,"offset":5110},"end":{"line":150,"col":22,"offset":5123},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":151,"col":15,"offset":5138},"end":{"line":151,"col":88,"offset":5211},"abstract_content":"\"SELECT username, email FROM users WHERE username LIKE ? OR email LIKE ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5241127e1061fb8848de38f968a3005daaabee3971ba1d6438e57879f2a273becebd3e5e97647508a06388401b2c759ef5170204747b9c70905514152c1f305c_0","lines":"    c.execute(\"SELECT username, email FROM users WHERE username LIKE ? OR email LIKE ?\",\n              (f\"%{query}%\", f\"%{query}%\"))  # Vulnerable: SQL Injection","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":145,"col":13,"offset":4959},"end":{"line":145,"col":34,"offset":4980}},"request.args.get('q')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":145,"col":5,"offset":4951},"end":{"line":145,"col":10,"offset":4956}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":151,"col":5,"offset":5128},"end":{"line":152,"col":44,"offset":5256}},"c.execute(\"SELECT username, email FROM users WHERE username LIKE ? OR email LIKE ?\",\n              (f\"%{query}%\", f\"%{query}%\"))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":159,"col":5,"offset":5436},"end":{"line":159,"col":24,"offset":5455},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"74819a29254fec20a92c9d56292781ae441e30fcef3c2905e5d5e7ee0057584c17a338e0b2d8769da13fd2e6968a8411e58ba56a050bd1331d17181f16d82fca_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-798/sample_85_original.py","start":{"line":159,"col":5,"offset":5436},"end":{"line":159,"col":24,"offset":5455},"extra":{"metavars":{"$APP":{"start":{"line":159,"col":5,"offset":5436},"end":{"line":159,"col":8,"offset":5439},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":160},"svalue_end":{"line":10,"col":22,"offset":175},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"9f4a45aa99d305a85a6339cb927dd9443cd4e618dfbddb06d162e8911c078a793d43ff33229e56aa4b0c5c1620f1ced763b3467542f1b50f229fcd1b4d70d817_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":19,"col":13,"offset":584},"end":{"line":21,"col":96,"offset":790},"extra":{"metavars":{"$FUNC":{"start":{"line":17,"col":9,"offset":539},"end":{"line":17,"col":12,"offset":542},"abstract_content":"get"},"$DATA":{"start":{"line":19,"col":13,"offset":584},"end":{"line":19,"col":21,"offset":592},"abstract_content":"endpoint"},"$W":{"start":{"line":19,"col":32,"offset":603},"end":{"line":19,"col":35,"offset":606},"abstract_content":"GET"},"$METHOD":{"start":{"line":21,"col":33,"offset":727},"end":{"line":21,"col":36,"offset":730},"abstract_content":"get"}},"message":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","shortlink":"https://sg.run/YvY4","semgrep.dev":{"rule":{"origin":"community","r_id":9514,"rule_id":"j2UvEw","rule_name":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","rv_id":946188,"url":"https://semgrep.dev/playground/r/1QToK1Y/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","version_id":"1QToK1Y"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"f968c1b00b4a968ef0adbb5ffd16daf95d717de88fd8b9b4488d512c3d16dc93d59828456389de937169c92b64fedc18b821b14425aa95eb2f3cb85818bb8ae8_0","lines":"            endpoint = request.GET.get('endpoint', 'data')\n            headers = {'Authorization': f'Bearer {self.token}'}\n            response = requests.get(f'{self.base_url}/{endpoint}', headers=headers, timeout=10)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":21,"col":37,"offset":731},"end":{"line":21,"col":66,"offset":760},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$CLS":{"start":{"line":12,"col":7,"offset":301},"end":{"line":12,"col":24,"offset":318},"abstract_content":"AccessExternalAPI"},"$FUNC":{"start":{"line":17,"col":9,"offset":539},"end":{"line":17,"col":12,"offset":542},"abstract_content":"get"},"$SELF":{"start":{"line":17,"col":13,"offset":543},"end":{"line":17,"col":17,"offset":547},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556},"abstract_content":"request"},"$URL":{"start":{"line":21,"col":37,"offset":731},"end":{"line":21,"col":66,"offset":760},"abstract_content":"f'{self.base_url}/{endpoint}'"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) in Django with Requests","functional-categories":["net::sink::http-request::requests","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","requests","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","shortlink":"https://sg.run/zd35l","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137917,"rule_id":"WAUWXYk","rule_name":"python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","rv_id":983029,"url":"https://semgrep.dev/playground/r/K3TJAWB/python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","version_id":"K3TJAWB"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"be0558b0a8201b2275153ec35ce2124a8a3df4db306f842ac169f4126ad98730279d84bac9d108806b476afd156e7ea5009e3ff043cf7f2cf2f337b10ac17c07_0","lines":"            response = requests.get(f'{self.base_url}/{endpoint}', headers=headers, timeout=10)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":19,"col":13,"offset":584},"end":{"line":19,"col":21,"offset":592}},"content":"endpoint"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":21,"col":37,"offset":731},"end":{"line":21,"col":66,"offset":760}},"f'{self.base_url}/{endpoint}'"]]},"engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":23,"col":25,"offset":855},"end":{"line":23,"col":69,"offset":899},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":10,"col":10,"offset":266},"end":{"line":10,"col":37,"offset":293},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":12,"col":7,"offset":301},"end":{"line":12,"col":24,"offset":318},"abstract_content":"AccessExternalAPI"},"$FUNC":{"start":{"line":17,"col":9,"offset":539},"end":{"line":17,"col":12,"offset":542},"abstract_content":"get"},"$SELF":{"start":{"line":17,"col":13,"offset":543},"end":{"line":17,"col":17,"offset":547},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556},"abstract_content":"request"},"$LOG":{"start":{"line":23,"col":20,"offset":850},"end":{"line":23,"col":24,"offset":854},"abstract_content":"info"},"$SINK":{"start":{"line":23,"col":25,"offset":855},"end":{"line":23,"col":69,"offset":899},"abstract_content":"f\"Successfully fetched data from {endpoint}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4df081648681bcdc993287d2d87516cec13fa10a92e5c2eda6c9921688ca2547be813acc7a356375484a5de6a66fdba47035b6d29cddffb923c64be5447fed82_0","lines":"            logger.info(f\"Successfully fetched data from {endpoint}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":19,"col":13,"offset":584},"end":{"line":19,"col":21,"offset":592}},"content":"endpoint"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":23,"col":25,"offset":855},"end":{"line":23,"col":69,"offset":899}},"f\"Successfully fetched data from {endpoint}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":24,"col":20,"offset":920},"end":{"line":24,"col":50,"offset":950},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9ec4488ca34981749d40ab2047285ef811b2c2dc208da4e317f6084873064e53d4e6f9e5839de411931fc164f7e346fd0fd16f0b29cc9204d012423f93832f0e_0","lines":"            return HttpResponse(response.content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.web.tainted-direct-response-django.tainted-direct-response-django","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":24,"col":20,"offset":920},"end":{"line":24,"col":50,"offset":950},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$CLS":{"start":{"line":12,"col":7,"offset":301},"end":{"line":12,"col":24,"offset":318},"abstract_content":"AccessExternalAPI"},"$FUNC":{"start":{"line":17,"col":9,"offset":539},"end":{"line":17,"col":12,"offset":542},"abstract_content":"get"},"$SELF":{"start":{"line":17,"col":13,"offset":543},"end":{"line":17,"col":17,"offset":547},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":17,"col":19,"offset":549},"end":{"line":17,"col":26,"offset":556},"abstract_content":"request"},"$SINK":{"start":{"line":24,"col":33,"offset":933},"end":{"line":24,"col":49,"offset":949},"abstract_content":"response.content"}},"message":"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Cross-Site Scripting (XSS) with Django","functional-categories":["web::sink::direct-response::django","web::sink::html-webpage::django","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A03:2021 - Injection","A07:2017 - Cross-Site Scripting (XSS)"],"references":["https://docs.djangoproject.com/en/5.0/ref/request-response/#httpresponse-objects","https://owasp.org/Top10/A03_2021-Injection"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.web.tainted-direct-response-django.tainted-direct-response-django","shortlink":"https://sg.run/kxlDo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137928,"rule_id":"X5UQjAr","rule_name":"python.django.web.tainted-direct-response-django.tainted-direct-response-django","rv_id":947837,"url":"https://semgrep.dev/playground/r/K3TJ4BW/python.django.web.tainted-direct-response-django.tainted-direct-response-django","version_id":"K3TJ4BW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.web.tainted-direct-response-django.tainted-direct-response-django","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"cb1f848527a9565d65a9fe4998c4745d5c23a603438450f89e79745383b4779672f0c833d0f9d95fcf076f183732c66da4b3f5d192296295dc025da0132d4a52_0","lines":"            return HttpResponse(response.content)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":24,"col":20,"offset":920},"end":{"line":24,"col":50,"offset":950}},"HttpResponse(response.content)"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":24,"col":20,"offset":920},"end":{"line":24,"col":50,"offset":950}},"HttpResponse(response.content)"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":31,"col":13,"offset":1218},"end":{"line":34,"col":108,"offset":1517},"extra":{"metavars":{"$FUNC":{"start":{"line":29,"col":9,"offset":1172},"end":{"line":29,"col":13,"offset":1176},"abstract_content":"post"},"$DATA":{"start":{"line":31,"col":13,"offset":1218},"end":{"line":31,"col":21,"offset":1226},"abstract_content":"endpoint"},"$W":{"start":{"line":31,"col":32,"offset":1237},"end":{"line":31,"col":36,"offset":1241},"abstract_content":"POST"},"$METHOD":{"start":{"line":34,"col":33,"offset":1442},"end":{"line":34,"col":37,"offset":1446},"abstract_content":"post"}},"message":"Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.","metadata":{"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/www-community/attacks/Server_Side_Request_Forgery"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","shortlink":"https://sg.run/YvY4","semgrep.dev":{"rule":{"origin":"community","r_id":9514,"rule_id":"j2UvEw","rule_name":"python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","rv_id":946188,"url":"https://semgrep.dev/playground/r/1QToK1Y/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","version_id":"1QToK1Y"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"bfcf055d927eadda2b5538fa5ea04b606df7af491662968f0c1da1ac5e9a2c0fc753f30f1a24f89bb58fb6564ed283c07cac2243470d321b8f4f397b13bca17a_0","lines":"            endpoint = request.POST.get('endpoint', 'data')\n            data = json.loads(request.body)\n            headers = {'Authorization': f'Bearer {self.token}', 'Content-Type': 'application/json'}\n            response = requests.post(f'{self.base_url}/{endpoint}', headers=headers, json=data, timeout=10)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":34,"col":38,"offset":1447},"end":{"line":34,"col":67,"offset":1476},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$CLS":{"start":{"line":12,"col":7,"offset":301},"end":{"line":12,"col":24,"offset":318},"abstract_content":"AccessExternalAPI"},"$FUNC":{"start":{"line":29,"col":9,"offset":1172},"end":{"line":29,"col":13,"offset":1176},"abstract_content":"post"},"$SELF":{"start":{"line":29,"col":14,"offset":1177},"end":{"line":29,"col":18,"offset":1181},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190},"abstract_content":"request"},"$URL":{"start":{"line":34,"col":38,"offset":1447},"end":{"line":34,"col":67,"offset":1476},"abstract_content":"f'{self.base_url}/{endpoint}'"}},"message":"Untrusted input might be used to build an HTTP request, which can lead to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from the server side to other internal or external systems. SSRF can lead to unauthorized access to sensitive data and, in some cases, allow the attacker to control applications or systems that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input to craft the base request. Instead, treat it as part of the path or query parameter and encode it appropriately. When user input is necessary to prepare the HTTP request, perform strict input validation. Additionally, whenever possible, use allowlists to only interact with expected, trusted domains.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-918: Server-Side Request Forgery (SSRF)"],"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Server-Side Request Forgery (SSRF) in Django with Requests","functional-categories":["net::sink::http-request::requests","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A10:2021 - Server-Side Request Forgery (SSRF)"],"references":["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","requests","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Server-Side Request Forgery (SSRF)"],"source":"https://semgrep.dev/r/python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","shortlink":"https://sg.run/zd35l","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137917,"rule_id":"WAUWXYk","rule_name":"python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","rv_id":983029,"url":"https://semgrep.dev/playground/r/K3TJAWB/python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","version_id":"K3TJAWB"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.net.tainted-django-http-request-requests.tainted-django-http-request-requests","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"604ad598d413e77ebf968f14e382b5f9ef903c7d3b9492b48cd28beec91c3a3dc264a2db5097bf2396bf9e11b702ff49e011764368e9a2d61267d11ae4c72b3c_0","lines":"            response = requests.post(f'{self.base_url}/{endpoint}', headers=headers, json=data, timeout=10)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":31,"col":13,"offset":1218},"end":{"line":31,"col":21,"offset":1226}},"content":"endpoint"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":34,"col":38,"offset":1447},"end":{"line":34,"col":67,"offset":1476}},"f'{self.base_url}/{endpoint}'"]]},"engine_kind":"PRO"}},{"check_id":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":36,"col":25,"offset":1582},"end":{"line":36,"col":66,"offset":1623},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$LOGGER":{"start":{"line":10,"col":10,"offset":266},"end":{"line":10,"col":37,"offset":293},"abstract_content":"logging.getLogger(__name__)"},"$CLS":{"start":{"line":12,"col":7,"offset":301},"end":{"line":12,"col":24,"offset":318},"abstract_content":"AccessExternalAPI"},"$FUNC":{"start":{"line":29,"col":9,"offset":1172},"end":{"line":29,"col":13,"offset":1176},"abstract_content":"post"},"$SELF":{"start":{"line":29,"col":14,"offset":1177},"end":{"line":29,"col":18,"offset":1181},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190},"abstract_content":"request"},"$LOG":{"start":{"line":36,"col":20,"offset":1577},"end":{"line":36,"col":24,"offset":1581},"abstract_content":"info"},"$SINK":{"start":{"line":36,"col":25,"offset":1582},"end":{"line":36,"col":66,"offset":1623},"abstract_content":"f\"Successfully posted data to {endpoint}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Django","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","shortlink":"https://sg.run/0oDWB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137910,"rule_id":"JDUNBoz","rule_name":"python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","rv_id":983027,"url":"https://semgrep.dev/playground/r/WrTEe4e/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","version_id":"WrTEe4e"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.log.tainted-log-injection-stdlib-django.tainted-log-injection-stdlib-django","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"84da76890f2287473ff4600d076c52cad2144f0254f37f0f3184f6282a165d2b918de460a86560fae1070256f8c69dfe93992036c9267081a377d84300290c18_0","lines":"            logger.info(f\"Successfully posted data to {endpoint}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":31,"col":13,"offset":1218},"end":{"line":31,"col":21,"offset":1226}},"content":"endpoint"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":36,"col":25,"offset":1582},"end":{"line":36,"col":66,"offset":1623}},"f\"Successfully posted data to {endpoint}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":37,"col":20,"offset":1644},"end":{"line":37,"col":50,"offset":1674},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9ec4488ca34981749d40ab2047285ef811b2c2dc208da4e317f6084873064e53d4e6f9e5839de411931fc164f7e346fd0fd16f0b29cc9204d012423f93832f0e_1","lines":"            return HttpResponse(response.content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.web.tainted-direct-response-django.tainted-direct-response-django","path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":37,"col":20,"offset":1644},"end":{"line":37,"col":50,"offset":1674},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$CLS":{"start":{"line":12,"col":7,"offset":301},"end":{"line":12,"col":24,"offset":318},"abstract_content":"AccessExternalAPI"},"$FUNC":{"start":{"line":29,"col":9,"offset":1172},"end":{"line":29,"col":13,"offset":1176},"abstract_content":"post"},"$SELF":{"start":{"line":29,"col":14,"offset":1177},"end":{"line":29,"col":18,"offset":1181},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":29,"col":20,"offset":1183},"end":{"line":29,"col":27,"offset":1190},"abstract_content":"request"},"$SINK":{"start":{"line":37,"col":33,"offset":1657},"end":{"line":37,"col":49,"offset":1673},"abstract_content":"response.content"}},"message":"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Cross-Site Scripting (XSS) with Django","functional-categories":["web::sink::direct-response::django","web::sink::html-webpage::django","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A03:2021 - Injection","A07:2017 - Cross-Site Scripting (XSS)"],"references":["https://docs.djangoproject.com/en/5.0/ref/request-response/#httpresponse-objects","https://owasp.org/Top10/A03_2021-Injection"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.web.tainted-direct-response-django.tainted-direct-response-django","shortlink":"https://sg.run/kxlDo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137928,"rule_id":"X5UQjAr","rule_name":"python.django.web.tainted-direct-response-django.tainted-direct-response-django","rv_id":947837,"url":"https://semgrep.dev/playground/r/K3TJ4BW/python.django.web.tainted-direct-response-django.tainted-direct-response-django","version_id":"K3TJ4BW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.web.tainted-direct-response-django.tainted-direct-response-django","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"821311a895b0f7d9e6fe690a7b55a9c5781cbe9c2e1900fc6199f6ff1bf0a9c5494aeb8b726e95938aba43f7cf951aa110cff13534bf9a059bf357a15bfdf2c1_0","lines":"            return HttpResponse(response.content)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":37,"col":20,"offset":1644},"end":{"line":37,"col":50,"offset":1674}},"HttpResponse(response.content)"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_86_original.py","start":{"line":37,"col":20,"offset":1644},"end":{"line":37,"col":50,"offset":1674}},"HttpResponse(response.content)"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_88_original.py","start":{"line":22,"col":18,"offset":598},"end":{"line":22,"col":83,"offset":663},"extra":{"metavars":{"$1":{"start":{"line":1,"col":9,"offset":8},"end":{"line":1,"col":14,"offset":13},"abstract_content":"mysql"},"$2":{"start":{"line":2,"col":2,"offset":16},"end":{"line":2,"col":3,"offset":17},"abstract_content":"a"},"$3":{"start":{"line":2,"col":6,"offset":20},"end":{"line":2,"col":7,"offset":21},"abstract_content":"n"},"$VALUE":{"start":{"line":22,"col":32,"offset":612},"end":{"line":22,"col":82,"offset":662},"abstract_content":"'mysql+pymysql://admin:password123@localhost/mydb'"},"$URL":{"start":{"line":22,"col":33,"offset":613},"end":{"line":22,"col":81,"offset":661},"abstract_content":"mysql+pymysql://admin:password123@localhost/mydb"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["sqlalchemy","sql","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret","shortlink":"https://sg.run/1D4w","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28366,"rule_id":"3qU4Zq","rule_name":"python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret","rv_id":948053,"url":"https://semgrep.dev/playground/r/rxT6kdq/python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret","version_id":"rxT6kdq"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d54df39759b159ab5f781580b1b3ffae05ce852369a0d8c04db8c605f76f6a54b946db16718d9b78b55391adcba7abe9cc646ddae50c0ae99e92c83b876f6fc6_0","lines":"        engine = create_engine('mysql+pymysql://admin:password123@localhost/mydb')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_88_original.py","start":{"line":22,"col":32,"offset":612},"end":{"line":22,"col":82,"offset":662}},"'mysql+pymysql://admin:password123@localhost/mydb'"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_88_original.py","start":{"line":22,"col":18,"offset":598},"end":{"line":22,"col":83,"offset":663}},"create_engine('mysql+pymysql://admin:password123@localhost/mydb')"]]},"engine_kind":"PRO"}},{"check_id":"python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret","path":"vulnerability_samples/CWE-798/sample_89_original.py","start":{"line":18,"col":16,"offset":363},"end":{"line":18,"col":82,"offset":429},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":8,"offset":7},"abstract_content":"mongodb"},"$2":{"start":{"line":1,"col":11,"offset":10},"end":{"line":1,"col":12,"offset":11},"abstract_content":"a"},"$3":{"start":{"line":1,"col":15,"offset":14},"end":{"line":1,"col":16,"offset":15},"abstract_content":"n"},"$URL":{"start":{"line":18,"col":29,"offset":376},"end":{"line":18,"col":80,"offset":427},"abstract_content":"mongodb://admin:admin123@localhost:27017/mydatabase"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pymongo","mongodb","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret","shortlink":"https://sg.run/2WP0","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28363,"rule_id":"8GU56J","rule_name":"python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret","rv_id":948026,"url":"https://semgrep.dev/playground/r/QkTZ6P8/python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret","version_id":"QkTZ6P8"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"87121ca7d10cfdfdcc853c080162591ad88baf514bcccc7c676e62b0cfe0991eda0b25d41c407305aa2357094614d8a38c583dfcb1040722e43edb2ee3a4c42d_0","lines":"        return MongoClient('mongodb://admin:admin123@localhost:27017/mydatabase')","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_89_original.py","start":{"line":18,"col":28,"offset":375},"end":{"line":18,"col":81,"offset":428}},"'mongodb://admin:admin123@localhost:27017/mydatabase'"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_89_original.py","start":{"line":18,"col":16,"offset":363},"end":{"line":18,"col":82,"offset":429}},"MongoClient('mongodb://admin:admin123@localhost:27017/mydatabase')"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","path":"vulnerability_samples/CWE-798/sample_90_original.py","start":{"line":61,"col":33,"offset":2216},"end":{"line":61,"col":55,"offset":2238},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"Bearer"},"$SINK":{"start":{"line":61,"col":33,"offset":2216},"end":{"line":61,"col":55,"offset":2238},"abstract_content":"'Bearer eyJhbGciOiXYZ'"},"$BEARER":{"start":{"line":61,"col":34,"offset":2217},"end":{"line":61,"col":54,"offset":2237},"abstract_content":"Bearer eyJhbGciOiXYZ"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["python","secrets","headers"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","shortlink":"https://sg.run/B09x","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40095,"rule_id":"qNUKD4","rule_name":"python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","rv_id":947994,"url":"https://semgrep.dev/playground/r/0bT1EBK/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","version_id":"0bT1EBK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"8f6f803ba234e8de7a5eb2e13c793392df248c2b5eb74c35503f2912d73a2b9c98f84531cd1c0d3c8bc5372db89f4d0f7a2fd10de0d6e7ea7731b7f198c3f642_0","lines":"    headers = {'Authorization': 'Bearer eyJhbGciOiXYZ'}","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_90_original.py","start":{"line":61,"col":33,"offset":2216},"end":{"line":61,"col":55,"offset":2238}},"'Bearer eyJhbGciOiXYZ'"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_90_original.py","start":{"line":61,"col":33,"offset":2216},"end":{"line":61,"col":55,"offset":2238}},"'Bearer eyJhbGciOiXYZ'"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","path":"vulnerability_samples/CWE-798/sample_91_original.py","start":{"line":114,"col":33,"offset":3581},"end":{"line":114,"col":55,"offset":3603},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"Bearer"},"$SINK":{"start":{"line":114,"col":33,"offset":3581},"end":{"line":114,"col":55,"offset":3603},"abstract_content":"'Bearer eyJhbGciOiXYZ'"},"$BEARER":{"start":{"line":114,"col":34,"offset":3582},"end":{"line":114,"col":54,"offset":3602},"abstract_content":"Bearer eyJhbGciOiXYZ"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["python","secrets","headers"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","shortlink":"https://sg.run/B09x","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40095,"rule_id":"qNUKD4","rule_name":"python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","rv_id":947994,"url":"https://semgrep.dev/playground/r/0bT1EBK/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","version_id":"0bT1EBK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"7e65b2f2901b94a1b64a8b579643aec79ee4865f1d380c792b992e89324ea49a272a2ffc2ab2d1f2bcc1a9962de76ec8ce5e3796e1627ce6df2d1d9c12da781f_0","lines":"    headers = {'Authorization': 'Bearer eyJhbGciOiXYZ'}  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_91_original.py","start":{"line":114,"col":33,"offset":3581},"end":{"line":114,"col":55,"offset":3603}},"'Bearer eyJhbGciOiXYZ'"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_91_original.py","start":{"line":114,"col":33,"offset":3581},"end":{"line":114,"col":55,"offset":3603}},"'Bearer eyJhbGciOiXYZ'"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","path":"vulnerability_samples/CWE-798/sample_92_original.py","start":{"line":44,"col":33,"offset":1091},"end":{"line":44,"col":55,"offset":1113},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"Bearer"},"$SINK":{"start":{"line":44,"col":33,"offset":1091},"end":{"line":44,"col":55,"offset":1113},"abstract_content":"'Bearer eyJhbGciOiXYZ'"},"$BEARER":{"start":{"line":44,"col":34,"offset":1092},"end":{"line":44,"col":54,"offset":1112},"abstract_content":"Bearer eyJhbGciOiXYZ"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["python","secrets","headers"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","shortlink":"https://sg.run/B09x","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":40095,"rule_id":"qNUKD4","rule_name":"python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","rv_id":947994,"url":"https://semgrep.dev/playground/r/0bT1EBK/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","version_id":"0bT1EBK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"2935a1fd1855cbe773febc4fd951c71a842b756843d20a9fcb6dc021efccd5167bafd676bf0e036dbadd902c6d5191b8ea09172c2e5782b00877d14d15f0c853_0","lines":"    headers = {'Authorization': 'Bearer eyJhbGciOiXYZ'}","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_92_original.py","start":{"line":44,"col":33,"offset":1091},"end":{"line":44,"col":55,"offset":1113}},"'Bearer eyJhbGciOiXYZ'"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-798/sample_92_original.py","start":{"line":44,"col":33,"offset":1091},"end":{"line":44,"col":55,"offset":1113}},"'Bearer eyJhbGciOiXYZ'"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":58,"col":13,"offset":1681},"end":{"line":59,"col":63,"offset":1824},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":46,"col":28,"offset":1302},"end":{"line":46,"col":32,"offset":1306},"abstract_content":"form"},"$O":{"start":{"line":57,"col":22,"offset":1655},"end":{"line":57,"col":35,"offset":1668},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":58,"col":28,"offset":1696},"end":{"line":58,"col":92,"offset":1760},"abstract_content":"\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"24feeb97ff2c711df688312e745e96d7a5c917341ab9f4bd47e77700e70b9b504c644f047555aa3f0798416f4f91207df2060e21402f662c04e88f3b6732fcc0_0","lines":"            cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":46,"col":20,"offset":1294},"end":{"line":46,"col":44,"offset":1318}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":46,"col":9,"offset":1283},"end":{"line":46,"col":17,"offset":1291}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":58,"col":13,"offset":1681},"end":{"line":59,"col":63,"offset":1824}},"cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":58,"col":13,"offset":1681},"end":{"line":59,"col":63,"offset":1824},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":46,"col":28,"offset":1302},"end":{"line":46,"col":32,"offset":1306},"abstract_content":"form"},"$O":{"start":{"line":57,"col":22,"offset":1655},"end":{"line":57,"col":35,"offset":1668},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":58,"col":28,"offset":1696},"end":{"line":58,"col":92,"offset":1760},"abstract_content":"\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"70228f63e0d0d8379df6ec2cda389e688762840fa551239c5751b96ae2dd78041ef706971d447c60ed5db52cb8ca49a6c47f076f33a73803258fdefa653abde3_0","lines":"            cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":46,"col":20,"offset":1294},"end":{"line":46,"col":44,"offset":1318}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":46,"col":9,"offset":1283},"end":{"line":46,"col":17,"offset":1291}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":58,"col":13,"offset":1681},"end":{"line":59,"col":63,"offset":1824}},"cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":66,"col":22,"offset":2021},"end":{"line":66,"col":56,"offset":2055},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":46,"col":28,"offset":1302},"end":{"line":46,"col":32,"offset":1306},"abstract_content":"form"},"$LOG":{"start":{"line":66,"col":17,"offset":2016},"end":{"line":66,"col":21,"offset":2020},"abstract_content":"info"},"$SINK":{"start":{"line":66,"col":22,"offset":2021},"end":{"line":66,"col":56,"offset":2055},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"94873bde8821ce1228000c5a4953eecfba9e80f29da4bf20adb92065ca33d1a9ffe89eab58bcf67055e140e17cf924fddfa58d814ed84d31f88c870c1411d484_0","lines":"        logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":46,"col":20,"offset":1294},"end":{"line":46,"col":44,"offset":1318}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":46,"col":9,"offset":1283},"end":{"line":46,"col":17,"offset":1291}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":66,"col":22,"offset":2021},"end":{"line":66,"col":56,"offset":2055}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":78,"col":9,"offset":2417},"end":{"line":78,"col":78,"offset":2486},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":73,"col":28,"offset":2263},"end":{"line":73,"col":32,"offset":2267},"abstract_content":"form"},"$O":{"start":{"line":77,"col":18,"offset":2395},"end":{"line":77,"col":31,"offset":2408},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":78,"col":24,"offset":2432},"end":{"line":78,"col":64,"offset":2472},"abstract_content":"\"SELECT * FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"dfd391d8bb65fe49686cf7428839e6fa57b4ecc24f3bc88066116086d367b834a64c79d8b2bedb71067ea535c0605120fa0886b92d8600a7ce177697d774b3c8_0","lines":"        cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":73,"col":20,"offset":2255},"end":{"line":73,"col":44,"offset":2279}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":73,"col":9,"offset":2244},"end":{"line":73,"col":17,"offset":2252}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":78,"col":9,"offset":2417},"end":{"line":78,"col":78,"offset":2486}},"cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":78,"col":9,"offset":2417},"end":{"line":78,"col":78,"offset":2486},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":73,"col":28,"offset":2263},"end":{"line":73,"col":32,"offset":2267},"abstract_content":"form"},"$O":{"start":{"line":77,"col":18,"offset":2395},"end":{"line":77,"col":31,"offset":2408},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":78,"col":24,"offset":2432},"end":{"line":78,"col":64,"offset":2472},"abstract_content":"\"SELECT * FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"0afae4f14acb75745ba9a87159b078fe85f3863fc33e127b99661aa526d8413b88893554abb31372ce11e108e776e96649416d682a79e64b82b4b43593429321_0","lines":"        cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":73,"col":20,"offset":2255},"end":{"line":73,"col":44,"offset":2279}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":73,"col":9,"offset":2244},"end":{"line":73,"col":17,"offset":2252}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":78,"col":9,"offset":2417},"end":{"line":78,"col":78,"offset":2486}},"cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":84,"col":26,"offset":2676},"end":{"line":84,"col":55,"offset":2705},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":73,"col":28,"offset":2263},"end":{"line":73,"col":32,"offset":2267},"abstract_content":"form"},"$LOG":{"start":{"line":84,"col":21,"offset":2671},"end":{"line":84,"col":25,"offset":2675},"abstract_content":"info"},"$SINK":{"start":{"line":84,"col":26,"offset":2676},"end":{"line":84,"col":55,"offset":2705},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e5b38b3447564b12c0c6098c6b44025a9e6d6894b48cf32795051932b2ea888d0af140888acc7ec820a8f9c6372b0858aa8e4af6d89c7033dfaccbadd12f6415_0","lines":"            logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":73,"col":20,"offset":2255},"end":{"line":73,"col":44,"offset":2279}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":73,"col":9,"offset":2244},"end":{"line":73,"col":17,"offset":2252}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":84,"col":26,"offset":2676},"end":{"line":84,"col":55,"offset":2705}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":5,"offset":3235},"end":{"line":107,"col":26,"offset":3433},"extra":{"metavars":{"$FUNC":{"start":{"line":102,"col":5,"offset":3215},"end":{"line":102,"col":17,"offset":3227},"abstract_content":"search_users"},"$DATA":{"start":{"line":103,"col":5,"offset":3235},"end":{"line":103,"col":13,"offset":3243},"abstract_content":"username"},"$W":{"start":{"line":103,"col":24,"offset":3254},"end":{"line":103,"col":28,"offset":3258},"abstract_content":"args"},"$INTERM":{"start":{"line":104,"col":5,"offset":3279},"end":{"line":104,"col":10,"offset":3284},"abstract_content":"query"},"$CURSOR":{"start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":11,"offset":3418},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":106,"col":14,"offset":3394},"svalue_end":{"line":106,"col":27,"offset":3407},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"fcbacc4f2815ee7b62fb64d15a8c9acae1fa21c19130bc5266c14efaefdca2a07a2b14b196979c7fa3cd00cebbcee68a66840e5d023532049c3260a4da8eef67_0","lines":"    username = request.args.get('username')\n    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n    conn = sqlite3.connect('example.db')\n    cursor = conn.cursor()\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":13,"offset":3287},"end":{"line":104,"col":65,"offset":3339},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":103,"col":24,"offset":3254},"end":{"line":103,"col":28,"offset":3258},"abstract_content":"args"},"$SQLSTR":{"start":{"line":104,"col":15,"offset":3289},"end":{"line":104,"col":53,"offset":3327},"abstract_content":"SELECT * FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7bea186ceba1cbdf16ca6a622e910adc4c4a412d0777f1a222efcca32d49f4726a46d0644f40e5ed892a5948704613e633fde794508b4ccb413511e3536fb759_0","lines":"    query = f\"SELECT * FROM users WHERE username = '{username}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":16,"offset":3246},"end":{"line":103,"col":28,"offset":3258}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":5,"offset":3235},"end":{"line":103,"col":13,"offset":3243}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":13,"offset":3287},"end":{"line":104,"col":65,"offset":3339}},"f\"SELECT * FROM users WHERE username = '{username}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":13,"offset":3287},"end":{"line":104,"col":65,"offset":3339},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":103,"col":24,"offset":3254},"end":{"line":103,"col":28,"offset":3258},"abstract_content":"args"},"$SQLSTR":{"start":{"line":104,"col":15,"offset":3289},"end":{"line":104,"col":53,"offset":3327},"abstract_content":"SELECT * FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9c42103232821c88521369f9ceaa358a8f62ab7aa04920f55c69b59e0fcee6b410a0ed27cd9e0e3a6b1d41079af968c8d77e0c1c8596ae813eaf9c45dfea061f_0","lines":"    query = f\"SELECT * FROM users WHERE username = '{username}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":16,"offset":3246},"end":{"line":103,"col":28,"offset":3258}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":5,"offset":3235},"end":{"line":103,"col":13,"offset":3243}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":13,"offset":3287},"end":{"line":104,"col":65,"offset":3339}},"f\"SELECT * FROM users WHERE username = '{username}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":26,"offset":3433},"extra":{"metavars":{"$X":{"start":{"line":104,"col":54,"offset":3328},"end":{"line":104,"col":62,"offset":3336},"abstract_content":"username","propagated_value":{"svalue_start":{"line":103,"col":16,"offset":3246},"svalue_end":{"line":103,"col":44,"offset":3274},"svalue_abstract_content":"request.args.get('username')"}},"$DB":{"start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":11,"offset":3418},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":106,"col":14,"offset":3394},"svalue_end":{"line":106,"col":27,"offset":3407},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":107,"col":20,"offset":3427},"end":{"line":107,"col":25,"offset":3432},"abstract_content":"query","propagated_value":{"svalue_start":{"line":104,"col":13,"offset":3287},"svalue_end":{"line":104,"col":65,"offset":3339},"svalue_abstract_content":"f\"SELECT * FROM users WHERE username = '{username}'\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e4ce3c2ce21b9c2b5a04bb8c6e435a26e17d055fa4e26a701bb6550fcd4fb912ca2a1b53718aea2f4233e5d102b25df4ef18cb42b3b6bc76b0cf5c8006242839_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":26,"offset":3433},"extra":{"metavars":{"$CONNECTION":{"start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":11,"offset":3418},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":106,"col":14,"offset":3394},"svalue_end":{"line":106,"col":27,"offset":3407},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":107,"col":20,"offset":3427},"end":{"line":107,"col":25,"offset":3432},"abstract_content":"query","propagated_value":{"svalue_start":{"line":104,"col":13,"offset":3287},"svalue_end":{"line":104,"col":65,"offset":3339},"svalue_abstract_content":"f\"SELECT * FROM users WHERE username = '{username}'\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"d84367045410ad96276eec2bf6eb4cfac12afbce76c6d0f39d2576e41755da67c55f4751f8a05b9c22eda6cf3db17e8b865248321f7e8ecfa9e1ea868c9a5088_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":26,"offset":3433},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":24,"offset":3254},"end":{"line":103,"col":28,"offset":3258},"abstract_content":"args"},"$SINK":{"start":{"line":104,"col":13,"offset":3287},"end":{"line":104,"col":65,"offset":3339},"abstract_content":"f\"SELECT * FROM users WHERE username = '{username}'\""},"$O":{"start":{"line":106,"col":14,"offset":3394},"end":{"line":106,"col":27,"offset":3407},"abstract_content":"conn.cursor()"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"88c9219da43f09cbc6d3d72b9ef4a27036725d458b3d918d560c54f7ecb09ce10203191a21478fdedf58d4e2a3666f16eae2094b77b4e4ce5c2e7f10d993deb5_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":16,"offset":3246},"end":{"line":103,"col":44,"offset":3274}},"request.args.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":5,"offset":3235},"end":{"line":103,"col":13,"offset":3243}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":5,"offset":3279},"end":{"line":104,"col":10,"offset":3284}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":26,"offset":3433}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":26,"offset":3433},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":24,"offset":3254},"end":{"line":103,"col":28,"offset":3258},"abstract_content":"args"},"$SINK":{"start":{"line":104,"col":13,"offset":3287},"end":{"line":104,"col":65,"offset":3339},"abstract_content":"f\"SELECT * FROM users WHERE username = '{username}'\""},"$O":{"start":{"line":106,"col":14,"offset":3394},"end":{"line":106,"col":27,"offset":3407},"abstract_content":"conn.cursor()"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b379e239c78379ed7d518179db086a5649b011d27c94c4bb68bb56cc1fb4448819c74589e511422c0a41c731e1a2f977646a6113eeb72de6cfee5d0dca9e84c6_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":16,"offset":3246},"end":{"line":103,"col":44,"offset":3274}},"request.args.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":5,"offset":3235},"end":{"line":103,"col":13,"offset":3243}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":5,"offset":3279},"end":{"line":104,"col":10,"offset":3284}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":5,"offset":3412},"end":{"line":107,"col":26,"offset":3433}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":20,"offset":3427},"end":{"line":107,"col":25,"offset":3432},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":24,"offset":3254},"end":{"line":103,"col":28,"offset":3258},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":106,"col":14,"offset":3394},"end":{"line":106,"col":27,"offset":3407},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":107,"col":20,"offset":3427},"end":{"line":107,"col":25,"offset":3432},"abstract_content":"query","propagated_value":{"svalue_start":{"line":104,"col":13,"offset":3287},"svalue_end":{"line":104,"col":65,"offset":3339},"svalue_abstract_content":"f\"SELECT * FROM users WHERE username = '{username}'\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"50023eab8c3c39725d6ae2bee750386eeb5a2bba8e31696382653254aabc037709a88af3419f6e36e83f7e0a75082b2e7ee9bbf21590c612de694eb1918e8252_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":16,"offset":3246},"end":{"line":103,"col":44,"offset":3274}},"request.args.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":103,"col":5,"offset":3235},"end":{"line":103,"col":13,"offset":3243}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":104,"col":5,"offset":3279},"end":{"line":104,"col":10,"offset":3284}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":107,"col":20,"offset":3427},"end":{"line":107,"col":25,"offset":3432}},"query"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":123,"col":9,"offset":3814},"end":{"line":123,"col":99,"offset":3904},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":115,"col":25,"offset":3616},"end":{"line":115,"col":29,"offset":3620},"abstract_content":"form"},"$O":{"start":{"line":122,"col":18,"offset":3792},"end":{"line":122,"col":31,"offset":3805},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":123,"col":24,"offset":3829},"end":{"line":123,"col":65,"offset":3870},"abstract_content":"\"UPDATE users SET email = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ed5a7efc92092adf478fdf08db0e2b5a4d37c8fddd0d8af28482606089a0964d56c481bb36f6d2cee61780e9e1d2f23f4a6212953f8ddb8b1237db3291eb8dfb_0","lines":"        cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":115,"col":17,"offset":3608},"end":{"line":115,"col":38,"offset":3629}},"request.form['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":115,"col":5,"offset":3596},"end":{"line":115,"col":14,"offset":3605}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":123,"col":9,"offset":3814},"end":{"line":123,"col":99,"offset":3904}},"cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":123,"col":9,"offset":3814},"end":{"line":123,"col":99,"offset":3904},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":115,"col":25,"offset":3616},"end":{"line":115,"col":29,"offset":3620},"abstract_content":"form"},"$O":{"start":{"line":122,"col":18,"offset":3792},"end":{"line":122,"col":31,"offset":3805},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":123,"col":24,"offset":3829},"end":{"line":123,"col":65,"offset":3870},"abstract_content":"\"UPDATE users SET email = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"7c9af9e520df86debb7d056c4834a082cf21bf0d252dde4aa7de9002692e542a189d426e4d9929d29adbc6873232dcb240e2a525d93388ceba230daf2644813e_0","lines":"        cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":115,"col":17,"offset":3608},"end":{"line":115,"col":38,"offset":3629}},"request.form['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":115,"col":5,"offset":3596},"end":{"line":115,"col":14,"offset":3605}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":123,"col":9,"offset":3814},"end":{"line":123,"col":99,"offset":3904}},"cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":170,"col":5,"offset":5288},"end":{"line":170,"col":24,"offset":5307},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2d7e70130e7db0820d1279ef62fe69c73550c2431b9eeece3d551f2b2a7ceffba29fe517e997b4cb49388a861ace3f54de71686319cc6c2776ff330aa3a09eba_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_158_original.py","start":{"line":170,"col":5,"offset":5288},"end":{"line":170,"col":24,"offset":5307},"extra":{"metavars":{"$APP":{"start":{"line":170,"col":5,"offset":5288},"end":{"line":170,"col":8,"offset":5291},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":236},"svalue_end":{"line":8,"col":22,"offset":251},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"36051d28a9852c8d445d5d1447977c6931f135731e508a5d8ec83a94b4e26e71dc98131df79745ba51e276c9e54d2392306fb528ad70d2f007f05882a0502a7e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":56,"col":13,"offset":1759},"end":{"line":57,"col":63,"offset":1902},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":43,"col":28,"offset":1314},"end":{"line":43,"col":32,"offset":1318},"abstract_content":"form"},"$O":{"start":{"line":55,"col":22,"offset":1733},"end":{"line":55,"col":35,"offset":1746},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":56,"col":28,"offset":1774},"end":{"line":56,"col":92,"offset":1838},"abstract_content":"\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"99cdb7269b86432d582729e6f122b87d6f3540e9cf626deb59bf0563bac50fde0b816e7161540b0424e73a32092f95b2601318ce8f0fe5356e5b7352740db98e_0","lines":"            cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":43,"col":20,"offset":1306},"end":{"line":43,"col":44,"offset":1330}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":43,"col":9,"offset":1295},"end":{"line":43,"col":17,"offset":1303}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":56,"col":13,"offset":1759},"end":{"line":57,"col":63,"offset":1902}},"cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":56,"col":13,"offset":1759},"end":{"line":57,"col":63,"offset":1902},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":43,"col":28,"offset":1314},"end":{"line":43,"col":32,"offset":1318},"abstract_content":"form"},"$O":{"start":{"line":55,"col":22,"offset":1733},"end":{"line":55,"col":35,"offset":1746},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":56,"col":28,"offset":1774},"end":{"line":56,"col":92,"offset":1838},"abstract_content":"\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"071dda35f79117bf02bd24025cf165df1f65f8833626190e1da111693a93355e7543b8950819b219712c6ddd757fc442721812ad99bce733dc01d07940607c08_0","lines":"            cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":43,"col":20,"offset":1306},"end":{"line":43,"col":44,"offset":1330}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":43,"col":9,"offset":1295},"end":{"line":43,"col":17,"offset":1303}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":56,"col":13,"offset":1759},"end":{"line":57,"col":63,"offset":1902}},"cursor.execute(\"INSERT INTO users (username, password, email) VALUES (?, ?, ?)\",\n                           (username, hashed_password, email))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":77,"col":9,"offset":2553},"end":{"line":77,"col":78,"offset":2622},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":72,"col":28,"offset":2409},"end":{"line":72,"col":32,"offset":2413},"abstract_content":"form"},"$O":{"start":{"line":76,"col":18,"offset":2531},"end":{"line":76,"col":31,"offset":2544},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":77,"col":24,"offset":2568},"end":{"line":77,"col":64,"offset":2608},"abstract_content":"\"SELECT * FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"71be628bf81865294d1635c02c7f2695982949d7a51971e4a22d6fecb58ed49848cddb2d7130bd67fb80c909e01bad67b65c74a5661fd8f94766118700322498_0","lines":"        cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":72,"col":20,"offset":2401},"end":{"line":72,"col":44,"offset":2425}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":72,"col":9,"offset":2390},"end":{"line":72,"col":17,"offset":2398}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":77,"col":9,"offset":2553},"end":{"line":77,"col":78,"offset":2622}},"cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":77,"col":9,"offset":2553},"end":{"line":77,"col":78,"offset":2622},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":72,"col":28,"offset":2409},"end":{"line":72,"col":32,"offset":2413},"abstract_content":"form"},"$O":{"start":{"line":76,"col":18,"offset":2531},"end":{"line":76,"col":31,"offset":2544},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":77,"col":24,"offset":2568},"end":{"line":77,"col":64,"offset":2608},"abstract_content":"\"SELECT * FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"33b4beb63be19f4dba6cf5c53704f861f7c2d4a275a619061062972c272ae74a58c5cc5dbbc559978c7b9e545dfca97d952a2d89d7f748e755b1232b63e0dbc0_0","lines":"        cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":72,"col":20,"offset":2401},"end":{"line":72,"col":44,"offset":2425}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":72,"col":9,"offset":2390},"end":{"line":72,"col":17,"offset":2398}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":77,"col":9,"offset":2553},"end":{"line":77,"col":78,"offset":2622}},"cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":5,"offset":3394},"end":{"line":107,"col":26,"offset":3591},"extra":{"metavars":{"$FUNC":{"start":{"line":102,"col":5,"offset":3374},"end":{"line":102,"col":17,"offset":3386},"abstract_content":"search_users"},"$DATA":{"start":{"line":103,"col":5,"offset":3394},"end":{"line":103,"col":13,"offset":3402},"abstract_content":"username"},"$W":{"start":{"line":103,"col":24,"offset":3413},"end":{"line":103,"col":28,"offset":3417},"abstract_content":"args"},"$INTERM":{"start":{"line":104,"col":5,"offset":3442},"end":{"line":104,"col":10,"offset":3447},"abstract_content":"query"},"$CURSOR":{"start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":11,"offset":3576},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":106,"col":14,"offset":3552},"svalue_end":{"line":106,"col":27,"offset":3565},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"89c322f0298607c486f2e9d7919bbc32edaa6d8984e6629a753fb804308343d57ff5b13002cf5e2d92ef3f8a9966deecb3eb88646c7324d52d3efb81138fd777_0","lines":"    username = request.args.get('username', '')\n    query = f\"SELECT * FROM users WHERE username LIKE '%{username}%'\"\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":13,"offset":3450},"end":{"line":104,"col":70,"offset":3507},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":103,"col":24,"offset":3413},"end":{"line":103,"col":28,"offset":3417},"abstract_content":"args"},"$SQLSTR":{"start":{"line":104,"col":15,"offset":3452},"end":{"line":104,"col":57,"offset":3494},"abstract_content":"SELECT * FROM users WHERE username LIKE '%"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"d6b80d29b01038c99691d7b8fc2ba175c95309b2f6e5cecdf58c7f2e3ade67f4a3a3076a5234fdb79e61d4bb207dfc00a481974c4cb8941ab16bf49bece6b82d_0","lines":"    query = f\"SELECT * FROM users WHERE username LIKE '%{username}%'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":16,"offset":3405},"end":{"line":103,"col":28,"offset":3417}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":5,"offset":3394},"end":{"line":103,"col":13,"offset":3402}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":13,"offset":3450},"end":{"line":104,"col":70,"offset":3507}},"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":13,"offset":3450},"end":{"line":104,"col":70,"offset":3507},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":103,"col":24,"offset":3413},"end":{"line":103,"col":28,"offset":3417},"abstract_content":"args"},"$SQLSTR":{"start":{"line":104,"col":15,"offset":3452},"end":{"line":104,"col":57,"offset":3494},"abstract_content":"SELECT * FROM users WHERE username LIKE '%"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"6e4236b9c1cc5576eee42fc342fdaf1709a7815a1e1b8e58ecc7e04d14752d9161b997643ef1411be4849db362be06fbff858cea70afa9463396bf8bd3ad6e18_0","lines":"    query = f\"SELECT * FROM users WHERE username LIKE '%{username}%'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":16,"offset":3405},"end":{"line":103,"col":28,"offset":3417}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":5,"offset":3394},"end":{"line":103,"col":13,"offset":3402}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":13,"offset":3450},"end":{"line":104,"col":70,"offset":3507}},"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":26,"offset":3591},"extra":{"metavars":{"$X":{"start":{"line":104,"col":58,"offset":3495},"end":{"line":104,"col":66,"offset":3503},"abstract_content":"username","propagated_value":{"svalue_start":{"line":103,"col":16,"offset":3405},"svalue_end":{"line":103,"col":48,"offset":3437},"svalue_abstract_content":"request.args.get('username''')"}},"$DB":{"start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":11,"offset":3576},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":106,"col":14,"offset":3552},"svalue_end":{"line":106,"col":27,"offset":3565},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":107,"col":20,"offset":3585},"end":{"line":107,"col":25,"offset":3590},"abstract_content":"query","propagated_value":{"svalue_start":{"line":104,"col":13,"offset":3450},"svalue_end":{"line":104,"col":70,"offset":3507},"svalue_abstract_content":"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"256d1e37fdff7df19ad96944538ee71447d63ad5159d0d927935be840b7987cf545f31e76c6b76595e306534b6b9d2fbdf33792d2aff107fe992ceed675b21fc_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":26,"offset":3591},"extra":{"metavars":{"$CONNECTION":{"start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":11,"offset":3576},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":106,"col":14,"offset":3552},"svalue_end":{"line":106,"col":27,"offset":3565},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":107,"col":20,"offset":3585},"end":{"line":107,"col":25,"offset":3590},"abstract_content":"query","propagated_value":{"svalue_start":{"line":104,"col":13,"offset":3450},"svalue_end":{"line":104,"col":70,"offset":3507},"svalue_abstract_content":"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"31a9c79a8adde4cbf7c4c78435c4d9bc4bd5bf701807bf5e0e065d63ec64eb1a2f2de7efae8b540633698d7f39afc6dadd6e5a8ba3915fed598d3f2ecd2fa9bb_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":26,"offset":3591},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":24,"offset":3413},"end":{"line":103,"col":28,"offset":3417},"abstract_content":"args"},"$SINK":{"start":{"line":104,"col":13,"offset":3450},"end":{"line":104,"col":70,"offset":3507},"abstract_content":"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""},"$O":{"start":{"line":106,"col":14,"offset":3552},"end":{"line":106,"col":27,"offset":3565},"abstract_content":"conn.cursor()"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"862b9382ed6eb3166d6cc2f15067e0b654533aeafae579a1cc12adfa8927701d0f4e9975ee8255ce64e90293ea341af507ba56007c499a08722f0d68f79bc4bc_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":16,"offset":3405},"end":{"line":103,"col":48,"offset":3437}},"request.args.get('username', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":5,"offset":3394},"end":{"line":103,"col":13,"offset":3402}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":5,"offset":3442},"end":{"line":104,"col":10,"offset":3447}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":26,"offset":3591}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":26,"offset":3591},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":24,"offset":3413},"end":{"line":103,"col":28,"offset":3417},"abstract_content":"args"},"$SINK":{"start":{"line":104,"col":13,"offset":3450},"end":{"line":104,"col":70,"offset":3507},"abstract_content":"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""},"$O":{"start":{"line":106,"col":14,"offset":3552},"end":{"line":106,"col":27,"offset":3565},"abstract_content":"conn.cursor()"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"c27c6c9e2cb4aa43b71c53a2afd00934a06ca3954a146e061aec3cf1a9bf117965faa5fdbe067b8ea449f162e637ed891957aa710b4c8fe89e62b57e5af54585_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":16,"offset":3405},"end":{"line":103,"col":48,"offset":3437}},"request.args.get('username', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":5,"offset":3394},"end":{"line":103,"col":13,"offset":3402}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":5,"offset":3442},"end":{"line":104,"col":10,"offset":3447}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":5,"offset":3570},"end":{"line":107,"col":26,"offset":3591}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":20,"offset":3585},"end":{"line":107,"col":25,"offset":3590},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":24,"offset":3413},"end":{"line":103,"col":28,"offset":3417},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":106,"col":14,"offset":3552},"end":{"line":106,"col":27,"offset":3565},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":107,"col":20,"offset":3585},"end":{"line":107,"col":25,"offset":3590},"abstract_content":"query","propagated_value":{"svalue_start":{"line":104,"col":13,"offset":3450},"svalue_end":{"line":104,"col":70,"offset":3507},"svalue_abstract_content":"f\"SELECT * FROM users WHERE username LIKE '%{username}%'\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"66fa5e58adcab378b54602559c8a16a374515efd339c02cf7688bae6bc460b0a68f48e8251a6b1191f9782da21131740611c15d96afd3b098169e007f6b2d016_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":16,"offset":3405},"end":{"line":103,"col":48,"offset":3437}},"request.args.get('username', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":103,"col":5,"offset":3394},"end":{"line":103,"col":13,"offset":3402}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":104,"col":5,"offset":3442},"end":{"line":104,"col":10,"offset":3447}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":107,"col":20,"offset":3585},"end":{"line":107,"col":25,"offset":3590}},"query"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":123,"col":13,"offset":4041},"end":{"line":123,"col":103,"offset":4131},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":116,"col":29,"offset":3861},"end":{"line":116,"col":33,"offset":3865},"abstract_content":"form"},"$O":{"start":{"line":120,"col":18,"offset":3984},"end":{"line":120,"col":31,"offset":3997},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":123,"col":28,"offset":4056},"end":{"line":123,"col":69,"offset":4097},"abstract_content":"\"UPDATE users SET email = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"580103c6a3237693f4bd2c4ee8b3651d5d650a3eb3fe8a7ec796c9b0fcbd0b1d308c3479550db1b165a2713d7513d78748a4731447319fcc0d3756c6d8b0e5bc_0","lines":"            cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":116,"col":21,"offset":3853},"end":{"line":116,"col":42,"offset":3874}},"request.form['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":116,"col":9,"offset":3841},"end":{"line":116,"col":18,"offset":3850}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":123,"col":13,"offset":4041},"end":{"line":123,"col":103,"offset":4131}},"cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":123,"col":13,"offset":4041},"end":{"line":123,"col":103,"offset":4131},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":116,"col":29,"offset":3861},"end":{"line":116,"col":33,"offset":3865},"abstract_content":"form"},"$O":{"start":{"line":120,"col":18,"offset":3984},"end":{"line":120,"col":31,"offset":3997},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":123,"col":28,"offset":4056},"end":{"line":123,"col":69,"offset":4097},"abstract_content":"\"UPDATE users SET email = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f9a055da111e218975768dfdd332c4b112bba0f26b6f60785891a703774821680c10f21392193e81cdcea9bf42cf7437a11eafe77e2bce8197fa5e46e0258a35_0","lines":"            cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":116,"col":21,"offset":3853},"end":{"line":116,"col":42,"offset":3874}},"request.form['email']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":116,"col":9,"offset":3841},"end":{"line":116,"col":18,"offset":3850}},"content":"new_email"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":123,"col":13,"offset":4041},"end":{"line":123,"col":103,"offset":4131}},"cursor.execute(\"UPDATE users SET email = ? WHERE id = ?\", (new_email, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":127,"col":13,"offset":4245},"end":{"line":127,"col":112,"offset":4344},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":117,"col":32,"offset":3906},"end":{"line":117,"col":36,"offset":3910},"abstract_content":"form"},"$O":{"start":{"line":127,"col":13,"offset":4245},"end":{"line":127,"col":19,"offset":4251},"abstract_content":"cursor"},"$SINK":{"start":{"line":127,"col":28,"offset":4260},"end":{"line":127,"col":72,"offset":4304},"abstract_content":"\"UPDATE users SET password = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f4b59a5a90529310a504bcdf94fd460307727595abe79d978c6a722790f29644c13feeb9486c833f9e45255df841eaed16d50bda768de8a3aebb96aee081e074_0","lines":"            cursor.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":117,"col":24,"offset":3898},"end":{"line":117,"col":48,"offset":3922}},"request.form['password']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":117,"col":9,"offset":3883},"end":{"line":117,"col":21,"offset":3895}},"content":"new_password"},{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":126,"col":13,"offset":4178},"end":{"line":126,"col":28,"offset":4193}},"content":"hashed_password"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":127,"col":13,"offset":4245},"end":{"line":127,"col":112,"offset":4344}},"cursor.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":127,"col":13,"offset":4245},"end":{"line":127,"col":112,"offset":4344},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":117,"col":32,"offset":3906},"end":{"line":117,"col":36,"offset":3910},"abstract_content":"form"},"$O":{"start":{"line":127,"col":13,"offset":4245},"end":{"line":127,"col":19,"offset":4251},"abstract_content":"cursor"},"$SINK":{"start":{"line":127,"col":28,"offset":4260},"end":{"line":127,"col":72,"offset":4304},"abstract_content":"\"UPDATE users SET password = ? WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"79678296b08be56e0c93524900e8defd7dd4e441d4158652f7964fd99579a79e7815242353bad95dcdb1f7a8510ce13753eef9f5f243d579ac46ec295a5d458b_0","lines":"            cursor.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":117,"col":24,"offset":3898},"end":{"line":117,"col":48,"offset":3922}},"request.form['password']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":117,"col":9,"offset":3883},"end":{"line":117,"col":21,"offset":3895}},"content":"new_password"},{"location":{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":126,"col":13,"offset":4178},"end":{"line":126,"col":28,"offset":4193}},"content":"hashed_password"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":127,"col":13,"offset":4245},"end":{"line":127,"col":112,"offset":4344}},"cursor.execute(\"UPDATE users SET password = ? WHERE id = ?\", (hashed_password, session['user_id']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":166,"col":5,"offset":5322},"end":{"line":166,"col":24,"offset":5341},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0cbe9dd39ffff3e85045b9ffefb118d4d26cd9906fb472c9e434a2e4d81b35cbd1b5d647961fb2c1a4d2159c3366c058f9cb97bda52d067d5c3951c8054a9369_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_159_original.py","start":{"line":166,"col":5,"offset":5322},"end":{"line":166,"col":24,"offset":5341},"extra":{"metavars":{"$APP":{"start":{"line":166,"col":5,"offset":5322},"end":{"line":166,"col":8,"offset":5325},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":224},"svalue_end":{"line":7,"col":22,"offset":239},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"67dd94c5ba1813a9bc6ebdd5a0d7e33bdc70bcff33cd6f4c0a7a0e9c37dadfd33c214881ccdfbf14c756dfed7ae9bd5be707b536261655b399a8a0a4b2e9f9ca_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":32,"col":9,"offset":1134},"end":{"line":32,"col":108,"offset":1233},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":24,"col":24,"offset":813},"end":{"line":24,"col":28,"offset":817},"abstract_content":"json"},"$O":{"start":{"line":30,"col":14,"offset":1103},"end":{"line":30,"col":27,"offset":1116},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":32,"col":24,"offset":1149},"end":{"line":32,"col":78,"offset":1203},"abstract_content":"\"INSERT INTO users (username, password) VALUES (?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ea7ec15738c39e7637b6fab68a0c361d7f2aa94abf1c905e4fc12cb6600dc1549e7f93708ac6fc5a4807a63ae2f41c9e50fded57e842be239b8f5af4ffff81d6_0","lines":"        cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, hashed_password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":24,"col":16,"offset":805},"end":{"line":24,"col":44,"offset":833}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":24,"col":5,"offset":794},"end":{"line":24,"col":13,"offset":802}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":32,"col":9,"offset":1134},"end":{"line":32,"col":108,"offset":1233}},"cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, hashed_password))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":32,"col":9,"offset":1134},"end":{"line":32,"col":108,"offset":1233},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":24,"col":24,"offset":813},"end":{"line":24,"col":28,"offset":817},"abstract_content":"json"},"$O":{"start":{"line":30,"col":14,"offset":1103},"end":{"line":30,"col":27,"offset":1116},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":32,"col":24,"offset":1149},"end":{"line":32,"col":78,"offset":1203},"abstract_content":"\"INSERT INTO users (username, password) VALUES (?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"c87019c62282bec1bab2f05f9c6ce54807b7406e022745731cd9ef00494b95a20d8156ee7106b65fd24eda4b3d31b2b1116050e9ae03fb3a7b76236e319fd005_0","lines":"        cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, hashed_password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":24,"col":16,"offset":805},"end":{"line":24,"col":44,"offset":833}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":24,"col":5,"offset":794},"end":{"line":24,"col":13,"offset":802}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":32,"col":9,"offset":1134},"end":{"line":32,"col":108,"offset":1233}},"cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, hashed_password))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":34,"col":22,"offset":1277},"end":{"line":34,"col":56,"offset":1311},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":24,"col":24,"offset":813},"end":{"line":24,"col":28,"offset":817},"abstract_content":"json"},"$LOG":{"start":{"line":34,"col":17,"offset":1272},"end":{"line":34,"col":21,"offset":1276},"abstract_content":"info"},"$SINK":{"start":{"line":34,"col":22,"offset":1277},"end":{"line":34,"col":56,"offset":1311},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"49e995daccbe45e40387923ac267c468eaa63d94acbf39d761b215abc2f9fc3d20ad40a3b5d9025fbb6594decd51c0bf002b254a414f9b2775804e58e1baa692_0","lines":"        logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":24,"col":16,"offset":805},"end":{"line":24,"col":44,"offset":833}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":24,"col":5,"offset":794},"end":{"line":24,"col":13,"offset":802}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":34,"col":22,"offset":1277},"end":{"line":34,"col":56,"offset":1311}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":49,"col":5,"offset":1852},"end":{"line":49,"col":74,"offset":1921},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":43,"col":24,"offset":1599},"end":{"line":43,"col":28,"offset":1603},"abstract_content":"json"},"$O":{"start":{"line":48,"col":14,"offset":1834},"end":{"line":48,"col":27,"offset":1847},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":49,"col":20,"offset":1867},"end":{"line":49,"col":60,"offset":1907},"abstract_content":"\"SELECT * FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"1ad52b94ada80a54006f31bea8febf7ec97bf4404bbfab6fdbf9d58cc6a6b03702b03486dde385e83cb7badf7a6250ee05d21efe7f7e88855d4afd1d6ae66cc9_0","lines":"    cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":43,"col":16,"offset":1591},"end":{"line":43,"col":44,"offset":1619}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":43,"col":5,"offset":1580},"end":{"line":43,"col":13,"offset":1588}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":49,"col":5,"offset":1852},"end":{"line":49,"col":74,"offset":1921}},"cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":49,"col":5,"offset":1852},"end":{"line":49,"col":74,"offset":1921},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":43,"col":24,"offset":1599},"end":{"line":43,"col":28,"offset":1603},"abstract_content":"json"},"$O":{"start":{"line":48,"col":14,"offset":1834},"end":{"line":48,"col":27,"offset":1847},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":49,"col":20,"offset":1867},"end":{"line":49,"col":60,"offset":1907},"abstract_content":"\"SELECT * FROM users WHERE username = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"dc277ad4c9b5a75e8115f08d3391c786d4999013d60e763e37b6010d58605e11aa8138591235feb587ea29ee51e180e2328d50586091c43bb92d4ca1601b39e9_0","lines":"    cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":43,"col":16,"offset":1591},"end":{"line":43,"col":44,"offset":1619}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":43,"col":5,"offset":1580},"end":{"line":43,"col":13,"offset":1588}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":49,"col":5,"offset":1852},"end":{"line":49,"col":74,"offset":1921}},"cursor.execute(\"SELECT * FROM users WHERE username = ?\", (username,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":54,"col":22,"offset":2082},"end":{"line":54,"col":51,"offset":2111},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":43,"col":24,"offset":1599},"end":{"line":43,"col":28,"offset":1603},"abstract_content":"json"},"$LOG":{"start":{"line":54,"col":17,"offset":2077},"end":{"line":54,"col":21,"offset":2081},"abstract_content":"info"},"$SINK":{"start":{"line":54,"col":22,"offset":2082},"end":{"line":54,"col":51,"offset":2111},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"550615d14d21bea055e0b920b2b99d0635f6d22c4bd86f1a215df7d83b8d01792cd401f14befd4f5f7826e2e912866ab5d7adbcb56290da11ebcb4b57bdd7742_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":43,"col":16,"offset":1591},"end":{"line":43,"col":44,"offset":1619}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":43,"col":5,"offset":1580},"end":{"line":43,"col":13,"offset":1588}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":54,"col":22,"offset":2082},"end":{"line":54,"col":51,"offset":2111}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":5,"offset":2685},"end":{"line":75,"col":26,"offset":2939},"extra":{"metavars":{"$FUNC":{"start":{"line":67,"col":5,"offset":2578},"end":{"line":67,"col":14,"offset":2587},"abstract_content":"get_books"},"$DATA":{"start":{"line":70,"col":5,"offset":2685},"end":{"line":70,"col":11,"offset":2691},"abstract_content":"author"},"$W":{"start":{"line":70,"col":22,"offset":2702},"end":{"line":70,"col":26,"offset":2706},"abstract_content":"args"},"$INTERM":{"start":{"line":74,"col":5,"offset":2829},"end":{"line":74,"col":10,"offset":2834},"abstract_content":"query"},"$STR":{"start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":68,"offset":2892},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CURSOR":{"start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":11,"offset":2924},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":73,"col":14,"offset":2811},"svalue_end":{"line":73,"col":27,"offset":2824},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"07179d33c467af612a4aedf80fa8678b93eb90bb44bccdf3b90af9a17ef82affbaf2ab4a705041b15667b5967c5e54f127278607e4d6c7282c9a23ecc2df10e5_0","lines":"    author = request.args.get('author')\n    year = request.args.get('year')\n    conn = sqlite3.connect('library.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":71,"col":5,"offset":2725},"end":{"line":75,"col":26,"offset":2939},"extra":{"metavars":{"$FUNC":{"start":{"line":67,"col":5,"offset":2578},"end":{"line":67,"col":14,"offset":2587},"abstract_content":"get_books"},"$DATA":{"start":{"line":71,"col":5,"offset":2725},"end":{"line":71,"col":9,"offset":2729},"abstract_content":"year"},"$W":{"start":{"line":71,"col":20,"offset":2740},"end":{"line":71,"col":24,"offset":2744},"abstract_content":"args"},"$INTERM":{"start":{"line":74,"col":5,"offset":2829},"end":{"line":74,"col":10,"offset":2834},"abstract_content":"query"},"$STR":{"start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":68,"offset":2892},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CURSOR":{"start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":11,"offset":2924},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":73,"col":14,"offset":2811},"svalue_end":{"line":73,"col":27,"offset":2824},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6a2ccb264369a766c7046342911e391f9f0f96d760643909c2e56de241bbc7566546bce8eb28d8fc17544a3b12d7834eac177b0076456df908bc057f6de419dd_0","lines":"    year = request.args.get('year')\n    conn = sqlite3.connect('library.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":89,"offset":2913},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":70,"col":22,"offset":2702},"end":{"line":70,"col":26,"offset":2706},"abstract_content":"args"},"$SQLSTR":{"start":{"line":74,"col":14,"offset":2838},"end":{"line":74,"col":67,"offset":2891},"abstract_content":"SELECT * FROM books WHERE author = '{}' AND year = {}"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ca7a4c0b32023fa281a7aba5d98dc18ff83e5aa73181baf5d664b17eeb2f359f9392e4f6a05acf127be61ba98cbcfa248e01895f1484df26c95939ad37a5d3d8_0","lines":"    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":14,"offset":2694},"end":{"line":70,"col":26,"offset":2706}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":5,"offset":2685},"end":{"line":70,"col":11,"offset":2691}},"content":"author"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":89,"offset":2913}},"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":89,"offset":2913},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":70,"col":22,"offset":2702},"end":{"line":70,"col":26,"offset":2706},"abstract_content":"args"},"$SQLSTR":{"start":{"line":74,"col":14,"offset":2838},"end":{"line":74,"col":67,"offset":2891},"abstract_content":"SELECT * FROM books WHERE author = '{}' AND year = {}"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"1bbd039ee0e248c69572f182ef871a05728feae6daf75009fd444f0d374aaac15d6c6e5100a366e206ca5e167df8014982bf4af1f021bbbdbd238f78d1e9b204_0","lines":"    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":14,"offset":2694},"end":{"line":70,"col":26,"offset":2706}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":5,"offset":2685},"end":{"line":70,"col":11,"offset":2691}},"content":"author"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":89,"offset":2913}},"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":26,"offset":2939},"extra":{"metavars":{"$DB":{"start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":11,"offset":2924},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":73,"col":14,"offset":2811},"svalue_end":{"line":73,"col":27,"offset":2824},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":75,"col":20,"offset":2933},"end":{"line":75,"col":25,"offset":2938},"abstract_content":"query","propagated_value":{"svalue_start":{"line":74,"col":13,"offset":2837},"svalue_end":{"line":74,"col":89,"offset":2913},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"44dad178a58b5138a51ebb4832a55717642edee81e1d045bf0699f45bb5d96f151fd606025eaec23104f23ac1db5ec0789c376221b5440cc5ea745d874e0836b_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":26,"offset":2939},"extra":{"metavars":{"$SQL":{"start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":68,"offset":2892},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CONNECTION":{"start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":11,"offset":2924},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":73,"col":14,"offset":2811},"svalue_end":{"line":73,"col":27,"offset":2824},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":75,"col":20,"offset":2933},"end":{"line":75,"col":25,"offset":2938},"abstract_content":"query","propagated_value":{"svalue_start":{"line":74,"col":13,"offset":2837},"svalue_end":{"line":74,"col":89,"offset":2913},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"f45297356b919e7cb35b5f19e436ea9303c84f6a1ebdc32d891a3674894e4c10e4c33ce60e89e677aaf83186dee6bbc9b7c0efb7876e44252572749f4e46178b_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":26,"offset":2939},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":70,"col":22,"offset":2702},"end":{"line":70,"col":26,"offset":2706},"abstract_content":"args"},"$O":{"start":{"line":73,"col":14,"offset":2811},"end":{"line":73,"col":27,"offset":2824},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":89,"offset":2913},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"6dddc8dce7386122be28284675fc154f64506bad38c02722fc9ee61bb80b6493d447baddbb1d0fed35f4e1d2992d7da885539630c4decdfec7d56faaea021ba2_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":14,"offset":2694},"end":{"line":70,"col":40,"offset":2720}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":5,"offset":2685},"end":{"line":70,"col":11,"offset":2691}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":5,"offset":2829},"end":{"line":74,"col":10,"offset":2834}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":26,"offset":2939}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":26,"offset":2939},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":70,"col":22,"offset":2702},"end":{"line":70,"col":26,"offset":2706},"abstract_content":"args"},"$O":{"start":{"line":73,"col":14,"offset":2811},"end":{"line":73,"col":27,"offset":2824},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":74,"col":13,"offset":2837},"end":{"line":74,"col":89,"offset":2913},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"0afa52d097d5bb2d3903f3484bd6fc0aec609a1dd409643a8ed7bcb71dd4177219ef1018e4d3d60f4e10e28ac02add42db8b93d4c4c5e5587964e5aea58f4c67_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":14,"offset":2694},"end":{"line":70,"col":40,"offset":2720}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":5,"offset":2685},"end":{"line":70,"col":11,"offset":2691}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":5,"offset":2829},"end":{"line":74,"col":10,"offset":2834}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":5,"offset":2918},"end":{"line":75,"col":26,"offset":2939}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":20,"offset":2933},"end":{"line":75,"col":25,"offset":2938},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":70,"col":22,"offset":2702},"end":{"line":70,"col":26,"offset":2706},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":73,"col":14,"offset":2811},"end":{"line":73,"col":27,"offset":2824},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":75,"col":20,"offset":2933},"end":{"line":75,"col":25,"offset":2938},"abstract_content":"query","propagated_value":{"svalue_start":{"line":74,"col":13,"offset":2837},"svalue_end":{"line":74,"col":89,"offset":2913},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"9cee849bd890261e31251b4002ce36f43b49280e2cbbabddc97d068edc0d05a76e4e52668fc4aa25540236f54cf9e01e47ba3a6134627602e1b0276b78208cc7_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":14,"offset":2694},"end":{"line":70,"col":40,"offset":2720}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":70,"col":5,"offset":2685},"end":{"line":70,"col":11,"offset":2691}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":74,"col":5,"offset":2829},"end":{"line":74,"col":10,"offset":2834}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":75,"col":20,"offset":2933},"end":{"line":75,"col":25,"offset":2938}},"query"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":91,"col":5,"offset":3557},"end":{"line":91,"col":102,"offset":3654},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":21,"offset":3266},"end":{"line":84,"col":25,"offset":3270},"abstract_content":"json"},"$O":{"start":{"line":90,"col":14,"offset":3539},"end":{"line":90,"col":27,"offset":3552},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":91,"col":20,"offset":3572},"end":{"line":91,"col":78,"offset":3630},"abstract_content":"\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ebaa0c2c93dc15d19108687919039957138008553fd5bb368f5632d3d9afc5a4534e36125829985ac11c199f3cc4e78b797908fc07ba193fba47de6b49c0966e_0","lines":"    cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\", (title, author, year))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":84,"col":13,"offset":3258},"end":{"line":84,"col":38,"offset":3283}},"request.json.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":84,"col":5,"offset":3250},"end":{"line":84,"col":10,"offset":3255}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":91,"col":5,"offset":3557},"end":{"line":91,"col":102,"offset":3654}},"cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\", (title, author, year))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":91,"col":5,"offset":3557},"end":{"line":91,"col":102,"offset":3654},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":21,"offset":3266},"end":{"line":84,"col":25,"offset":3270},"abstract_content":"json"},"$O":{"start":{"line":90,"col":14,"offset":3539},"end":{"line":90,"col":27,"offset":3552},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":91,"col":20,"offset":3572},"end":{"line":91,"col":78,"offset":3630},"abstract_content":"\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"59ed6515b79084f179c83b81c9903d7e6b767ae975c103e364ff365816e007151daf78b9406e473b615851595f5c76a5fe7a30b41691e76b6f1c8b94e9834b67_0","lines":"    cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\", (title, author, year))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":84,"col":13,"offset":3258},"end":{"line":84,"col":38,"offset":3283}},"request.json.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":84,"col":5,"offset":3250},"end":{"line":84,"col":10,"offset":3255}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":91,"col":5,"offset":3557},"end":{"line":91,"col":102,"offset":3654}},"cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\", (title, author, year))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":95,"col":18,"offset":3738},"end":{"line":95,"col":56,"offset":3776},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":84,"col":21,"offset":3266},"end":{"line":84,"col":25,"offset":3270},"abstract_content":"json"},"$LOG":{"start":{"line":95,"col":13,"offset":3733},"end":{"line":95,"col":17,"offset":3737},"abstract_content":"info"},"$SINK":{"start":{"line":95,"col":18,"offset":3738},"end":{"line":95,"col":56,"offset":3776},"abstract_content":"f\"New book added: {title} by {author}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2c26b88605680cf2e740f892b1d1a9726d2af69984760918ee61aa56a4fdb42a56ded506e8648205a583844a3da126208d7cee22fe7e31826786905a5b5195e0_0","lines":"    logging.info(f\"New book added: {title} by {author}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":84,"col":13,"offset":3258},"end":{"line":84,"col":38,"offset":3283}},"request.json.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":84,"col":5,"offset":3250},"end":{"line":84,"col":10,"offset":3255}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":95,"col":18,"offset":3738},"end":{"line":95,"col":56,"offset":3776}},"f\"New book added: {title} by {author}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":104,"col":5,"offset":4098},"end":{"line":104,"col":67,"offset":4160},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":98,"col":2,"offset":3859},"end":{"line":98,"col":5,"offset":3862},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":184},"svalue_end":{"line":8,"col":22,"offset":199},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":98,"col":6,"offset":3863},"end":{"line":98,"col":11,"offset":3868},"abstract_content":"route"},"$FUNC":{"start":{"line":99,"col":5,"offset":3917},"end":{"line":99,"col":13,"offset":3925},"abstract_content":"get_book"},"$PARAM":{"start":{"line":99,"col":14,"offset":3926},"end":{"line":99,"col":21,"offset":3933},"abstract_content":"book_id"},"$O":{"start":{"line":103,"col":14,"offset":4080},"end":{"line":103,"col":27,"offset":4093},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":104,"col":20,"offset":4113},"end":{"line":104,"col":54,"offset":4147},"abstract_content":"\"SELECT * FROM books WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"e49c28fbf554090e1fcd153dc995b172c080719ad733c4a89820d33571774acf2e17ece8c5afcf1e1efa973893c709531accf885456f51c2dd3ee9a74ec40e66_0","lines":"    cursor.execute(\"SELECT * FROM books WHERE id = ?\", (book_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":99,"col":14,"offset":3926},"end":{"line":99,"col":21,"offset":3933}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":99,"col":14,"offset":3926},"end":{"line":99,"col":21,"offset":3933}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":104,"col":5,"offset":4098},"end":{"line":104,"col":67,"offset":4160}},"cursor.execute(\"SELECT * FROM books WHERE id = ?\", (book_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":135,"col":5,"offset":5257},"end":{"line":135,"col":53,"offset":5305},"extra":{"metavars":{"$SQL":{"start":{"line":133,"col":20,"offset":5177},"end":{"line":133,"col":45,"offset":5202},"abstract_content":"update_query.rstrip(\", \")"},"$CONNECTION":{"start":{"line":135,"col":5,"offset":5257},"end":{"line":135,"col":11,"offset":5263},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":121,"col":14,"offset":4826},"svalue_end":{"line":121,"col":27,"offset":4839},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":135,"col":20,"offset":5272},"end":{"line":135,"col":32,"offset":5284},"abstract_content":"update_query","propagated_value":{"svalue_start":{"line":133,"col":20,"offset":5177},"svalue_end":{"line":133,"col":63,"offset":5220},"svalue_abstract_content":"update_query.rstrip(\", \")+\" WHERE id = ?\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"da362da0fdf97984df3abc067ba8c563b4894157b525b69a97c204ec8373cab62bfd0e3bf67d1c0edc5dd521f6635bf1b80740b69772e615d7c410c8ba8bcf9c_0","lines":"    cursor.execute(update_query, tuple(update_data))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":135,"col":5,"offset":5257},"end":{"line":135,"col":53,"offset":5305},"extra":{"metavars":{"$APP":{"start":{"line":111,"col":2,"offset":4371},"end":{"line":111,"col":5,"offset":4374},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":184},"svalue_end":{"line":8,"col":22,"offset":199},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":111,"col":6,"offset":4375},"end":{"line":111,"col":11,"offset":4380},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":4432},"end":{"line":112,"col":16,"offset":4443},"abstract_content":"update_book"},"$PARAM":{"start":{"line":112,"col":17,"offset":4444},"end":{"line":112,"col":24,"offset":4451},"abstract_content":"book_id"},"$PROPERTY":{"start":{"line":115,"col":21,"offset":4564},"end":{"line":115,"col":25,"offset":4568},"abstract_content":"json"},"$O":{"start":{"line":121,"col":14,"offset":4826},"end":{"line":121,"col":27,"offset":4839},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":133,"col":20,"offset":5177},"end":{"line":133,"col":63,"offset":5220},"abstract_content":"update_query.rstrip(\", \")+\" WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"054521b658f940ea8c52b952aaf93fabae8bf5fe9cb928284142afc41690b89d6262f7777d1a2b09036a8dc5464d50f6e80c9d5d638957f2a1a8be6166f07e2a_0","lines":"    cursor.execute(update_query, tuple(update_data))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":112,"col":17,"offset":4444},"end":{"line":112,"col":24,"offset":4451}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":112,"col":17,"offset":4444},"end":{"line":112,"col":24,"offset":4451}},"content":"book_id"},{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":134,"col":5,"offset":5225},"end":{"line":134,"col":16,"offset":5236}},"content":"update_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":135,"col":5,"offset":5257},"end":{"line":135,"col":53,"offset":5305}},"cursor.execute(update_query, tuple(update_data))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":135,"col":5,"offset":5257},"end":{"line":135,"col":53,"offset":5305},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":115,"col":21,"offset":4564},"end":{"line":115,"col":25,"offset":4568},"abstract_content":"json"},"$O":{"start":{"line":121,"col":14,"offset":4826},"end":{"line":121,"col":27,"offset":4839},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":133,"col":20,"offset":5177},"end":{"line":133,"col":63,"offset":5220},"abstract_content":"update_query.rstrip(\", \")+\" WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"cbd753465a8fe8d7a27993e076892a5e537385328dd45d7a1b6cec9018831176bee7566dfe51f0a259a9a576f848d11e75921b7b066dfa8aacaefcc9e748cb78_0","lines":"    cursor.execute(update_query, tuple(update_data))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":115,"col":13,"offset":4556},"end":{"line":115,"col":38,"offset":4581}},"request.json.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":115,"col":5,"offset":4548},"end":{"line":115,"col":10,"offset":4553}},"content":"title"},{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":126,"col":9,"offset":4960},"end":{"line":126,"col":20,"offset":4971}},"content":"update_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":135,"col":5,"offset":5257},"end":{"line":135,"col":53,"offset":5305}},"cursor.execute(update_query, tuple(update_data))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":141,"col":18,"offset":5467},"end":{"line":141,"col":44,"offset":5493},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":111,"col":2,"offset":4371},"end":{"line":111,"col":5,"offset":4374},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":184},"svalue_end":{"line":8,"col":22,"offset":199},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":111,"col":6,"offset":4375},"end":{"line":111,"col":11,"offset":4380},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":4432},"end":{"line":112,"col":16,"offset":4443},"abstract_content":"update_book"},"$PARAM":{"start":{"line":112,"col":17,"offset":4444},"end":{"line":112,"col":24,"offset":4451},"abstract_content":"book_id"},"$LOG":{"start":{"line":141,"col":13,"offset":5462},"end":{"line":141,"col":17,"offset":5466},"abstract_content":"info"},"$SINK":{"start":{"line":141,"col":18,"offset":5467},"end":{"line":141,"col":44,"offset":5493},"abstract_content":"f\"Book updated: {book_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4670a4d3162b4978793460ae206b46d3df3314f0a31f08d4f5b71cb97fbd297a2430640904808873bbfe99eacd1ca1afb7d9d22a3765449c9b2c6fe34660185c_0","lines":"    logging.info(f\"Book updated: {book_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":112,"col":17,"offset":4444},"end":{"line":112,"col":24,"offset":4451}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":112,"col":17,"offset":4444},"end":{"line":112,"col":24,"offset":4451}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":141,"col":18,"offset":5467},"end":{"line":141,"col":44,"offset":5493}},"f\"Book updated: {book_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":150,"col":5,"offset":5811},"end":{"line":150,"col":65,"offset":5871},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":144,"col":2,"offset":5563},"end":{"line":144,"col":5,"offset":5566},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":184},"svalue_end":{"line":8,"col":22,"offset":199},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":144,"col":6,"offset":5567},"end":{"line":144,"col":11,"offset":5572},"abstract_content":"route"},"$FUNC":{"start":{"line":145,"col":5,"offset":5627},"end":{"line":145,"col":16,"offset":5638},"abstract_content":"delete_book"},"$PARAM":{"start":{"line":145,"col":17,"offset":5639},"end":{"line":145,"col":24,"offset":5646},"abstract_content":"book_id"},"$O":{"start":{"line":149,"col":14,"offset":5793},"end":{"line":149,"col":27,"offset":5806},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":150,"col":20,"offset":5826},"end":{"line":150,"col":52,"offset":5858},"abstract_content":"\"DELETE FROM books WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5df8960178b3e47ef8e65ae59973f9f886a1e9d7923892c475a98daa413ec1a37363c2a70a566775dea7ee44c3b2ec7592a5c2bbd40a24d3b061c82b9b326262_0","lines":"    cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":145,"col":17,"offset":5639},"end":{"line":145,"col":24,"offset":5646}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":145,"col":17,"offset":5639},"end":{"line":145,"col":24,"offset":5646}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":150,"col":5,"offset":5811},"end":{"line":150,"col":65,"offset":5871}},"cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":156,"col":18,"offset":6033},"end":{"line":156,"col":44,"offset":6059},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":144,"col":2,"offset":5563},"end":{"line":144,"col":5,"offset":5566},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":184},"svalue_end":{"line":8,"col":22,"offset":199},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":144,"col":6,"offset":5567},"end":{"line":144,"col":11,"offset":5572},"abstract_content":"route"},"$FUNC":{"start":{"line":145,"col":5,"offset":5627},"end":{"line":145,"col":16,"offset":5638},"abstract_content":"delete_book"},"$PARAM":{"start":{"line":145,"col":17,"offset":5639},"end":{"line":145,"col":24,"offset":5646},"abstract_content":"book_id"},"$LOG":{"start":{"line":156,"col":13,"offset":6028},"end":{"line":156,"col":17,"offset":6032},"abstract_content":"info"},"$SINK":{"start":{"line":156,"col":18,"offset":6033},"end":{"line":156,"col":44,"offset":6059},"abstract_content":"f\"Book deleted: {book_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"392e798c4d38a7948c225705535e30a2d4d423f21f2236aa9fdc2949185300bd2409dab128abc513d0ada6c142326627e500e0b0e2c4a9cd9c6f832fbcf1f270_0","lines":"    logging.info(f\"Book deleted: {book_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":145,"col":17,"offset":5639},"end":{"line":145,"col":24,"offset":5646}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":145,"col":17,"offset":5639},"end":{"line":145,"col":24,"offset":5646}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":156,"col":18,"offset":6033},"end":{"line":156,"col":44,"offset":6059}},"f\"Book deleted: {book_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":166,"col":5,"offset":6334},"end":{"line":166,"col":24,"offset":6353},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9cd4280d964ed0cbd9079d260abb505534478676ae5698972aff8a4365df8b152e9db193f5b63c6d34439247cf4ac4b6aae9c4bbdb3d3ee0a3845ed47e3fedfc_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_160_original.py","start":{"line":166,"col":5,"offset":6334},"end":{"line":166,"col":24,"offset":6353},"extra":{"metavars":{"$APP":{"start":{"line":166,"col":5,"offset":6334},"end":{"line":166,"col":8,"offset":6337},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":184},"svalue_end":{"line":8,"col":22,"offset":199},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"1a9bce76869713ea60ed850dbd725285911bb0ca83dfe1180c88fe98ed91af7c442213bd58bc0037dcf5d1c5f9548a1fd993d0bda2dcea45b46a10fc0d87293e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":58,"col":22,"offset":1889},"end":{"line":58,"col":56,"offset":1923},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":48,"col":24,"offset":1454},"end":{"line":48,"col":28,"offset":1458},"abstract_content":"json"},"$LOG":{"start":{"line":58,"col":17,"offset":1884},"end":{"line":58,"col":21,"offset":1888},"abstract_content":"info"},"$SINK":{"start":{"line":58,"col":22,"offset":1889},"end":{"line":58,"col":56,"offset":1923},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"73d711883a0e540d295554e3288ec3d376f4116585acd7f63a652b6ec64134fc4d7fe508311722c605349ae4aa6e74b7e382a6b89214b6d36895b47774343987_0","lines":"        logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":48,"col":16,"offset":1446},"end":{"line":48,"col":44,"offset":1474}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":48,"col":5,"offset":1435},"end":{"line":48,"col":13,"offset":1443}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":58,"col":22,"offset":1889},"end":{"line":58,"col":56,"offset":1923}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":77,"col":22,"offset":2665},"end":{"line":77,"col":51,"offset":2694},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":67,"col":24,"offset":2209},"end":{"line":67,"col":28,"offset":2213},"abstract_content":"json"},"$LOG":{"start":{"line":77,"col":17,"offset":2660},"end":{"line":77,"col":21,"offset":2664},"abstract_content":"info"},"$SINK":{"start":{"line":77,"col":22,"offset":2665},"end":{"line":77,"col":51,"offset":2694},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d5c0bec3f866b693f48e0d3b989a834590d8ed1dc81dc56e37bf02e6a27619328adc7c8321738167f3982c9790d10f5a8823996853877f60f22a7153917dd4fc_0","lines":"        logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":67,"col":16,"offset":2201},"end":{"line":67,"col":44,"offset":2229}},"request.json.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":67,"col":5,"offset":2190},"end":{"line":67,"col":13,"offset":2198}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":77,"col":22,"offset":2665},"end":{"line":77,"col":51,"offset":2694}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":5,"offset":3063},"end":{"line":95,"col":26,"offset":3307},"extra":{"metavars":{"$FUNC":{"start":{"line":89,"col":5,"offset":3046},"end":{"line":89,"col":14,"offset":3055},"abstract_content":"get_books"},"$DATA":{"start":{"line":90,"col":5,"offset":3063},"end":{"line":90,"col":11,"offset":3069},"abstract_content":"author"},"$W":{"start":{"line":90,"col":22,"offset":3080},"end":{"line":90,"col":26,"offset":3084},"abstract_content":"args"},"$INTERM":{"start":{"line":94,"col":5,"offset":3197},"end":{"line":94,"col":10,"offset":3202},"abstract_content":"query"},"$STR":{"start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":68,"offset":3260},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CURSOR":{"start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":11,"offset":3292},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":93,"col":14,"offset":3179},"svalue_end":{"line":93,"col":27,"offset":3192},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"6c4c236f317aff00666031d6a07a06e8eb1604b7d8438e91b1bce4a5896ce5d38ee1393435509203f8ebcefbc9e8159d0bd919fb427d20430f976dade46c2058_0","lines":"    author = request.args.get('author')\n    year = request.args.get('year')\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":91,"col":5,"offset":3103},"end":{"line":95,"col":26,"offset":3307},"extra":{"metavars":{"$FUNC":{"start":{"line":89,"col":5,"offset":3046},"end":{"line":89,"col":14,"offset":3055},"abstract_content":"get_books"},"$DATA":{"start":{"line":91,"col":5,"offset":3103},"end":{"line":91,"col":9,"offset":3107},"abstract_content":"year"},"$W":{"start":{"line":91,"col":20,"offset":3118},"end":{"line":91,"col":24,"offset":3122},"abstract_content":"args"},"$INTERM":{"start":{"line":94,"col":5,"offset":3197},"end":{"line":94,"col":10,"offset":3202},"abstract_content":"query"},"$STR":{"start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":68,"offset":3260},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CURSOR":{"start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":11,"offset":3292},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":93,"col":14,"offset":3179},"svalue_end":{"line":93,"col":27,"offset":3192},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"cbf2b56f62d0ccd77b9d2e49d7feb0075e5d18e9a7e1a37b462ea3689f5c9277ce547cd719bf533b51e1ea3d8ef05092d326dc6ef4e8ce485f5d86393ce59f9f_0","lines":"    year = request.args.get('year')\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":89,"offset":3281},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":90,"col":22,"offset":3080},"end":{"line":90,"col":26,"offset":3084},"abstract_content":"args"},"$SQLSTR":{"start":{"line":94,"col":14,"offset":3206},"end":{"line":94,"col":67,"offset":3259},"abstract_content":"SELECT * FROM books WHERE author = '{}' AND year = {}"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"a6c3af42337894d0ac66043ffa1d180d4b2d2c1bf2b5f0fd1c1dc07c074530ed24591990a174fae8b18dd0d2ed82e019927fb538522a0c7e3e6b9b3de3c2696c_0","lines":"    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":14,"offset":3072},"end":{"line":90,"col":26,"offset":3084}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":5,"offset":3063},"end":{"line":90,"col":11,"offset":3069}},"content":"author"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":89,"offset":3281}},"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":89,"offset":3281},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":90,"col":22,"offset":3080},"end":{"line":90,"col":26,"offset":3084},"abstract_content":"args"},"$SQLSTR":{"start":{"line":94,"col":14,"offset":3206},"end":{"line":94,"col":67,"offset":3259},"abstract_content":"SELECT * FROM books WHERE author = '{}' AND year = {}"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"4d7ecaa2733172051bd30e835fd187b01fe97aac486b4381e0060e2aec034c6e43a952ecda81f4837c694afef01e94e95031c024fe89c1d94c553076ccca1e35_0","lines":"    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":14,"offset":3072},"end":{"line":90,"col":26,"offset":3084}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":5,"offset":3063},"end":{"line":90,"col":11,"offset":3069}},"content":"author"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":89,"offset":3281}},"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":26,"offset":3307},"extra":{"metavars":{"$DB":{"start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":11,"offset":3292},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":93,"col":14,"offset":3179},"svalue_end":{"line":93,"col":27,"offset":3192},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":95,"col":20,"offset":3301},"end":{"line":95,"col":25,"offset":3306},"abstract_content":"query","propagated_value":{"svalue_start":{"line":94,"col":13,"offset":3205},"svalue_end":{"line":94,"col":89,"offset":3281},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"fd6d43ddcd8e9408aa25a7dae42b3f929cb0b2b865d309618ec6702f650bb2176038a20f1d12a7c3d876a402614029cb40a0a9b5b966f7b2649113e30b115892_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":26,"offset":3307},"extra":{"metavars":{"$SQL":{"start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":68,"offset":3260},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CONNECTION":{"start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":11,"offset":3292},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":93,"col":14,"offset":3179},"svalue_end":{"line":93,"col":27,"offset":3192},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":95,"col":20,"offset":3301},"end":{"line":95,"col":25,"offset":3306},"abstract_content":"query","propagated_value":{"svalue_start":{"line":94,"col":13,"offset":3205},"svalue_end":{"line":94,"col":89,"offset":3281},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7d514875236ed8c9b4498eba05d33ea5994f2d7b02a0c9b831c78ada6098e09751692b88b8409bfa58d5949075f950ff116bc449de4908cb43437f28880e19f3_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":26,"offset":3307},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":90,"col":22,"offset":3080},"end":{"line":90,"col":26,"offset":3084},"abstract_content":"args"},"$O":{"start":{"line":93,"col":14,"offset":3179},"end":{"line":93,"col":27,"offset":3192},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":89,"offset":3281},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"8f8838ffa7885b6449264608f670c07d2a6430ecf0b61b865b9dc12e52ddcc04f4b1508b4cc00200b9da2259f5584d55315f1a9de2a55728b41e847badd4a735_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":14,"offset":3072},"end":{"line":90,"col":40,"offset":3098}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":5,"offset":3063},"end":{"line":90,"col":11,"offset":3069}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":5,"offset":3197},"end":{"line":94,"col":10,"offset":3202}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":26,"offset":3307}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":26,"offset":3307},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":90,"col":22,"offset":3080},"end":{"line":90,"col":26,"offset":3084},"abstract_content":"args"},"$O":{"start":{"line":93,"col":14,"offset":3179},"end":{"line":93,"col":27,"offset":3192},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":94,"col":13,"offset":3205},"end":{"line":94,"col":89,"offset":3281},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"73927be0cfe96b77c1ac0ac4286ec3582efd6e3ee9c05b6028c101ede0616f3a04afc34dcfe39ea688ac1c16377df2c378d69c71442560d7eff516f9f0938f47_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":14,"offset":3072},"end":{"line":90,"col":40,"offset":3098}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":5,"offset":3063},"end":{"line":90,"col":11,"offset":3069}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":5,"offset":3197},"end":{"line":94,"col":10,"offset":3202}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":5,"offset":3286},"end":{"line":95,"col":26,"offset":3307}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":20,"offset":3301},"end":{"line":95,"col":25,"offset":3306},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":90,"col":22,"offset":3080},"end":{"line":90,"col":26,"offset":3084},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":93,"col":14,"offset":3179},"end":{"line":93,"col":27,"offset":3192},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":95,"col":20,"offset":3301},"end":{"line":95,"col":25,"offset":3306},"abstract_content":"query","propagated_value":{"svalue_start":{"line":94,"col":13,"offset":3205},"svalue_end":{"line":94,"col":89,"offset":3281},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5958b31e4e247683194151d1e7f1924791ef6e6ceb57482cffd4b5ba2b990399c3a03be215b071035d08a3fdf81b53e9fcb2cb76ed37f83d700aaed0ae06e4d6_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":14,"offset":3072},"end":{"line":90,"col":40,"offset":3098}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":90,"col":5,"offset":3063},"end":{"line":90,"col":11,"offset":3069}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":94,"col":5,"offset":3197},"end":{"line":94,"col":10,"offset":3202}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":95,"col":20,"offset":3301},"end":{"line":95,"col":25,"offset":3306}},"query"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":108,"col":5,"offset":3689},"end":{"line":108,"col":54,"offset":3738},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":21,"offset":3504},"end":{"line":103,"col":25,"offset":3508},"abstract_content":"args"},"$O":{"start":{"line":106,"col":14,"offset":3604},"end":{"line":106,"col":27,"offset":3617},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":108,"col":20,"offset":3704},"end":{"line":108,"col":25,"offset":3709},"abstract_content":"query","propagated_value":{"svalue_start":{"line":107,"col":13,"offset":3630},"svalue_end":{"line":107,"col":67,"offset":3684},"svalue_abstract_content":"\"SELECT * FROM books WHERE title LIKE ? AND genre = ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"33e999b2b2d72b6ffddef33d5e4e5152aef87f4f3b3e2dc69759709e8bb16b46f2531cd969de81b83ec62d24c3f01097891f88c1bf1a6b0bd1fb6a1f759bdf7e_0","lines":"    cursor.execute(query, ('%' + title + '%', genre))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":103,"col":13,"offset":3496},"end":{"line":103,"col":38,"offset":3521}},"request.args.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":103,"col":5,"offset":3488},"end":{"line":103,"col":10,"offset":3493}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":108,"col":5,"offset":3689},"end":{"line":108,"col":54,"offset":3738}},"cursor.execute(query, ('%' + title + '%', genre))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":108,"col":5,"offset":3689},"end":{"line":108,"col":54,"offset":3738},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":103,"col":21,"offset":3504},"end":{"line":103,"col":25,"offset":3508},"abstract_content":"args"},"$O":{"start":{"line":106,"col":14,"offset":3604},"end":{"line":106,"col":27,"offset":3617},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":108,"col":20,"offset":3704},"end":{"line":108,"col":25,"offset":3709},"abstract_content":"query","propagated_value":{"svalue_start":{"line":107,"col":13,"offset":3630},"svalue_end":{"line":107,"col":67,"offset":3684},"svalue_abstract_content":"\"SELECT * FROM books WHERE title LIKE ? AND genre = ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"bfdaded5aafda0382f9749c01873902aef227da887dc3d369d41db24662796e88c899ecc55f68a97d2f0763dbb96fa2254bd0157cdbf6c22463305f2278b0df4_0","lines":"    cursor.execute(query, ('%' + title + '%', genre))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":103,"col":13,"offset":3496},"end":{"line":103,"col":38,"offset":3521}},"request.args.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":103,"col":5,"offset":3488},"end":{"line":103,"col":10,"offset":3493}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":108,"col":5,"offset":3689},"end":{"line":108,"col":54,"offset":3738}},"cursor.execute(query, ('%' + title + '%', genre))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":122,"col":5,"offset":4238},"end":{"line":122,"col":108,"offset":4341},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":116,"col":25,"offset":3932},"end":{"line":116,"col":29,"offset":3936},"abstract_content":"json"},"$O":{"start":{"line":120,"col":14,"offset":4139},"end":{"line":120,"col":27,"offset":4152},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":122,"col":20,"offset":4253},"end":{"line":122,"col":25,"offset":4258},"abstract_content":"query","propagated_value":{"svalue_start":{"line":121,"col":13,"offset":4165},"svalue_end":{"line":121,"col":81,"offset":4233},"svalue_abstract_content":"\"INSERT INTO books (title, author, year, genre) VALUES (?, ?, ?, ?)\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"98b36e2a1691d883ee3f1b4b0eed400c5cd2e634aed6ce91446863fd0f921abddb335e97faa0c1fe268c1c3537251d69cc32859671d9d3fd1fa300b106dc9c81_0","lines":"    cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":122,"col":28,"offset":4261},"end":{"line":122,"col":46,"offset":4279}},"book_data['title']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":122,"col":5,"offset":4238},"end":{"line":122,"col":108,"offset":4341}},"cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":122,"col":5,"offset":4238},"end":{"line":122,"col":108,"offset":4341},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":116,"col":25,"offset":3932},"end":{"line":116,"col":29,"offset":3936},"abstract_content":"json"},"$O":{"start":{"line":120,"col":14,"offset":4139},"end":{"line":120,"col":27,"offset":4152},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":122,"col":20,"offset":4253},"end":{"line":122,"col":25,"offset":4258},"abstract_content":"query","propagated_value":{"svalue_start":{"line":121,"col":13,"offset":4165},"svalue_end":{"line":121,"col":81,"offset":4233},"svalue_abstract_content":"\"INSERT INTO books (title, author, year, genre) VALUES (?, ?, ?, ?)\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5dbda11e7a5765ae7cdcc1969c1cf25fa12fbe6ed7bd0ebb8f319fef7f79bbe4ea11218c9448dc754b4471802aa6d8cd1c9f04822099edeae5279620f1e1ca0d_0","lines":"    cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":122,"col":28,"offset":4261},"end":{"line":122,"col":46,"offset":4279}},"book_data['title']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":122,"col":5,"offset":4238},"end":{"line":122,"col":108,"offset":4341}},"cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":126,"col":18,"offset":4425},"end":{"line":126,"col":57,"offset":4464},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":116,"col":25,"offset":3932},"end":{"line":116,"col":29,"offset":3936},"abstract_content":"json"},"$LOG":{"start":{"line":126,"col":13,"offset":4420},"end":{"line":126,"col":17,"offset":4424},"abstract_content":"info"},"$SINK":{"start":{"line":126,"col":18,"offset":4425},"end":{"line":126,"col":57,"offset":4464},"abstract_content":"f\"New book added: {book_data['title']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b24be9e6aba454be8863efb18d16ff6e890ce90259bb8759ae9252c2fc2399cca8e5f9377fe052df74f1f7545e47eb3914e4a8c167ef2fc769d7bcf9c5d80a2b_0","lines":"    logging.info(f\"New book added: {book_data['title']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":126,"col":37,"offset":4444},"end":{"line":126,"col":55,"offset":4462}},"book_data['title']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":126,"col":18,"offset":4425},"end":{"line":126,"col":57,"offset":4464}},"f\"New book added: {book_data['title']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":136,"col":5,"offset":4824},"end":{"line":136,"col":117,"offset":4936},"extra":{"metavars":{"$APP":{"start":{"line":129,"col":2,"offset":4547},"end":{"line":129,"col":5,"offset":4550},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":157},"svalue_end":{"line":9,"col":22,"offset":172},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":129,"col":6,"offset":4551},"end":{"line":129,"col":11,"offset":4556},"abstract_content":"route"},"$FUNC":{"start":{"line":131,"col":5,"offset":4624},"end":{"line":131,"col":16,"offset":4635},"abstract_content":"update_book"},"$PARAM":{"start":{"line":131,"col":17,"offset":4636},"end":{"line":131,"col":24,"offset":4643},"abstract_content":"book_id"},"$PROPERTY":{"start":{"line":132,"col":25,"offset":4670},"end":{"line":132,"col":29,"offset":4674},"abstract_content":"json"},"$O":{"start":{"line":134,"col":14,"offset":4719},"end":{"line":134,"col":27,"offset":4732},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":136,"col":20,"offset":4839},"end":{"line":136,"col":25,"offset":4844},"abstract_content":"query","propagated_value":{"svalue_start":{"line":135,"col":13,"offset":4745},"svalue_end":{"line":135,"col":87,"offset":4819},"svalue_abstract_content":"\"UPDATE books SET title = ?, author = ?, year = ?, genre = ? WHERE id = ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"101ab57602d572d51d5807cea76711f9897b1bd2c49b520adcca48324bdd44057f8af78b4fc30e9ef264058bfcaaeb9ad27c06bdde31cc0953bb040f302fb507_0","lines":"    cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre'], book_id))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":136,"col":28,"offset":4847},"end":{"line":136,"col":46,"offset":4865}},"book_data['title']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":136,"col":5,"offset":4824},"end":{"line":136,"col":117,"offset":4936}},"cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre'], book_id))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":136,"col":5,"offset":4824},"end":{"line":136,"col":117,"offset":4936},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"json"},"$PROPERTY":{"start":{"line":132,"col":25,"offset":4670},"end":{"line":132,"col":29,"offset":4674},"abstract_content":"json"},"$O":{"start":{"line":134,"col":14,"offset":4719},"end":{"line":134,"col":27,"offset":4732},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":136,"col":20,"offset":4839},"end":{"line":136,"col":25,"offset":4844},"abstract_content":"query","propagated_value":{"svalue_start":{"line":135,"col":13,"offset":4745},"svalue_end":{"line":135,"col":87,"offset":4819},"svalue_abstract_content":"\"UPDATE books SET title = ?, author = ?, year = ?, genre = ? WHERE id = ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5dbda11e7a5765ae7cdcc1969c1cf25fa12fbe6ed7bd0ebb8f319fef7f79bbe4ea11218c9448dc754b4471802aa6d8cd1c9f04822099edeae5279620f1e1ca0d_1","lines":"    cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre'], book_id))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":136,"col":28,"offset":4847},"end":{"line":136,"col":46,"offset":4865}},"book_data['title']"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":136,"col":5,"offset":4824},"end":{"line":136,"col":117,"offset":4936}},"cursor.execute(query, (book_data['title'], book_data['author'], book_data['year'], book_data['genre'], book_id))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":142,"col":18,"offset":5096},"end":{"line":142,"col":47,"offset":5125},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":129,"col":2,"offset":4547},"end":{"line":129,"col":5,"offset":4550},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":157},"svalue_end":{"line":9,"col":22,"offset":172},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":129,"col":6,"offset":4551},"end":{"line":129,"col":11,"offset":4556},"abstract_content":"route"},"$FUNC":{"start":{"line":131,"col":5,"offset":4624},"end":{"line":131,"col":16,"offset":4635},"abstract_content":"update_book"},"$PARAM":{"start":{"line":131,"col":17,"offset":4636},"end":{"line":131,"col":24,"offset":4643},"abstract_content":"book_id"},"$LOG":{"start":{"line":142,"col":13,"offset":5091},"end":{"line":142,"col":17,"offset":5095},"abstract_content":"info"},"$SINK":{"start":{"line":142,"col":18,"offset":5096},"end":{"line":142,"col":47,"offset":5125},"abstract_content":"f\"Book updated: ID {book_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e920a0bc902737a57a7196630f4e48ea96e201047b0d3ea28395676935e0e60a68879ebfccd61fc0eb3305c690bb51eb60c959d568b21226372cf14f0216a77e_0","lines":"    logging.info(f\"Book updated: ID {book_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":131,"col":17,"offset":4636},"end":{"line":131,"col":24,"offset":4643}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":131,"col":17,"offset":4636},"end":{"line":131,"col":24,"offset":4643}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":142,"col":18,"offset":5096},"end":{"line":142,"col":47,"offset":5125}},"f\"Book updated: ID {book_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":150,"col":5,"offset":5359},"end":{"line":150,"col":65,"offset":5419},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":145,"col":2,"offset":5195},"end":{"line":145,"col":5,"offset":5198},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":157},"svalue_end":{"line":9,"col":22,"offset":172},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":145,"col":6,"offset":5199},"end":{"line":145,"col":11,"offset":5204},"abstract_content":"route"},"$FUNC":{"start":{"line":147,"col":5,"offset":5275},"end":{"line":147,"col":16,"offset":5286},"abstract_content":"delete_book"},"$PARAM":{"start":{"line":147,"col":17,"offset":5287},"end":{"line":147,"col":24,"offset":5294},"abstract_content":"book_id"},"$O":{"start":{"line":149,"col":14,"offset":5341},"end":{"line":149,"col":27,"offset":5354},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":150,"col":20,"offset":5374},"end":{"line":150,"col":52,"offset":5406},"abstract_content":"\"DELETE FROM books WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f82aea0ead4fc3dd788445762e466336656cc007fa79856baaaa3723be6124b0a020ea354e24c54dd6cadd262b13d2c0fc29eac787d5f3754541273e15947aa6_0","lines":"    cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":147,"col":17,"offset":5287},"end":{"line":147,"col":24,"offset":5294}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":147,"col":17,"offset":5287},"end":{"line":147,"col":24,"offset":5294}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":150,"col":5,"offset":5359},"end":{"line":150,"col":65,"offset":5419}},"cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":156,"col":18,"offset":5579},"end":{"line":156,"col":47,"offset":5608},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":145,"col":2,"offset":5195},"end":{"line":145,"col":5,"offset":5198},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":157},"svalue_end":{"line":9,"col":22,"offset":172},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":145,"col":6,"offset":5199},"end":{"line":145,"col":11,"offset":5204},"abstract_content":"route"},"$FUNC":{"start":{"line":147,"col":5,"offset":5275},"end":{"line":147,"col":16,"offset":5286},"abstract_content":"delete_book"},"$PARAM":{"start":{"line":147,"col":17,"offset":5287},"end":{"line":147,"col":24,"offset":5294},"abstract_content":"book_id"},"$LOG":{"start":{"line":156,"col":13,"offset":5574},"end":{"line":156,"col":17,"offset":5578},"abstract_content":"info"},"$SINK":{"start":{"line":156,"col":18,"offset":5579},"end":{"line":156,"col":47,"offset":5608},"abstract_content":"f\"Book deleted: ID {book_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d554d600a4f5238548e448062fa7f339bb032549cf5d52ef0dbb498d00741d20d6271272e5818aaa7e64ecacf1c0df08309b954b9c83ef856e87a5675abe1d40_0","lines":"    logging.info(f\"Book deleted: ID {book_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":147,"col":17,"offset":5287},"end":{"line":147,"col":24,"offset":5294}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":147,"col":17,"offset":5287},"end":{"line":147,"col":24,"offset":5294}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":156,"col":18,"offset":5579},"end":{"line":156,"col":47,"offset":5608}},"f\"Book deleted: ID {book_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":166,"col":5,"offset":5888},"end":{"line":166,"col":24,"offset":5907},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b9f8e74218e33e35af3efa8244bbca1131f002b80395a6f0938cd1acccbd90f4260ffa533bbdca2d8d67badd4e9b21fca361834d603e2ad8a45eccff73df5b4c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_161_original.py","start":{"line":166,"col":5,"offset":5888},"end":{"line":166,"col":24,"offset":5907},"extra":{"metavars":{"$APP":{"start":{"line":166,"col":5,"offset":5888},"end":{"line":166,"col":8,"offset":5891},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":157},"svalue_end":{"line":9,"col":22,"offset":172},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"0f0d1f456b47261416970e0403a0ef73dcdf6aa92efdb124a64a1117d120835d311bd00bd6c03c8c3e12b219f6883b89e3292d8da205039a5e37da529660b5d2_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":24,"col":18,"offset":699},"end":{"line":24,"col":59,"offset":740},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$LOG":{"start":{"line":24,"col":13,"offset":694},"end":{"line":24,"col":17,"offset":698},"abstract_content":"info"},"$SINK":{"start":{"line":24,"col":18,"offset":699},"end":{"line":24,"col":59,"offset":740},"abstract_content":"f\"{datetime.now()} - {action}: {details}\""},"$PROPERTY":{"start":{"line":41,"col":28,"offset":1291},"end":{"line":41,"col":32,"offset":1295},"abstract_content":"form"}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"b5f3143201a2902e063debc7cb9188984b3e6cde38237078a0e8d4a4051349aff707d4c34988859f63de57cd7ad49c455dfe1fe3c365c2feb5c01587334dea7f_0","lines":"    logging.info(f\"{datetime.now()} - {action}: {details}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":41,"col":20,"offset":1283},"end":{"line":41,"col":48,"offset":1311}},"request.form.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":41,"col":9,"offset":1272},"end":{"line":41,"col":17,"offset":1280}},"content":"username"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":51,"col":13,"offset":1855},"end":{"line":51,"col":23,"offset":1865}},"log_action"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":23,"col":24,"offset":672},"end":{"line":23,"col":31,"offset":679}},"content":"details"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":24,"col":18,"offset":699},"end":{"line":24,"col":59,"offset":740}},"f\"{datetime.now()} - {action}: {details}\""]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":50,"col":17,"offset":1753},"end":{"line":50,"col":106,"offset":1842},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":41,"col":28,"offset":1291},"end":{"line":41,"col":32,"offset":1295},"abstract_content":"form"},"$ENGINE":{"start":{"line":48,"col":18,"offset":1591},"end":{"line":48,"col":24,"offset":1597},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":208},"svalue_end":{"line":8,"col":45,"offset":243},"svalue_abstract_content":"create_engine('sqlite:///users.db')"}},"$SQLALCHEMY_CONN":{"start":{"line":48,"col":18,"offset":1591},"end":{"line":48,"col":34,"offset":1607},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":49,"col":25,"offset":1641},"end":{"line":49,"col":120,"offset":1736},"abstract_content":"text(\"INSERT INTO users (username, email, created_at) VALUES (:username, :email, :created_at)\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"77873d258f71f92ff49f95435d2e3ae80a564e2b03fbccf3b6e1744010b3b0e4b3b5d40b304aeaaed064706542d7049ec568fd7ab63426e4a21e7766d5c177b7_0","lines":"                conn.execute(query, {\"username\": username, \"email\": email, \"created_at\": datetime.now()})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":41,"col":20,"offset":1283},"end":{"line":41,"col":48,"offset":1311}},"request.form.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":41,"col":9,"offset":1272},"end":{"line":41,"col":17,"offset":1280}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":50,"col":17,"offset":1753},"end":{"line":50,"col":106,"offset":1842}},"conn.execute(query, {\"username\": username, \"email\": email, \"created_at\": datetime.now()})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":66,"col":22,"offset":2514},"end":{"line":66,"col":63,"offset":2555},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":61,"col":2,"offset":2315},"end":{"line":61,"col":5,"offset":2318},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":183},"svalue_end":{"line":7,"col":22,"offset":198},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":61,"col":6,"offset":2319},"end":{"line":61,"col":11,"offset":2324},"abstract_content":"route"},"$FUNC":{"start":{"line":62,"col":5,"offset":2357},"end":{"line":62,"col":14,"offset":2366},"abstract_content":"view_user"},"$PARAM":{"start":{"line":62,"col":15,"offset":2367},"end":{"line":62,"col":22,"offset":2374},"abstract_content":"user_id"},"$ENGINE":{"start":{"line":64,"col":14,"offset":2399},"end":{"line":64,"col":20,"offset":2405},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":208},"svalue_end":{"line":8,"col":45,"offset":243},"svalue_abstract_content":"create_engine('sqlite:///users.db')"}},"$SQLALCHEMY_CONN":{"start":{"line":64,"col":14,"offset":2399},"end":{"line":64,"col":30,"offset":2415},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":65,"col":21,"offset":2445},"end":{"line":65,"col":68,"offset":2492},"abstract_content":"text(\"SELECT * FROM users WHERE id = :user_id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"893ee6e7b5adbb7b004bc35156a82ea416bc99eccb424d1782fa85f543167fc36d42057aa74d83f7fac9cc9e8e9969c32187dd9844401bf3ed98139880e0f2af_0","lines":"            result = conn.execute(query, {\"user_id\": user_id})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":62,"col":15,"offset":2367},"end":{"line":62,"col":22,"offset":2374}},"user_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":62,"col":15,"offset":2367},"end":{"line":62,"col":22,"offset":2374}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":66,"col":22,"offset":2514},"end":{"line":66,"col":63,"offset":2555}},"conn.execute(query, {\"user_id\": user_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":89,"col":17,"offset":3592},"end":{"line":89,"col":96,"offset":3671},"extra":{"metavars":{"$APP":{"start":{"line":77,"col":2,"offset":2993},"end":{"line":77,"col":5,"offset":2996},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":183},"svalue_end":{"line":7,"col":22,"offset":198},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":77,"col":6,"offset":2997},"end":{"line":77,"col":11,"offset":3002},"abstract_content":"route"},"$FUNC":{"start":{"line":78,"col":5,"offset":3062},"end":{"line":78,"col":16,"offset":3073},"abstract_content":"update_user"},"$PARAM":{"start":{"line":78,"col":17,"offset":3074},"end":{"line":78,"col":24,"offset":3081},"abstract_content":"user_id"},"$PROPERTY":{"start":{"line":80,"col":28,"offset":3144},"end":{"line":80,"col":32,"offset":3148},"abstract_content":"form"},"$ENGINE":{"start":{"line":87,"col":18,"offset":3444},"end":{"line":87,"col":24,"offset":3450},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":208},"svalue_end":{"line":8,"col":45,"offset":243},"svalue_abstract_content":"create_engine('sqlite:///users.db')"}},"$SQLALCHEMY_CONN":{"start":{"line":87,"col":18,"offset":3444},"end":{"line":87,"col":34,"offset":3460},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":88,"col":25,"offset":3494},"end":{"line":88,"col":106,"offset":3575},"abstract_content":"text(\"UPDATE users SET username = :username, email = :email WHERE id = :user_id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"2424992e0d6b34e74ed884aa5d40a7a28530c9d1d3685750a0ff1e79d6922928d37e68da9edcd104bf637ba73353286850f94fe8900017ea880e7241d7cb3a2d_0","lines":"                conn.execute(query, {\"username\": username, \"email\": email, \"user_id\": user_id})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":80,"col":20,"offset":3136},"end":{"line":80,"col":48,"offset":3164}},"request.form.get('username')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":80,"col":9,"offset":3125},"end":{"line":80,"col":17,"offset":3133}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":89,"col":17,"offset":3592},"end":{"line":89,"col":96,"offset":3671}},"conn.execute(query, {\"username\": username, \"email\": email, \"user_id\": user_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":101,"col":22,"offset":4246},"end":{"line":101,"col":63,"offset":4287},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":77,"col":2,"offset":2993},"end":{"line":77,"col":5,"offset":2996},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":183},"svalue_end":{"line":7,"col":22,"offset":198},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":77,"col":6,"offset":2997},"end":{"line":77,"col":11,"offset":3002},"abstract_content":"route"},"$FUNC":{"start":{"line":78,"col":5,"offset":3062},"end":{"line":78,"col":16,"offset":3073},"abstract_content":"update_user"},"$PARAM":{"start":{"line":78,"col":17,"offset":3074},"end":{"line":78,"col":24,"offset":3081},"abstract_content":"user_id"},"$ENGINE":{"start":{"line":99,"col":14,"offset":4131},"end":{"line":99,"col":20,"offset":4137},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":208},"svalue_end":{"line":8,"col":45,"offset":243},"svalue_abstract_content":"create_engine('sqlite:///users.db')"}},"$SQLALCHEMY_CONN":{"start":{"line":99,"col":14,"offset":4131},"end":{"line":99,"col":30,"offset":4147},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":100,"col":21,"offset":4177},"end":{"line":100,"col":68,"offset":4224},"abstract_content":"text(\"SELECT * FROM users WHERE id = :user_id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b977eff19fe9473a670f453531a7981a120b7f93a72e6ce8bf88d5da0fc6cd8eca27450a43d070611af092f0250ee905c55f17e6f60ba7c123b668ae1ce2fa65_0","lines":"            result = conn.execute(query, {\"user_id\": user_id})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":78,"col":17,"offset":3074},"end":{"line":78,"col":24,"offset":3081}},"user_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":78,"col":17,"offset":3074},"end":{"line":78,"col":24,"offset":3081}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":101,"col":22,"offset":4246},"end":{"line":101,"col":63,"offset":4287}},"conn.execute(query, {\"user_id\": user_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":21,"offset":4917},"end":{"line":118,"col":68,"offset":4964},"extra":{"metavars":{},"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O","semgrep.dev":{"rule":{"origin":"community","r_id":15824,"rule_id":"r6U2wE","rule_name":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","rv_id":946451,"url":"https://semgrep.dev/playground/r/LjTXyKX/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","version_id":"LjTXyKX"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"19b43f2efa52ed362e68bb6bd9d928dfd519a398c7b49d0fbb003e9f31a6af1b388e8eb1a120c293a4c56e5347b61b356a4c53a47e5d17b5666655d869269c94_0","lines":"            query = text(f\"DELETE FROM users WHERE id = {user_id}\")  # Vulnerable to SQL injection","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963}},"f\"DELETE FROM users WHERE id = {user_id}\""]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":21,"offset":4917},"end":{"line":118,"col":68,"offset":4964}},"text(f\"DELETE FROM users WHERE id = {user_id}\")"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"DELETE"},"$ANYTHING":{"start":{"line":113,"col":23,"offset":4754},"end":{"line":113,"col":27,"offset":4758},"abstract_content":"form"},"$SQLSTR":{"start":{"line":118,"col":28,"offset":4924},"end":{"line":118,"col":57,"offset":4953},"abstract_content":"DELETE FROM users WHERE id = "}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9de9bd87a17c6fbe89446b98c4aab1fbabbac068dc737823fdd4ad49fadf3b3596b81aa2fffdeb33bb2b84a590372c62cb157fe5369ee0bdf1b44f68483e8933_0","lines":"            query = text(f\"DELETE FROM users WHERE id = {user_id}\")  # Vulnerable to SQL injection","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":15,"offset":4746},"end":{"line":113,"col":27,"offset":4758}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":5,"offset":4736},"end":{"line":113,"col":12,"offset":4743}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963}},"f\"DELETE FROM users WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-flask.sqlalchemy-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":113,"col":23,"offset":4754},"end":{"line":113,"col":27,"offset":4758},"abstract_content":"form"},"$SINK":{"start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963},"abstract_content":"f\"DELETE FROM users WHERE id = {user_id}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. Use the SQLAlchemy ORM provided functions to build SQL queries instead to avoid SQL injection.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/20/core/sqlelement.html#sqlalchemy.sql.expression.text","https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-flask.sqlalchemy-flask","shortlink":"https://sg.run/Kx1Xj","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116511,"rule_id":"6JUvR1p","rule_name":"python.flask.db.sqlalchemy-flask.sqlalchemy-flask","rv_id":1018719,"url":"https://semgrep.dev/playground/r/ZRT3EGb/python.flask.db.sqlalchemy-flask.sqlalchemy-flask","version_id":"ZRT3EGb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-flask.sqlalchemy-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"4fc4a9e82965d90d2f387f5d44d92b46600d4bc90403363a57c397a8fbbe5508447c347b70e92d668594303a37607232b15c3200e0180b09d18cf5cb11c8723a_0","lines":"            query = text(f\"DELETE FROM users WHERE id = {user_id}\")  # Vulnerable to SQL injection","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":15,"offset":4746},"end":{"line":113,"col":42,"offset":4773}},"request.form.get('user_id')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":5,"offset":4736},"end":{"line":113,"col":12,"offset":4743}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963}},"f\"DELETE FROM users WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"DELETE"},"$ANYTHING":{"start":{"line":113,"col":23,"offset":4754},"end":{"line":113,"col":27,"offset":4758},"abstract_content":"form"},"$SQLSTR":{"start":{"line":118,"col":28,"offset":4924},"end":{"line":118,"col":57,"offset":4953},"abstract_content":"DELETE FROM users WHERE id = "}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"e7baf393a048b06be89c37595a1d01a9763f94d44f73555bade961aba4d8c79a4de4bae448d7a0e74c1bd58c3d10e5f6cec86c54cefc002cddf246c64a3689d5_0","lines":"            query = text(f\"DELETE FROM users WHERE id = {user_id}\")  # Vulnerable to SQL injection","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":15,"offset":4746},"end":{"line":113,"col":27,"offset":4758}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":5,"offset":4736},"end":{"line":113,"col":12,"offset":4743}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":26,"offset":4922},"end":{"line":118,"col":67,"offset":4963}},"f\"DELETE FROM users WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":119,"col":13,"offset":5008},"end":{"line":119,"col":32,"offset":5027},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":113,"col":23,"offset":4754},"end":{"line":113,"col":27,"offset":4758},"abstract_content":"form"},"$ENGINE":{"start":{"line":117,"col":14,"offset":4871},"end":{"line":117,"col":20,"offset":4877},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":8,"col":10,"offset":208},"svalue_end":{"line":8,"col":45,"offset":243},"svalue_abstract_content":"create_engine('sqlite:///users.db')"}},"$SQLALCHEMY_CONN":{"start":{"line":117,"col":14,"offset":4871},"end":{"line":117,"col":30,"offset":4887},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":118,"col":21,"offset":4917},"end":{"line":118,"col":68,"offset":4964},"abstract_content":"text(f\"DELETE FROM users WHERE id = {user_id}\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"dee0d24daa92f4761dab05f1a3bfa5845a2abf760b69da3b711b0e4da5f877675074af73cc92c5e71c89831347eb1c88bc6fb84718da65cb47c74918c8a5524f_0","lines":"            conn.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":15,"offset":4746},"end":{"line":113,"col":42,"offset":4773}},"request.form.get('user_id')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":5,"offset":4736},"end":{"line":113,"col":12,"offset":4743}},"content":"user_id"},{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":13,"offset":4909},"end":{"line":118,"col":18,"offset":4914}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":119,"col":13,"offset":5008},"end":{"line":119,"col":32,"offset":5027}},"conn.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":119,"col":26,"offset":5021},"end":{"line":119,"col":31,"offset":5026},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":113,"col":23,"offset":4754},"end":{"line":113,"col":27,"offset":4758},"abstract_content":"form"},"$AIOMYSQL_CURSOR":{"start":{"line":117,"col":14,"offset":4871},"end":{"line":117,"col":30,"offset":4887},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":119,"col":26,"offset":5021},"end":{"line":119,"col":31,"offset":5026},"abstract_content":"query","propagated_value":{"svalue_start":{"line":118,"col":21,"offset":4917},"svalue_end":{"line":118,"col":68,"offset":4964},"svalue_abstract_content":"text(f\"DELETE FROM users WHERE id = {user_id}\")"}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b8a016e2b5263170202fc786341e2edb94faf8a3bf5db80f5876926ec00a32fb90de889a9d97c03f033cb82592c7b86a77794ba98eccb4a5d0467048fcba3c25_0","lines":"            conn.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":15,"offset":4746},"end":{"line":113,"col":42,"offset":4773}},"request.form.get('user_id')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":113,"col":5,"offset":4736},"end":{"line":113,"col":12,"offset":4743}},"content":"user_id"},{"location":{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":118,"col":13,"offset":4909},"end":{"line":118,"col":18,"offset":4914}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":119,"col":26,"offset":5021},"end":{"line":119,"col":31,"offset":5026}},"query"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":172,"col":5,"offset":6927},"end":{"line":172,"col":24,"offset":6946},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"14c0b237edfb04439aa4131358ee5fe913e25939bb4015b7c45d04bace075e724f2420effe29ef01a033320d5bacc1215600b74d1125a28f03ff1b46549c5e10_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_163_original.py","start":{"line":172,"col":5,"offset":6927},"end":{"line":172,"col":24,"offset":6946},"extra":{"metavars":{"$APP":{"start":{"line":172,"col":5,"offset":6927},"end":{"line":172,"col":8,"offset":6930},"abstract_content":"app","propagated_value":{"svalue_start":{"line":7,"col":7,"offset":183},"svalue_end":{"line":7,"col":22,"offset":198},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"1c12c91f5f9b5da57452ea41d951f517314c9eb841648444a065d1f8a9b5c71f0cd85e9eb557223c2c2f75c33b4fbdce299b4e9c1bba0de7399ca48c9ac3e65d_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":34,"col":13,"offset":1046},"end":{"line":34,"col":42,"offset":1075},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$O":{"start":{"line":31,"col":14,"offset":986},"end":{"line":31,"col":33,"offset":1005},"abstract_content":"connection.cursor()"},"$SINK":{"start":{"line":34,"col":28,"offset":1061},"end":{"line":34,"col":33,"offset":1066},"abstract_content":"query"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1456},"end":{"line":48,"col":15,"offset":1466},"abstract_content":"query_data"},"$EVENT":{"start":{"line":48,"col":16,"offset":1467},"end":{"line":48,"col":21,"offset":1472},"abstract_content":"event"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via serverless","functional-categories":["db::sink::sql-or-nosql-query::prestodb","serverless::source::function-params::aws-lambda"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aws","aws-lambda","cloud","prestodb","python","serverless"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","shortlink":"https://sg.run/X5D5A","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151064,"rule_id":"bwUbeb1","rule_name":"python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","rv_id":1015030,"url":"https://semgrep.dev/playground/r/LjTX1QK/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","version_id":"LjTX1QK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"1f7f0ffe04505410fe37a97caf4f19147646b03c62c2d3f69f4a0b1ac8f460437b53c74271aa556f063cd5cdc6f9b60d058bb0bcf0834510ef3692a283cd5ce3_0","lines":"            cursor.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":48,"col":16,"offset":1467},"end":{"line":48,"col":21,"offset":1472}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":48,"col":16,"offset":1467},"end":{"line":48,"col":21,"offset":1472}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":15,"offset":1498}},"content":"user_input"},{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":54,"col":9,"offset":1621},"end":{"line":54,"col":14,"offset":1626}},"content":"query"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":55,"col":18,"offset":1701},"end":{"line":55,"col":31,"offset":1714}},"execute_query"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":29,"col":19,"offset":915},"end":{"line":29,"col":24,"offset":920}},"content":"query"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":34,"col":13,"offset":1046},"end":{"line":34,"col":42,"offset":1075}},"cursor.execute(query, params)"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.security.mysql-sqli.mysql-sqli","path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":34,"col":28,"offset":1061},"end":{"line":34,"col":33,"offset":1066},"extra":{"metavars":{"$CURSOR":{"start":{"line":34,"col":13,"offset":1046},"end":{"line":34,"col":19,"offset":1052},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":31,"col":14,"offset":986},"svalue_end":{"line":31,"col":33,"offset":1005},"svalue_abstract_content":"connection.cursor()"}},"$QUERY":{"start":{"line":34,"col":28,"offset":1061},"end":{"line":34,"col":33,"offset":1066},"abstract_content":"query"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1456},"end":{"line":48,"col":15,"offset":1466},"abstract_content":"query_data"}},"message":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`","metadata":{"references":["https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html","https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"],"category":"security","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"technology":["aws-lambda","mysql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.mysql-sqli.mysql-sqli","shortlink":"https://sg.run/1RjG","semgrep.dev":{"rule":{"origin":"community","r_id":18266,"rule_id":"3qU3eE","rule_name":"python.aws-lambda.security.mysql-sqli.mysql-sqli","rv_id":946089,"url":"https://semgrep.dev/playground/r/yeT0nlR/python.aws-lambda.security.mysql-sqli.mysql-sqli","version_id":"yeT0nlR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.mysql-sqli.mysql-sqli","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b938b680ca0bcfd66908b4f164bb886b369c149ebfdd7e04d2e59539bcbb5beb70eb9b97176b7e1cfc0692a871e42f855942d638eeb8f45e9310dc886b4b78ae_0","lines":"            cursor.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":18,"offset":1501},"end":{"line":49,"col":23,"offset":1506}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":15,"offset":1498}},"content":"user_input"},{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":54,"col":9,"offset":1621},"end":{"line":54,"col":14,"offset":1626}},"content":"query"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":55,"col":18,"offset":1701},"end":{"line":55,"col":31,"offset":1714}},"execute_query"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":29,"col":19,"offset":915},"end":{"line":29,"col":24,"offset":920}},"content":"query"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":34,"col":28,"offset":1061},"end":{"line":34,"col":33,"offset":1066}},"query"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":36,"col":13,"offset":1102},"end":{"line":36,"col":34,"offset":1123},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"event"},"$O":{"start":{"line":31,"col":14,"offset":986},"end":{"line":31,"col":33,"offset":1005},"abstract_content":"connection.cursor()"},"$SINK":{"start":{"line":36,"col":28,"offset":1117},"end":{"line":36,"col":33,"offset":1122},"abstract_content":"query"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1456},"end":{"line":48,"col":15,"offset":1466},"abstract_content":"query_data"},"$EVENT":{"start":{"line":48,"col":16,"offset":1467},"end":{"line":48,"col":21,"offset":1472},"abstract_content":"event"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via serverless","functional-categories":["db::sink::sql-or-nosql-query::prestodb","serverless::source::function-params::aws-lambda"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aws","aws-lambda","cloud","prestodb","python","serverless"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","shortlink":"https://sg.run/X5D5A","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151064,"rule_id":"bwUbeb1","rule_name":"python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","rv_id":1015030,"url":"https://semgrep.dev/playground/r/LjTX1QK/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","version_id":"LjTX1QK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"1f7f0ffe04505410fe37a97caf4f19147646b03c62c2d3f69f4a0b1ac8f460437b53c74271aa556f063cd5cdc6f9b60d058bb0bcf0834510ef3692a283cd5ce3_1","lines":"            cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":48,"col":16,"offset":1467},"end":{"line":48,"col":21,"offset":1472}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":48,"col":16,"offset":1467},"end":{"line":48,"col":21,"offset":1472}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":15,"offset":1498}},"content":"user_input"},{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":54,"col":9,"offset":1621},"end":{"line":54,"col":14,"offset":1626}},"content":"query"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":55,"col":18,"offset":1701},"end":{"line":55,"col":31,"offset":1714}},"execute_query"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":29,"col":19,"offset":915},"end":{"line":29,"col":24,"offset":920}},"content":"query"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":36,"col":13,"offset":1102},"end":{"line":36,"col":34,"offset":1123}},"cursor.execute(query)"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.security.mysql-sqli.mysql-sqli","path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":36,"col":28,"offset":1117},"end":{"line":36,"col":33,"offset":1122},"extra":{"metavars":{"$CURSOR":{"start":{"line":36,"col":13,"offset":1102},"end":{"line":36,"col":19,"offset":1108},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":31,"col":14,"offset":986},"svalue_end":{"line":31,"col":33,"offset":1005},"svalue_abstract_content":"connection.cursor()"}},"$QUERY":{"start":{"line":36,"col":28,"offset":1117},"end":{"line":36,"col":33,"offset":1122},"abstract_content":"query"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1456},"end":{"line":48,"col":15,"offset":1466},"abstract_content":"query_data"}},"message":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`","metadata":{"references":["https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html","https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html"],"category":"security","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"technology":["aws-lambda","mysql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.mysql-sqli.mysql-sqli","shortlink":"https://sg.run/1RjG","semgrep.dev":{"rule":{"origin":"community","r_id":18266,"rule_id":"3qU3eE","rule_name":"python.aws-lambda.security.mysql-sqli.mysql-sqli","rv_id":946089,"url":"https://semgrep.dev/playground/r/yeT0nlR/python.aws-lambda.security.mysql-sqli.mysql-sqli","version_id":"yeT0nlR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.mysql-sqli.mysql-sqli","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b938b680ca0bcfd66908b4f164bb886b369c149ebfdd7e04d2e59539bcbb5beb70eb9b97176b7e1cfc0692a871e42f855942d638eeb8f45e9310dc886b4b78ae_1","lines":"            cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":18,"offset":1501},"end":{"line":49,"col":23,"offset":1506}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":15,"offset":1498}},"content":"user_input"},{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":54,"col":9,"offset":1621},"end":{"line":54,"col":14,"offset":1626}},"content":"query"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":55,"col":18,"offset":1701},"end":{"line":55,"col":31,"offset":1714}},"execute_query"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":29,"col":19,"offset":915},"end":{"line":29,"col":24,"offset":920}},"content":"query"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":36,"col":28,"offset":1117},"end":{"line":36,"col":33,"offset":1122}},"query"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.security.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":54,"col":17,"offset":1629},"end":{"line":54,"col":71,"offset":1683},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1456},"end":{"line":48,"col":15,"offset":1466},"abstract_content":"query_data"},"$SQLSTR":{"start":{"line":54,"col":19,"offset":1631},"end":{"line":54,"col":57,"offset":1669},"abstract_content":"SELECT * FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.","metadata":{"references":["https://owasp.org/www-community/attacks/SQL_Injection"],"category":"security","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"technology":["aws-lambda"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/wXvA","semgrep.dev":{"rule":{"origin":"community","r_id":18273,"rule_id":"AbU3LX","rule_name":"python.aws-lambda.security.tainted-sql-string.tainted-sql-string","rv_id":946098,"url":"https://semgrep.dev/playground/r/vdTGnev/python.aws-lambda.security.tainted-sql-string.tainted-sql-string","version_id":"vdTGnev"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"f6b315e1988215056f42116488cb3da90b599fc95eb5b14e4bbba6c9c191dc50d3b55a9c619af4413ee8ee9410a8b720e13ae0b16340b55a01912e147156b4f7_0","lines":"        query = f\"SELECT * FROM users WHERE username = '{user_input}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":18,"offset":1501},"end":{"line":49,"col":23,"offset":1506}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":49,"col":5,"offset":1488},"end":{"line":49,"col":15,"offset":1498}},"content":"user_input"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_177_original.py","start":{"line":54,"col":17,"offset":1629},"end":{"line":54,"col":71,"offset":1683}},"f\"SELECT * FROM users WHERE username = '{user_input}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":41,"col":17,"offset":1412},"end":{"line":41,"col":43,"offset":1438},"extra":{"metavars":{"$O":{"start":{"line":40,"col":18,"offset":1374},"end":{"line":40,"col":31,"offset":1387},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":41,"col":29,"offset":1424},"end":{"line":41,"col":34,"offset":1429},"abstract_content":"query"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1647},"end":{"line":48,"col":19,"offset":1661},"abstract_content":"lambda_handler"},"$EVENT":{"start":{"line":48,"col":20,"offset":1662},"end":{"line":48,"col":25,"offset":1667},"abstract_content":"event"},"$CONTEXT":{"start":{"line":48,"col":27,"offset":1669},"end":{"line":48,"col":34,"offset":1676},"abstract_content":"context"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via serverless","functional-categories":["db::sink::sql-or-nosql-query::prestodb","serverless::source::function-params::aws-lambda"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aws","aws-lambda","cloud","prestodb","python","serverless"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","shortlink":"https://sg.run/X5D5A","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151064,"rule_id":"bwUbeb1","rule_name":"python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","rv_id":1015030,"url":"https://semgrep.dev/playground/r/LjTX1QK/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","version_id":"LjTX1QK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.serverless.sql.prestodb.serverless-prestodb-sqli.serverless-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5af83bb65f03b4bb622aa1da2236adf0efadf56b3084dacb12fb68365b6acfc254788e0681a11e700e0a90188d5c76559a1cf880d0c495e2bf5fb4b7ef8d92c5_0","lines":"                cur.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":48,"col":20,"offset":1662},"end":{"line":48,"col":25,"offset":1667}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":48,"col":20,"offset":1662},"end":{"line":48,"col":25,"offset":1667}},"content":"event"},{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":51,"col":9,"offset":1753},"end":{"line":51,"col":17,"offset":1761}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":55,"col":9,"offset":1874},"end":{"line":55,"col":14,"offset":1879}},"content":"query"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":56,"col":18,"offset":1952},"end":{"line":56,"col":31,"offset":1965}},"execute_query"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":37,"col":19,"offset":1285},"end":{"line":37,"col":24,"offset":1290}},"content":"query"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":41,"col":17,"offset":1412},"end":{"line":41,"col":43,"offset":1438}},"cur.execute(query, params)"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.aws-lambda.security.psycopg-sqli.psycopg-sqli","path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":41,"col":29,"offset":1424},"end":{"line":41,"col":34,"offset":1429},"extra":{"metavars":{"$CURSOR":{"start":{"line":41,"col":17,"offset":1412},"end":{"line":41,"col":20,"offset":1415},"abstract_content":"cur","propagated_value":{"svalue_start":{"line":40,"col":18,"offset":1374},"svalue_end":{"line":40,"col":31,"offset":1387},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":41,"col":29,"offset":1424},"end":{"line":41,"col":34,"offset":1429},"abstract_content":"query"},"$HANDLER":{"start":{"line":48,"col":5,"offset":1647},"end":{"line":48,"col":19,"offset":1661},"abstract_content":"lambda_handler"}},"message":"Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`","metadata":{"references":["https://www.psycopg.org/docs/cursor.html#cursor.execute","https://www.psycopg.org/docs/cursor.html#cursor.executemany","https://www.psycopg.org/docs/cursor.html#cursor.mogrify"],"category":"security","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"technology":["aws-lambda","psycopg","psycopg2"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.aws-lambda.security.psycopg-sqli.psycopg-sqli","shortlink":"https://sg.run/9L8r","semgrep.dev":{"rule":{"origin":"community","r_id":18267,"rule_id":"4bUQG1","rule_name":"python.aws-lambda.security.psycopg-sqli.psycopg-sqli","rv_id":946090,"url":"https://semgrep.dev/playground/r/rxT6rd0/python.aws-lambda.security.psycopg-sqli.psycopg-sqli","version_id":"rxT6rd0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.psycopg-sqli.psycopg-sqli","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"42da21a3834fc45acb79acc1d4923260632a0717b7e5f9e0facb193df7ed824ade96c3b7a5c78b574f3aff90ebc1e54787534ccfdcb55d9518bedd3cd63d0fb5_0","lines":"                cur.execute(query, params)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":51,"col":20,"offset":1764},"end":{"line":51,"col":25,"offset":1769}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":51,"col":9,"offset":1753},"end":{"line":51,"col":17,"offset":1761}},"content":"username"},{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":55,"col":9,"offset":1874},"end":{"line":55,"col":14,"offset":1879}},"content":"query"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":56,"col":18,"offset":1952},"end":{"line":56,"col":31,"offset":1965}},"execute_query"],[{"location":{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":37,"col":19,"offset":1285},"end":{"line":37,"col":24,"offset":1290}},"content":"query"}],["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_179_original.py","start":{"line":41,"col":29,"offset":1424},"end":{"line":41,"col":34,"offset":1429}},"query"]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.django.security.audit.query-set-extra.avoid-query-set-extra","path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":88,"col":23,"offset":3102},"end":{"line":88,"col":58,"offset":3137},"extra":{"metavars":{"$MODEL":{"start":{"line":88,"col":23,"offset":3102},"end":{"line":88,"col":37,"offset":3116},"abstract_content":"Person.objects"}},"message":"QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html","cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra","https://semgrep.dev/blog/2020/preventing-sql-injection-a-django-authors-perspective/"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra","shortlink":"https://sg.run/kXZP","semgrep.dev":{"rule":{"origin":"community","r_id":9472,"rule_id":"nJUzBP","rule_name":"python.django.security.audit.query-set-extra.avoid-query-set-extra","rv_id":946143,"url":"https://semgrep.dev/playground/r/d6TPjYP/python.django.security.audit.query-set-extra.avoid-query-set-extra","version_id":"d6TPjYP"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e94ef32bf25f888b55acbe6457cbb60005d06274dd813dab009631812bbce2f1b4dd0a198cd2fd0cea4f0e5060dd7c11c3575d9e873024bb29a5a07438101161_0","lines":"            results = Person.objects.extra(where=[query])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.db.djangoorm-django.djangoorm-django","path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":88,"col":50,"offset":3129},"end":{"line":88,"col":57,"offset":3136},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$MODEL":{"start":{"line":12,"col":7,"offset":334},"end":{"line":12,"col":13,"offset":340},"abstract_content":"Person"},"$CLS":{"start":{"line":63,"col":7,"offset":1930},"end":{"line":63,"col":23,"offset":1946},"abstract_content":"SearchPersonView"},"$FUNC":{"start":{"line":64,"col":9,"offset":1962},"end":{"line":64,"col":13,"offset":1966},"abstract_content":"post"},"$SELF":{"start":{"line":64,"col":14,"offset":1967},"end":{"line":64,"col":18,"offset":1971},"abstract_content":"self"},"$DJANGO_REQUEST":{"start":{"line":64,"col":20,"offset":1973},"end":{"line":64,"col":27,"offset":1980},"abstract_content":"request"},"$DB":{"start":{"line":88,"col":23,"offset":3102},"end":{"line":88,"col":29,"offset":3108},"abstract_content":"Person"},"$SINK":{"start":{"line":88,"col":50,"offset":3129},"end":{"line":88,"col":57,"offset":3136},"abstract_content":"[query]"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. Don’t manually concatenate values to a query, use query parameterization instead to avoid SQL injection.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection in Django ORM","functional-categories":["db::sink::sql-or-nosql-query::django","db::sink::sql-or-nosql-query::djangoorm","web::source::cookie::django","web::source::cookie::django_allauth","web::source::cookie::django_channels","web::source::cookie::django_rest_frameworkapi","web::source::form-data::django","web::source::form-data::django_allauth","web::source::form-data::django_channels","web::source::form-data::django_rest_frameworkapi","web::source::header::django","web::source::header::django_allauth","web::source::header::django_channels","web::source::header::django_rest_frameworkapi","web::source::http-body::django","web::source::http-body::django_allauth","web::source::http-body::django_channels","web::source::http-body::django_rest_frameworkapi","web::source::http-params::django","web::source::http-params::django_allauth","web::source::http-params::django_channels","web::source::http-params::django_rest_frameworkapi","web::source::url-path-params::django","web::source::url-path-params::django_allauth","web::source::url-path-params::django_channels","web::source::url-path-params::django_rest_frameworkapi"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/5.0/topics/db/sql/","https://docs.djangoproject.com/en/5.0/topics/security/#sql-injection-protection","https://owasp.org/Top10/A03_2021-Injection"],"technology":["django","django.views","django.views.generic","django_allauth","django_channels","django_rest_frameworkapi","djangoorm","sql","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.db.djangoorm-django.djangoorm-django","shortlink":"https://sg.run/JDngQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":137890,"rule_id":"bwUb7Bv","rule_name":"python.django.db.djangoorm-django.djangoorm-django","rv_id":1014959,"url":"https://semgrep.dev/playground/r/qkT4044/python.django.db.djangoorm-django.djangoorm-django","version_id":"qkT4044"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.db.djangoorm-django.djangoorm-django","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"d6012f1303472a8138bd0fa6bfa9d09af7bde947ca90ef15c28e0fc0c96fcd27f86cf80621f546d3289417c61bca178285c9bf16164d7803fb7b6b725d4d8001_0","lines":"            results = Person.objects.extra(where=[query])","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":64,"col":20,"offset":1973},"end":{"line":64,"col":27,"offset":1980}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":64,"col":20,"offset":1973},"end":{"line":64,"col":27,"offset":1980}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":66,"col":26,"offset":2021},"end":{"line":66,"col":39,"offset":2034}},"content":"validate_date"},{"location":{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":112,"col":19,"offset":4077},"end":{"line":112,"col":30,"offset":4088}},"content":"date_string"},{"location":{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":66,"col":13,"offset":2008},"end":{"line":66,"col":23,"offset":2018}},"content":"birth_date"},{"location":{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":75,"col":17,"offset":2480},"end":{"line":75,"col":28,"offset":2491}},"content":"query_parts"},{"location":{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":87,"col":13,"offset":3046},"end":{"line":87,"col":18,"offset":3051}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":88,"col":50,"offset":3129},"end":{"line":88,"col":57,"offset":3136}},"[query]"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":151,"col":20,"offset":5596},"end":{"line":151,"col":50,"offset":5626},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2187223bd063b4ac41914ca61cd837364dd6a5c6d61d557ad2d5416dd500aa239f7cf4b50642aaf34ab5e6bba50c6311e7116ed20e85af45b1ce13def2aeadbc_0","lines":"            return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-89/sample_180_original.py","start":{"line":167,"col":20,"offset":6434},"end":{"line":167,"col":50,"offset":6464},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"2187223bd063b4ac41914ca61cd837364dd6a5c6d61d557ad2d5416dd500aa239f7cf4b50642aaf34ab5e6bba50c6311e7116ed20e85af45b1ce13def2aeadbc_1","lines":"            return HttpResponseBadRequest(str(e))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"vulnerability_samples/CWE-89/sample_181_original.py","start":{"line":36,"col":35,"offset":1176},"end":{"line":36,"col":46,"offset":1187},"extra":{"metavars":{},"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O","semgrep.dev":{"rule":{"origin":"community","r_id":15824,"rule_id":"r6U2wE","rule_name":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","rv_id":946451,"url":"https://semgrep.dev/playground/r/LjTXyKX/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","version_id":"LjTXyKX"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"4354d550727e18eda3669833c997363ccc7e0b707d55fc5ea148718732301db59b8075a87f5e937a3acd3c42ce0c9e34da8f82315f41ae2e49309423b490fc01_0","lines":"            result = conn.execute(text(query))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_181_original.py","start":{"line":32,"col":13,"offset":1009},"end":{"line":32,"col":65,"offset":1061}},"f\"SELECT * FROM users WHERE username = '{username}'\""]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_181_original.py","start":{"line":32,"col":5,"offset":1001},"end":{"line":32,"col":10,"offset":1006}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_181_original.py","start":{"line":36,"col":35,"offset":1176},"end":{"line":36,"col":46,"offset":1187}},"text(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":9,"offset":1313},"end":{"line":66,"col":25,"offset":2064},"extra":{"metavars":{"$FUNC":{"start":{"line":49,"col":5,"offset":1263},"end":{"line":49,"col":10,"offset":1268},"abstract_content":"login"},"$DATA":{"start":{"line":51,"col":9,"offset":1313},"end":{"line":51,"col":17,"offset":1321},"abstract_content":"username"},"$W":{"start":{"line":51,"col":28,"offset":1332},"end":{"line":51,"col":32,"offset":1336},"abstract_content":"form"},"$CURSOR":{"start":{"line":55,"col":22,"offset":1462},"end":{"line":55,"col":26,"offset":1466},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":53,"col":16,"offset":1408},"svalue_end":{"line":53,"col":35,"offset":1427},"svalue_abstract_content":"get_db_connection()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"eb81ddfb8124ccade4608d50e986d973bee464b93fbde7c138d39fd760a140915cd066db413c6f799e170e715ce4cebac089d7dd2cca33a18900d38a73a31ddf_0","lines":"        username = request.form['username']\n        password = request.form['password']\n        conn = get_db_connection()\n        try:\n            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")\n            user = result.fetchone()\n            if user:\n                session['user_id'] = user['id']\n                logging.info(f\"User {username} logged in successfully\")\n                return redirect(url_for('dashboard'))\n            else:\n                logging.warning(f\"Failed login attempt for user {username}\")\n        except SQLAlchemyError as e:\n            logging.error(f\"Database error during login: {str(e)}\")\n        finally:\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":22,"offset":1462},"end":{"line":55,"col":150,"offset":1590},"extra":{"metavars":{"$DB":{"start":{"line":55,"col":22,"offset":1462},"end":{"line":55,"col":26,"offset":1466},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":53,"col":16,"offset":1408},"svalue_end":{"line":53,"col":35,"offset":1427},"svalue_abstract_content":"get_db_connection()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"026abb30d9cacdeddf652e6c971ed6d082517c478191f62e79be49a9f1bc285831a920285c5a3a2d66c536c5b0bfe27eb05919a84702ebd1ae6eba35c1485232_0","lines":"            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":22,"offset":1462},"end":{"line":55,"col":150,"offset":1590},"extra":{"metavars":{"$CONNECTION":{"start":{"line":55,"col":22,"offset":1462},"end":{"line":55,"col":26,"offset":1466},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":53,"col":16,"offset":1408},"svalue_end":{"line":53,"col":35,"offset":1427},"svalue_abstract_content":"get_db_connection()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7936bfdfdb4128d70c23658b868f6c46f558c123a7f85dab3685d5b79fe4b5d3e367208d724226743ce27ff2619c2aaeef5bc29cc822c6553799d38234be6a1a_0","lines":"            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":51,"col":28,"offset":1332},"end":{"line":51,"col":32,"offset":1336},"abstract_content":"form"},"$SQLSTR":{"start":{"line":55,"col":37,"offset":1477},"end":{"line":55,"col":75,"offset":1515},"abstract_content":"SELECT * FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9be37cc7f1ff84ad27ea9c30a59f554cb2c605f3886530262e1e5acf25dff43fd2b3a212af8da6d9eb3e075d3cfa683b56093e6a6e7a739548b6a68b65a6a8e0_0","lines":"            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":20,"offset":1324},"end":{"line":51,"col":32,"offset":1336}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":9,"offset":1313},"end":{"line":51,"col":17,"offset":1321}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589}},"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":51,"col":28,"offset":1332},"end":{"line":51,"col":32,"offset":1336},"abstract_content":"form"},"$AIOMYSQL_CURSOR":{"start":{"line":53,"col":16,"offset":1408},"end":{"line":53,"col":35,"offset":1427},"abstract_content":"get_db_connection()"},"$SINK":{"start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589},"abstract_content":"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"9c5cd725a2404d9909a5856f422c306a47d21f5192e8b057561659e7aa94a0032a2a5bd0a56c43bbea2d9b3f4d33adb104a6408bb261e5e1ddd4400483fb7342_0","lines":"            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":20,"offset":1324},"end":{"line":51,"col":44,"offset":1348}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":9,"offset":1313},"end":{"line":51,"col":17,"offset":1321}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589}},"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":51,"col":28,"offset":1332},"end":{"line":51,"col":32,"offset":1336},"abstract_content":"form"},"$SQLSTR":{"start":{"line":55,"col":37,"offset":1477},"end":{"line":55,"col":75,"offset":1515},"abstract_content":"SELECT * FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0f2026e78f6d4ebb3319f3e9391426b629f469ec27536d49c70e9128749a94a17ae6cb23256ad97c5a20c016eeb57f498f63f64b8fa8fede40929c1c5cbfc7df_0","lines":"            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":20,"offset":1324},"end":{"line":51,"col":32,"offset":1336}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":9,"offset":1313},"end":{"line":51,"col":17,"offset":1321}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":35,"offset":1475},"end":{"line":55,"col":149,"offset":1589}},"f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":104,"offset":1544},"end":{"line":55,"col":146,"offset":1586},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":41,"offset":40},"abstract_content":"hashlib.md5(password.encode()).hexdigest"},"$FUNCTION":{"start":{"line":55,"col":104,"offset":1544},"end":{"line":55,"col":144,"offset":1584},"abstract_content":"hashlib.md5(password.encode()).hexdigest"}},"message":"It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.","metadata":{"cwe":["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"],"owasp":["A03:2017 - Sensitive Data Exposure","A02:2021 - Cryptographic Failures"],"references":["https://tools.ietf.org/html/rfc6151","https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision","https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html","https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","https://github.com/returntocorp/semgrep-rules/issues/1609","https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"],"category":"security","technology":["pycryptodome","hashlib","md5"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","shortlink":"https://sg.run/5DwD","semgrep.dev":{"rule":{"origin":"community","r_id":14703,"rule_id":"6JU1w1","rule_name":"python.lang.security.audit.md5-used-as-password.md5-used-as-password","rv_id":946368,"url":"https://semgrep.dev/playground/r/l4Tx9Rp/python.lang.security.audit.md5-used-as-password.md5-used-as-password","version_id":"l4Tx9Rp"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ce24c11ec19bfbcc33d826202b279b174c11425da9c867eb55e0aa7de58db9b36a03adcbbfd119e0aa056a0cb4b384f5763f93652084d7a1299218dfef2c41a2_0","lines":"            result = conn.execute(f\"SELECT * FROM users WHERE username = '{username}' AND password = '{hashlib.md5(password.encode()).hexdigest()}'\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":104,"offset":1544},"end":{"line":55,"col":115,"offset":1555}},"hashlib.md5"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":55,"col":104,"offset":1544},"end":{"line":55,"col":146,"offset":1586}},"hashlib.md5(password.encode()).hexdigest()"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":59,"col":30,"offset":1726},"end":{"line":59,"col":71,"offset":1767},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":51,"col":28,"offset":1332},"end":{"line":51,"col":32,"offset":1336},"abstract_content":"form"},"$LOG":{"start":{"line":59,"col":25,"offset":1721},"end":{"line":59,"col":29,"offset":1725},"abstract_content":"info"},"$SINK":{"start":{"line":59,"col":30,"offset":1726},"end":{"line":59,"col":71,"offset":1767},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1be6017fc279618df74e25dab480a70dd1b17c4dfbed5ff3795ef2d0dc9da47d9fab6d260310d268af46ebf0ee12c71cf38af391ecc55226a965088832cd7ea1_0","lines":"                logging.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":20,"offset":1324},"end":{"line":51,"col":44,"offset":1348}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":9,"offset":1313},"end":{"line":51,"col":17,"offset":1321}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":59,"col":30,"offset":1726},"end":{"line":59,"col":71,"offset":1767}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":62,"col":33,"offset":1873},"end":{"line":62,"col":76,"offset":1916},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":51,"col":28,"offset":1332},"end":{"line":51,"col":32,"offset":1336},"abstract_content":"form"},"$LOG":{"start":{"line":62,"col":25,"offset":1865},"end":{"line":62,"col":32,"offset":1872},"abstract_content":"warning"},"$SINK":{"start":{"line":62,"col":33,"offset":1873},"end":{"line":62,"col":76,"offset":1916},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a30f0f87c2eba1ae7078e84c676c00367f94e9c1765cacd2808cfd75e80102c474867f9b330b059571d34b66994dd65ce3a5aba6b0b28c4e1f63c46236631143_0","lines":"                logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":20,"offset":1324},"end":{"line":51,"col":44,"offset":1348}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":51,"col":9,"offset":1313},"end":{"line":51,"col":17,"offset":1321}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":62,"col":33,"offset":1873},"end":{"line":62,"col":76,"offset":1916}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":5,"offset":2359},"end":{"line":91,"col":21,"offset":2726},"extra":{"metavars":{"$FUNC":{"start":{"line":80,"col":5,"offset":2345},"end":{"line":80,"col":11,"offset":2351},"abstract_content":"search"},"$DATA":{"start":{"line":81,"col":5,"offset":2359},"end":{"line":81,"col":10,"offset":2364},"abstract_content":"query"},"$W":{"start":{"line":81,"col":21,"offset":2375},"end":{"line":81,"col":25,"offset":2379},"abstract_content":"args"},"$INTERM":{"start":{"line":82,"col":5,"offset":2401},"end":{"line":82,"col":8,"offset":2404},"abstract_content":"sql"},"$CURSOR":{"start":{"line":85,"col":18,"offset":2518},"end":{"line":85,"col":22,"offset":2522},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":83,"col":12,"offset":2472},"svalue_end":{"line":83,"col":31,"offset":2491},"svalue_abstract_content":"get_db_connection()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"efae95a6241e5521e923c211938ffbe79e5433a9ea8722f375ed804b467f13959377dfb704242dc60b6864ebd39e8d7afdd7d9bf576e10619e22f15211de1917_0","lines":"    query = request.args.get('query', '')\n    sql = f\"SELECT * FROM products WHERE name LIKE '%{query}%'\"\n    conn = get_db_connection()\n    try:\n        result = conn.execute(sql)\n        products = result.fetchall()\n    except SQLAlchemyError as e:\n        logging.error(f\"Database error during search: {str(e)}\")\n        products = []\n    finally:\n        conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":82,"col":11,"offset":2407},"end":{"line":82,"col":64,"offset":2460},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":81,"col":21,"offset":2375},"end":{"line":81,"col":25,"offset":2379},"abstract_content":"args"},"$SQLSTR":{"start":{"line":82,"col":13,"offset":2409},"end":{"line":82,"col":54,"offset":2450},"abstract_content":"SELECT * FROM products WHERE name LIKE '%"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"fee0441e5d43d8aafb1d6d77584d5f158d59b41d59508274fa5ecc12f047f0deb502c86b058521766642bf0948a710636ce1794be47e3456e6d8f888e2cf3212_0","lines":"    sql = f\"SELECT * FROM products WHERE name LIKE '%{query}%'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":13,"offset":2367},"end":{"line":81,"col":25,"offset":2379}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":5,"offset":2359},"end":{"line":81,"col":10,"offset":2364}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":82,"col":11,"offset":2407},"end":{"line":82,"col":64,"offset":2460}},"f\"SELECT * FROM products WHERE name LIKE '%{query}%'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":82,"col":11,"offset":2407},"end":{"line":82,"col":64,"offset":2460},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":81,"col":21,"offset":2375},"end":{"line":81,"col":25,"offset":2379},"abstract_content":"args"},"$SQLSTR":{"start":{"line":82,"col":13,"offset":2409},"end":{"line":82,"col":54,"offset":2450},"abstract_content":"SELECT * FROM products WHERE name LIKE '%"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"9610b61e23cac913fa1ea555307afb80b8a1e5e1c961239070f09610c156e3268a03540c52f0f3bbc748fc9bdf04bb5536f016f5a1ad2b086f18adc906660865_0","lines":"    sql = f\"SELECT * FROM products WHERE name LIKE '%{query}%'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":13,"offset":2367},"end":{"line":81,"col":25,"offset":2379}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":5,"offset":2359},"end":{"line":81,"col":10,"offset":2364}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":82,"col":11,"offset":2407},"end":{"line":82,"col":64,"offset":2460}},"f\"SELECT * FROM products WHERE name LIKE '%{query}%'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":85,"col":18,"offset":2518},"end":{"line":85,"col":35,"offset":2535},"extra":{"metavars":{"$X":{"start":{"line":82,"col":55,"offset":2451},"end":{"line":82,"col":60,"offset":2456},"abstract_content":"query","propagated_value":{"svalue_start":{"line":81,"col":13,"offset":2367},"svalue_end":{"line":81,"col":42,"offset":2396},"svalue_abstract_content":"request.args.get('query''')"}},"$DB":{"start":{"line":85,"col":18,"offset":2518},"end":{"line":85,"col":22,"offset":2522},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":83,"col":12,"offset":2472},"svalue_end":{"line":83,"col":31,"offset":2491},"svalue_abstract_content":"get_db_connection()"}},"$SQL":{"start":{"line":85,"col":31,"offset":2531},"end":{"line":85,"col":34,"offset":2534},"abstract_content":"sql","propagated_value":{"svalue_start":{"line":82,"col":11,"offset":2407},"svalue_end":{"line":82,"col":64,"offset":2460},"svalue_abstract_content":"f\"SELECT * FROM products WHERE name LIKE '%{query}%'\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"46ef834805f744d1defb3e76252cb8b526531012faf0fb91c5bb41e6539ea2de75244d1b194a7f2fae8bbf38628e93f3889da7de9b9b199337906db36d65b6c2_0","lines":"        result = conn.execute(sql)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":85,"col":18,"offset":2518},"end":{"line":85,"col":35,"offset":2535},"extra":{"metavars":{"$CONNECTION":{"start":{"line":85,"col":18,"offset":2518},"end":{"line":85,"col":22,"offset":2522},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":83,"col":12,"offset":2472},"svalue_end":{"line":83,"col":31,"offset":2491},"svalue_abstract_content":"get_db_connection()"}},"$QUERY":{"start":{"line":85,"col":31,"offset":2531},"end":{"line":85,"col":34,"offset":2534},"abstract_content":"sql","propagated_value":{"svalue_start":{"line":82,"col":11,"offset":2407},"svalue_end":{"line":82,"col":64,"offset":2460},"svalue_abstract_content":"f\"SELECT * FROM products WHERE name LIKE '%{query}%'\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b1ba077d3ee0c486c7ed7ae3baeec497681353eb101440b7c71dbc89dc1830feefcaa85963f6cca2ad532dd5e7c72802230b8c981595a10b19216de24f18b87f_0","lines":"        result = conn.execute(sql)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":85,"col":31,"offset":2531},"end":{"line":85,"col":34,"offset":2534},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":81,"col":21,"offset":2375},"end":{"line":81,"col":25,"offset":2379},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":83,"col":12,"offset":2472},"end":{"line":83,"col":31,"offset":2491},"abstract_content":"get_db_connection()"},"$SINK":{"start":{"line":85,"col":31,"offset":2531},"end":{"line":85,"col":34,"offset":2534},"abstract_content":"sql","propagated_value":{"svalue_start":{"line":82,"col":11,"offset":2407},"svalue_end":{"line":82,"col":64,"offset":2460},"svalue_abstract_content":"f\"SELECT * FROM products WHERE name LIKE '%{query}%'\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b8e5f2763c88371b9a3b380cd5a4cec74af78c70be9c6fa19a77c8f5a6c17b7b71077eec05f7719aa6bf99a867f16a16a4bd1ad995a54e3f196a0a9e4e0f1fa8_0","lines":"        result = conn.execute(sql)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":13,"offset":2367},"end":{"line":81,"col":42,"offset":2396}},"request.args.get('query', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":81,"col":5,"offset":2359},"end":{"line":81,"col":10,"offset":2364}},"content":"query"},{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":82,"col":5,"offset":2401},"end":{"line":82,"col":8,"offset":2404}},"content":"sql"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":85,"col":31,"offset":2531},"end":{"line":85,"col":34,"offset":2534}},"sql"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":18,"offset":3329},"end":{"line":111,"col":81,"offset":3392},"extra":{"metavars":{"$DB":{"start":{"line":111,"col":18,"offset":3329},"end":{"line":111,"col":22,"offset":3333},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":109,"col":12,"offset":3283},"svalue_end":{"line":109,"col":31,"offset":3302},"svalue_abstract_content":"get_db_connection()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"026abb30d9cacdeddf652e6c971ed6d082517c478191f62e79be49a9f1bc285831a920285c5a3a2d66c536c5b0bfe27eb05919a84702ebd1ae6eba35c1485232_1","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":18,"offset":3329},"end":{"line":111,"col":81,"offset":3392},"extra":{"metavars":{"$CONNECTION":{"start":{"line":111,"col":18,"offset":3329},"end":{"line":111,"col":22,"offset":3333},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":109,"col":12,"offset":3283},"svalue_end":{"line":109,"col":31,"offset":3302},"svalue_abstract_content":"get_db_connection()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7936bfdfdb4128d70c23658b868f6c46f558c123a7f85dab3685d5b79fe4b5d3e367208d724226743ce27ff2619c2aaeef5bc29cc822c6553799d38234be6a1a_1","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":31,"offset":3342},"end":{"line":111,"col":80,"offset":3391},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":107,"col":2,"offset":3203},"end":{"line":107,"col":5,"offset":3206},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":107,"col":6,"offset":3207},"end":{"line":107,"col":11,"offset":3212},"abstract_content":"route"},"$FUNC":{"start":{"line":108,"col":5,"offset":3246},"end":{"line":108,"col":17,"offset":3258},"abstract_content":"view_product"},"$PARAM":{"start":{"line":108,"col":18,"offset":3259},"end":{"line":108,"col":28,"offset":3269},"abstract_content":"product_id"},"$AIOMYSQL_CURSOR":{"start":{"line":109,"col":12,"offset":3283},"end":{"line":109,"col":31,"offset":3302},"abstract_content":"get_db_connection()"},"$SINK":{"start":{"line":111,"col":31,"offset":3342},"end":{"line":111,"col":80,"offset":3391},"abstract_content":"f\"SELECT * FROM products WHERE id = {product_id}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5f22204ec2b136561c761229f192d7a474de5748853a79e10a99a9009218011aa5f20427682a659c2d78ecb511e24d125e36b937ca58915228a081de3f56b7f3_0","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":108,"col":18,"offset":3259},"end":{"line":108,"col":28,"offset":3269}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":108,"col":18,"offset":3259},"end":{"line":108,"col":28,"offset":3269}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":31,"offset":3342},"end":{"line":111,"col":80,"offset":3391}},"f\"SELECT * FROM products WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":31,"offset":3342},"end":{"line":111,"col":80,"offset":3391},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$APP":{"start":{"line":107,"col":2,"offset":3203},"end":{"line":107,"col":5,"offset":3206},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$FUNC":{"start":{"line":108,"col":5,"offset":3246},"end":{"line":108,"col":17,"offset":3258},"abstract_content":"view_product"},"$SQLSTR":{"start":{"line":111,"col":33,"offset":3344},"end":{"line":111,"col":67,"offset":3378},"abstract_content":"SELECT * FROM products WHERE id = "},"$ROUTEVAR":{"start":{"line":111,"col":68,"offset":3379},"end":{"line":111,"col":78,"offset":3389},"abstract_content":"product_id"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0f16ccbe6b9597a8e333edd36f5514796238280c5ec5e5810d1e1edfd49b476c0daf7884c1c855ce678dda17facc37f3c3e351f8aba64a270361bac812048cee_0","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":68,"offset":3379},"end":{"line":111,"col":78,"offset":3389}},"product_id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":111,"col":31,"offset":3342},"end":{"line":111,"col":80,"offset":3391}},"f\"SELECT * FROM products WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":114,"col":23,"offset":3484},"end":{"line":114,"col":85,"offset":3546},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":107,"col":2,"offset":3203},"end":{"line":107,"col":5,"offset":3206},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":107,"col":6,"offset":3207},"end":{"line":107,"col":11,"offset":3212},"abstract_content":"route"},"$FUNC":{"start":{"line":108,"col":5,"offset":3246},"end":{"line":108,"col":17,"offset":3258},"abstract_content":"view_product"},"$PARAM":{"start":{"line":108,"col":18,"offset":3259},"end":{"line":108,"col":28,"offset":3269},"abstract_content":"product_id"},"$LOG":{"start":{"line":114,"col":17,"offset":3478},"end":{"line":114,"col":22,"offset":3483},"abstract_content":"error"},"$SINK":{"start":{"line":114,"col":23,"offset":3484},"end":{"line":114,"col":85,"offset":3546},"abstract_content":"f\"Database error while viewing product {product_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"427aec64f209c13ad28fc2516053295a327f8f8c545f5a8620e7125b42c6ea6d04f2e005013f0c7a3b9d20221e45a22df052298e8babcdfd4f272787ef91eb80_0","lines":"        logging.error(f\"Database error while viewing product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":108,"col":18,"offset":3259},"end":{"line":108,"col":28,"offset":3269}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":108,"col":18,"offset":3259},"end":{"line":108,"col":28,"offset":3269}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":114,"col":23,"offset":3484},"end":{"line":114,"col":85,"offset":3546}},"f\"Database error while viewing product {product_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":9,"offset":3802},"end":{"line":134,"col":25,"offset":4270},"extra":{"metavars":{"$FUNC":{"start":{"line":122,"col":5,"offset":3746},"end":{"line":122,"col":16,"offset":3757},"abstract_content":"add_product"},"$DATA":{"start":{"line":124,"col":9,"offset":3802},"end":{"line":124,"col":13,"offset":3806},"abstract_content":"name"},"$W":{"start":{"line":124,"col":24,"offset":3817},"end":{"line":124,"col":28,"offset":3821},"abstract_content":"form"},"$CURSOR":{"start":{"line":128,"col":13,"offset":3928},"end":{"line":128,"col":17,"offset":3932},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":126,"col":16,"offset":3883},"svalue_end":{"line":126,"col":35,"offset":3902},"svalue_abstract_content":"get_db_connection()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"b697d8daed1dfbf5b16242d361b149d4fc7f2e4a037305d876af61d3e29a6c4045d0db39f6f7a4129ab65630dbae4f0b09057a2d9b5f11bd65edbc8b8cd45fde_0","lines":"        name = request.form['name']\n        price = request.form['price']\n        conn = get_db_connection()\n        try:\n            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")\n            logging.info(f\"New product added: {name}\")\n            return redirect(url_for('list_products'))\n        except SQLAlchemyError as e:\n            logging.error(f\"Database error while adding product: {str(e)}\")\n        finally:\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":125,"col":9,"offset":3838},"end":{"line":134,"col":25,"offset":4270},"extra":{"metavars":{"$FUNC":{"start":{"line":122,"col":5,"offset":3746},"end":{"line":122,"col":16,"offset":3757},"abstract_content":"add_product"},"$DATA":{"start":{"line":125,"col":9,"offset":3838},"end":{"line":125,"col":14,"offset":3843},"abstract_content":"price"},"$W":{"start":{"line":125,"col":25,"offset":3854},"end":{"line":125,"col":29,"offset":3858},"abstract_content":"form"},"$CURSOR":{"start":{"line":128,"col":13,"offset":3928},"end":{"line":128,"col":17,"offset":3932},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":126,"col":16,"offset":3883},"svalue_end":{"line":126,"col":35,"offset":3902},"svalue_abstract_content":"get_db_connection()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"5c094f06331d0054fe920d2dad79bf8345c003bc3996ff1383851aae7f1d4c7f1a5d18724a5b386663ffecc095d75d7f42b40549f3086089398f3a642cecc2fc_0","lines":"        price = request.form['price']\n        conn = get_db_connection()\n        try:\n            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")\n            logging.info(f\"New product added: {name}\")\n            return redirect(url_for('list_products'))\n        except SQLAlchemyError as e:\n            logging.error(f\"Database error while adding product: {str(e)}\")\n        finally:\n            conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":13,"offset":3928},"end":{"line":128,"col":91,"offset":4006},"extra":{"metavars":{"$DB":{"start":{"line":128,"col":13,"offset":3928},"end":{"line":128,"col":17,"offset":3932},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":126,"col":16,"offset":3883},"svalue_end":{"line":126,"col":35,"offset":3902},"svalue_abstract_content":"get_db_connection()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"026abb30d9cacdeddf652e6c971ed6d082517c478191f62e79be49a9f1bc285831a920285c5a3a2d66c536c5b0bfe27eb05919a84702ebd1ae6eba35c1485232_2","lines":"            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":13,"offset":3928},"end":{"line":128,"col":91,"offset":4006},"extra":{"metavars":{"$CONNECTION":{"start":{"line":128,"col":13,"offset":3928},"end":{"line":128,"col":17,"offset":3932},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":126,"col":16,"offset":3883},"svalue_end":{"line":126,"col":35,"offset":3902},"svalue_abstract_content":"get_db_connection()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7936bfdfdb4128d70c23658b868f6c46f558c123a7f85dab3685d5b79fe4b5d3e367208d724226743ce27ff2619c2aaeef5bc29cc822c6553799d38234be6a1a_2","lines":"            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"INSERT"},"$ANYTHING":{"start":{"line":124,"col":24,"offset":3817},"end":{"line":124,"col":28,"offset":3821},"abstract_content":"form"},"$SQLSTR":{"start":{"line":128,"col":28,"offset":3943},"end":{"line":128,"col":72,"offset":3987},"abstract_content":"INSERT INTO products (name, price) VALUES ('"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"5a0bf3eed49f2f36a55548f47f7815a0db08076b3c75c738b514986a36dcdb2c1af2affd827d0e20d13aa61cfdd4ce894ad6a1e2d8be7cb21a2594677a0e7ae3_0","lines":"            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":16,"offset":3809},"end":{"line":124,"col":28,"offset":3821}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":9,"offset":3802},"end":{"line":124,"col":13,"offset":3806}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005}},"f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":124,"col":24,"offset":3817},"end":{"line":124,"col":28,"offset":3821},"abstract_content":"form"},"$AIOMYSQL_CURSOR":{"start":{"line":126,"col":16,"offset":3883},"end":{"line":126,"col":35,"offset":3902},"abstract_content":"get_db_connection()"},"$SINK":{"start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005},"abstract_content":"f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5de41fff9330e0cf20b468bfc0e764df85b3958a759b5b352959c10666065f60f1bcafd101e5e2a715e2701cdb032b8f7d5eaf38fcb98f38584a15737f9d5a3f_0","lines":"            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":16,"offset":3809},"end":{"line":124,"col":36,"offset":3829}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":9,"offset":3802},"end":{"line":124,"col":13,"offset":3806}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005}},"f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"INSERT"},"$ANYTHING":{"start":{"line":124,"col":24,"offset":3817},"end":{"line":124,"col":28,"offset":3821},"abstract_content":"form"},"$SQLSTR":{"start":{"line":128,"col":28,"offset":3943},"end":{"line":128,"col":72,"offset":3987},"abstract_content":"INSERT INTO products (name, price) VALUES ('"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"2cdc0ce62a391a68588e26316b080e41c58a5911cf9827272437ed25598e03322ec94c80d83eb9a971acfdeb0a98f6e198bf997f62f89097aea2b6dc266e3be9_0","lines":"            conn.execute(f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":16,"offset":3809},"end":{"line":124,"col":28,"offset":3821}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":9,"offset":3802},"end":{"line":124,"col":13,"offset":3806}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":128,"col":26,"offset":3941},"end":{"line":128,"col":90,"offset":4005}},"f\"INSERT INTO products (name, price) VALUES ('{name}', {price})\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":129,"col":26,"offset":4032},"end":{"line":129,"col":54,"offset":4060},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":124,"col":24,"offset":3817},"end":{"line":124,"col":28,"offset":3821},"abstract_content":"form"},"$LOG":{"start":{"line":129,"col":21,"offset":4027},"end":{"line":129,"col":25,"offset":4031},"abstract_content":"info"},"$SINK":{"start":{"line":129,"col":26,"offset":4032},"end":{"line":129,"col":54,"offset":4060},"abstract_content":"f\"New product added: {name}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"dfed4bf0e1a45764ab6454a82485642bf35e45726415ed34c4726a45f816b92570014406401a5af4be8f119b1b19a71af242d4e9e6d75318902f280fec4acc58_0","lines":"            logging.info(f\"New product added: {name}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":16,"offset":3809},"end":{"line":124,"col":36,"offset":3829}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":124,"col":9,"offset":3802},"end":{"line":124,"col":13,"offset":3806}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":129,"col":26,"offset":4032},"end":{"line":129,"col":54,"offset":4060}},"f\"New product added: {name}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":142,"col":9,"offset":4511},"end":{"line":149,"col":91,"offset":4958},"extra":{"metavars":{"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$DATA":{"start":{"line":142,"col":9,"offset":4511},"end":{"line":142,"col":13,"offset":4515},"abstract_content":"name"},"$W":{"start":{"line":142,"col":24,"offset":4526},"end":{"line":142,"col":28,"offset":4530},"abstract_content":"form"},"$CURSOR":{"start":{"line":145,"col":13,"offset":4602},"end":{"line":145,"col":17,"offset":4606},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":140,"col":12,"offset":4450},"svalue_end":{"line":140,"col":31,"offset":4469},"svalue_abstract_content":"get_db_connection()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7a4ed11d6263d4b854073f5b55cf974fa2cb6fb7c23170cd8d4efae6f8d3722a17926a097f65bb7e1fc7d5c825403f8182e5843e5bef20253cc56eaa29ef124a_0","lines":"        name = request.form['name']\n        price = request.form['price']\n        try:\n            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")\n            logging.info(f\"Product updated: {product_id}\")\n            return redirect(url_for('view_product', product_id=product_id))\n        except SQLAlchemyError as e:\n            logging.error(f\"Database error while updating product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":143,"col":9,"offset":4547},"end":{"line":149,"col":91,"offset":4958},"extra":{"metavars":{"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$DATA":{"start":{"line":143,"col":9,"offset":4547},"end":{"line":143,"col":14,"offset":4552},"abstract_content":"price"},"$W":{"start":{"line":143,"col":25,"offset":4563},"end":{"line":143,"col":29,"offset":4567},"abstract_content":"form"},"$CURSOR":{"start":{"line":145,"col":13,"offset":4602},"end":{"line":145,"col":17,"offset":4606},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":140,"col":12,"offset":4450},"svalue_end":{"line":140,"col":31,"offset":4469},"svalue_abstract_content":"get_db_connection()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"9f98bc56bab101b6c33f1148ec2ae56710b72fa2a2517d191509d7cd0733623e1f21df7e4b3afca356b0dd759e7843bb1ac36e62d8338c23a75826ce0cf0a370_0","lines":"        price = request.form['price']\n        try:\n            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")\n            logging.info(f\"Product updated: {product_id}\")\n            return redirect(url_for('view_product', product_id=product_id))\n        except SQLAlchemyError as e:\n            logging.error(f\"Database error while updating product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":13,"offset":4602},"end":{"line":145,"col":106,"offset":4695},"extra":{"metavars":{"$DB":{"start":{"line":145,"col":13,"offset":4602},"end":{"line":145,"col":17,"offset":4606},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":140,"col":12,"offset":4450},"svalue_end":{"line":140,"col":31,"offset":4469},"svalue_abstract_content":"get_db_connection()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"026abb30d9cacdeddf652e6c971ed6d082517c478191f62e79be49a9f1bc285831a920285c5a3a2d66c536c5b0bfe27eb05919a84702ebd1ae6eba35c1485232_3","lines":"            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":13,"offset":4602},"end":{"line":145,"col":106,"offset":4695},"extra":{"metavars":{"$CONNECTION":{"start":{"line":145,"col":13,"offset":4602},"end":{"line":145,"col":17,"offset":4606},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":140,"col":12,"offset":4450},"svalue_end":{"line":140,"col":31,"offset":4469},"svalue_abstract_content":"get_db_connection()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7936bfdfdb4128d70c23658b868f6c46f558c123a7f85dab3685d5b79fe4b5d3e367208d724226743ce27ff2619c2aaeef5bc29cc822c6553799d38234be6a1a_3","lines":"            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$ANYTHING":{"start":{"line":142,"col":24,"offset":4526},"end":{"line":142,"col":28,"offset":4530},"abstract_content":"form"},"$SQLSTR":{"start":{"line":145,"col":28,"offset":4617},"end":{"line":145,"col":56,"offset":4645},"abstract_content":"UPDATE products SET name = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"06aaca8aa442276da4ee482b5784abc4358dcc55d7fe27a58e4891d958e249f18f8f50f2aee035f4b7c59a2a3b276bdd57dcbdeb2018afd9044099ef9f5ce00f_0","lines":"            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":142,"col":16,"offset":4518},"end":{"line":142,"col":28,"offset":4530}},"request.form"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":142,"col":9,"offset":4511},"end":{"line":142,"col":13,"offset":4515}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694}},"f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$AIOMYSQL_CURSOR":{"start":{"line":140,"col":12,"offset":4450},"end":{"line":140,"col":31,"offset":4469},"abstract_content":"get_db_connection()"},"$PROPERTY":{"start":{"line":142,"col":24,"offset":4526},"end":{"line":142,"col":28,"offset":4530},"abstract_content":"form"},"$SINK":{"start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694},"abstract_content":"f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"e0e8ebec8627970124d0937509a24382c5ad81f41ffc9ba5bf2a8bbc2f842e258ad6885a3512b1385d27682c8e0b5aac8503ce05a94650cd1f0c5fceedd06b52_0","lines":"            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":142,"col":16,"offset":4518},"end":{"line":142,"col":36,"offset":4538}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":142,"col":9,"offset":4511},"end":{"line":142,"col":13,"offset":4515}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694}},"f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$APP":{"start":{"line":137,"col":2,"offset":4320},"end":{"line":137,"col":5,"offset":4323},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$SQLSTR":{"start":{"line":145,"col":28,"offset":4617},"end":{"line":145,"col":56,"offset":4645},"abstract_content":"UPDATE products SET name = '"},"$ROUTEVAR":{"start":{"line":145,"col":93,"offset":4682},"end":{"line":145,"col":103,"offset":4692},"abstract_content":"product_id"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"23dbbd0c8a83f7d42dd7e0dbe2300820801376916a3a8b0aac71c1a087dce082add3d4cff5eec46cd1ad4358901f0318dde6aa1ee63d9c570a60c75d73f9a05f_0","lines":"            conn.execute(f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":93,"offset":4682},"end":{"line":145,"col":103,"offset":4692}},"product_id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":145,"col":26,"offset":4615},"end":{"line":145,"col":105,"offset":4694}},"f\"UPDATE products SET name = '{name}', price = {price} WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":146,"col":26,"offset":4721},"end":{"line":146,"col":58,"offset":4753},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":137,"col":2,"offset":4320},"end":{"line":137,"col":5,"offset":4323},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":137,"col":6,"offset":4324},"end":{"line":137,"col":11,"offset":4329},"abstract_content":"route"},"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$PARAM":{"start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436},"abstract_content":"product_id"},"$LOG":{"start":{"line":146,"col":21,"offset":4716},"end":{"line":146,"col":25,"offset":4720},"abstract_content":"info"},"$SINK":{"start":{"line":146,"col":26,"offset":4721},"end":{"line":146,"col":58,"offset":4753},"abstract_content":"f\"Product updated: {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"87563064a117062af57a987198e531eeb80cbe5f0369254af9c4490a2103eca13a28be59ed8b4b6d1690c08dae3b19b5e088b92bfcde1f1d011623eb13eef2bb_0","lines":"            logging.info(f\"Product updated: {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":146,"col":26,"offset":4721},"end":{"line":146,"col":58,"offset":4753}},"f\"Product updated: {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":149,"col":27,"offset":4894},"end":{"line":149,"col":90,"offset":4957},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":137,"col":2,"offset":4320},"end":{"line":137,"col":5,"offset":4323},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":137,"col":6,"offset":4324},"end":{"line":137,"col":11,"offset":4329},"abstract_content":"route"},"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$PARAM":{"start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436},"abstract_content":"product_id"},"$LOG":{"start":{"line":149,"col":21,"offset":4888},"end":{"line":149,"col":26,"offset":4893},"abstract_content":"error"},"$SINK":{"start":{"line":149,"col":27,"offset":4894},"end":{"line":149,"col":90,"offset":4957},"abstract_content":"f\"Database error while updating product {product_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d263c5cd42e67ee71a2fc12286d2d16ea45b978d4b2102a6e09f0866f544fd75bc0e5b787198689f9550cd5b9a5dfe5a30d4fc81361da55ee957df9aeb6803e0_0","lines":"            logging.error(f\"Database error while updating product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":149,"col":27,"offset":4894},"end":{"line":149,"col":90,"offset":4957}},"f\"Database error while updating product {product_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":18,"offset":4985},"end":{"line":151,"col":81,"offset":5048},"extra":{"metavars":{"$DB":{"start":{"line":151,"col":18,"offset":4985},"end":{"line":151,"col":22,"offset":4989},"abstract_content":"conn"}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"026abb30d9cacdeddf652e6c971ed6d082517c478191f62e79be49a9f1bc285831a920285c5a3a2d66c536c5b0bfe27eb05919a84702ebd1ae6eba35c1485232_4","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":18,"offset":4985},"end":{"line":151,"col":81,"offset":5048},"extra":{"metavars":{"$CONNECTION":{"start":{"line":151,"col":18,"offset":4985},"end":{"line":151,"col":22,"offset":4989},"abstract_content":"conn"}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7936bfdfdb4128d70c23658b868f6c46f558c123a7f85dab3685d5b79fe4b5d3e367208d724226743ce27ff2619c2aaeef5bc29cc822c6553799d38234be6a1a_4","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":31,"offset":4998},"end":{"line":151,"col":80,"offset":5047},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":137,"col":2,"offset":4320},"end":{"line":137,"col":5,"offset":4323},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":137,"col":6,"offset":4324},"end":{"line":137,"col":11,"offset":4329},"abstract_content":"route"},"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$PARAM":{"start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436},"abstract_content":"product_id"},"$AIOMYSQL_CURSOR":{"start":{"line":151,"col":18,"offset":4985},"end":{"line":151,"col":22,"offset":4989},"abstract_content":"conn"},"$SINK":{"start":{"line":151,"col":31,"offset":4998},"end":{"line":151,"col":80,"offset":5047},"abstract_content":"f\"SELECT * FROM products WHERE id = {product_id}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"7107cd5e18dd4312391d1b5c3de09ad2fc2b7c6d775939d51470f4bde646386f42db179e55de8066c24806a002a692ea61cd28bbc8f6adbff4df16effb51dcc8_0","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":31,"offset":4998},"end":{"line":151,"col":80,"offset":5047}},"f\"SELECT * FROM products WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":31,"offset":4998},"end":{"line":151,"col":80,"offset":5047},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$APP":{"start":{"line":137,"col":2,"offset":4320},"end":{"line":137,"col":5,"offset":4323},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$SQLSTR":{"start":{"line":151,"col":33,"offset":5000},"end":{"line":151,"col":67,"offset":5034},"abstract_content":"SELECT * FROM products WHERE id = "},"$ROUTEVAR":{"start":{"line":151,"col":68,"offset":5035},"end":{"line":151,"col":78,"offset":5045},"abstract_content":"product_id"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"de73f20e79f0da4098fb820588b78a49b4972698768854929621ac73e736ed264863e06efceffea783f068b94a75a893cdeec4f91c670e867f52bc5cd1096fce_0","lines":"        result = conn.execute(f\"SELECT * FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":68,"offset":5035},"end":{"line":151,"col":78,"offset":5045}},"product_id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":151,"col":31,"offset":4998},"end":{"line":151,"col":80,"offset":5047}},"f\"SELECT * FROM products WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":154,"col":23,"offset":5140},"end":{"line":154,"col":86,"offset":5203},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":137,"col":2,"offset":4320},"end":{"line":137,"col":5,"offset":4323},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":137,"col":6,"offset":4324},"end":{"line":137,"col":11,"offset":4329},"abstract_content":"route"},"$FUNC":{"start":{"line":139,"col":5,"offset":4411},"end":{"line":139,"col":19,"offset":4425},"abstract_content":"update_product"},"$PARAM":{"start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436},"abstract_content":"product_id"},"$LOG":{"start":{"line":154,"col":17,"offset":5134},"end":{"line":154,"col":22,"offset":5139},"abstract_content":"error"},"$SINK":{"start":{"line":154,"col":23,"offset":5140},"end":{"line":154,"col":86,"offset":5203},"abstract_content":"f\"Database error while fetching product {product_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"085164330b2a12f3395f409cd2177598c20b51ed422fdb34ab085be5e95d627c6c543d0ad7bf4420155eb55b0558365063a409ad5cc14fefe8c1721cb0052c5b_0","lines":"        logging.error(f\"Database error while fetching product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":139,"col":20,"offset":4426},"end":{"line":139,"col":30,"offset":4436}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":154,"col":23,"offset":5140},"end":{"line":154,"col":86,"offset":5203}},"f\"Database error while fetching product {product_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":9,"offset":5491},"end":{"line":165,"col":70,"offset":5552},"extra":{"metavars":{"$DB":{"start":{"line":165,"col":9,"offset":5491},"end":{"line":165,"col":13,"offset":5495},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":163,"col":12,"offset":5454},"svalue_end":{"line":163,"col":31,"offset":5473},"svalue_abstract_content":"get_db_connection()"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"026abb30d9cacdeddf652e6c971ed6d082517c478191f62e79be49a9f1bc285831a920285c5a3a2d66c536c5b0bfe27eb05919a84702ebd1ae6eba35c1485232_5","lines":"        conn.execute(f\"DELETE FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":9,"offset":5491},"end":{"line":165,"col":70,"offset":5552},"extra":{"metavars":{"$CONNECTION":{"start":{"line":165,"col":9,"offset":5491},"end":{"line":165,"col":13,"offset":5495},"abstract_content":"conn","propagated_value":{"svalue_start":{"line":163,"col":12,"offset":5454},"svalue_end":{"line":163,"col":31,"offset":5473},"svalue_abstract_content":"get_db_connection()"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"7936bfdfdb4128d70c23658b868f6c46f558c123a7f85dab3685d5b79fe4b5d3e367208d724226743ce27ff2619c2aaeef5bc29cc822c6553799d38234be6a1a_5","lines":"        conn.execute(f\"DELETE FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":22,"offset":5504},"end":{"line":165,"col":69,"offset":5551},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":160,"col":2,"offset":5331},"end":{"line":160,"col":5,"offset":5334},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":160,"col":6,"offset":5335},"end":{"line":160,"col":11,"offset":5340},"abstract_content":"route"},"$FUNC":{"start":{"line":162,"col":5,"offset":5415},"end":{"line":162,"col":19,"offset":5429},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440},"abstract_content":"product_id"},"$AIOMYSQL_CURSOR":{"start":{"line":163,"col":12,"offset":5454},"end":{"line":163,"col":31,"offset":5473},"abstract_content":"get_db_connection()"},"$SINK":{"start":{"line":165,"col":22,"offset":5504},"end":{"line":165,"col":69,"offset":5551},"abstract_content":"f\"DELETE FROM products WHERE id = {product_id}\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"a589361b65c904432cab1ee4a096f02cb7cd68bde0053a6afe183733b889cfbab2ff4748aada70df28898f404864ce9b91ed79a969abdbaa1515c9c349a813df_0","lines":"        conn.execute(f\"DELETE FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":22,"offset":5504},"end":{"line":165,"col":69,"offset":5551}},"f\"DELETE FROM products WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":22,"offset":5504},"end":{"line":165,"col":69,"offset":5551},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"DELETE"},"$APP":{"start":{"line":160,"col":2,"offset":5331},"end":{"line":160,"col":5,"offset":5334},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$FUNC":{"start":{"line":162,"col":5,"offset":5415},"end":{"line":162,"col":19,"offset":5429},"abstract_content":"delete_product"},"$SQLSTR":{"start":{"line":165,"col":24,"offset":5506},"end":{"line":165,"col":56,"offset":5538},"abstract_content":"DELETE FROM products WHERE id = "},"$ROUTEVAR":{"start":{"line":165,"col":57,"offset":5539},"end":{"line":165,"col":67,"offset":5549},"abstract_content":"product_id"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"770691eb7a16017a23b3f8712a29fd4803dec132135f324aa1abc23acb32fe06394cf1f6a414c02910b65282c58a29cf6d0bd9a75d00c9d4b59140b64ada804c_0","lines":"        conn.execute(f\"DELETE FROM products WHERE id = {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":57,"offset":5539},"end":{"line":165,"col":67,"offset":5549}},"product_id"]],"intermediate_vars":[],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":165,"col":22,"offset":5504},"end":{"line":165,"col":69,"offset":5551}},"f\"DELETE FROM products WHERE id = {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":166,"col":22,"offset":5574},"end":{"line":166,"col":54,"offset":5606},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":160,"col":2,"offset":5331},"end":{"line":160,"col":5,"offset":5334},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":160,"col":6,"offset":5335},"end":{"line":160,"col":11,"offset":5340},"abstract_content":"route"},"$FUNC":{"start":{"line":162,"col":5,"offset":5415},"end":{"line":162,"col":19,"offset":5429},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440},"abstract_content":"product_id"},"$LOG":{"start":{"line":166,"col":17,"offset":5569},"end":{"line":166,"col":21,"offset":5573},"abstract_content":"info"},"$SINK":{"start":{"line":166,"col":22,"offset":5574},"end":{"line":166,"col":54,"offset":5606},"abstract_content":"f\"Product deleted: {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"da1f53ab079403c88bdab2921f2013813f44999f93f8bed0a18fbe363db99eb78ed6009dc385100c873688a0ec0461c5b4319533fb360991879d8e41f8050e74_0","lines":"        logging.info(f\"Product deleted: {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":166,"col":22,"offset":5574},"end":{"line":166,"col":54,"offset":5606}},"f\"Product deleted: {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":169,"col":23,"offset":5705},"end":{"line":169,"col":86,"offset":5768},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":160,"col":2,"offset":5331},"end":{"line":160,"col":5,"offset":5334},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":160,"col":6,"offset":5335},"end":{"line":160,"col":11,"offset":5340},"abstract_content":"route"},"$FUNC":{"start":{"line":162,"col":5,"offset":5415},"end":{"line":162,"col":19,"offset":5429},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440},"abstract_content":"product_id"},"$LOG":{"start":{"line":169,"col":17,"offset":5699},"end":{"line":169,"col":22,"offset":5704},"abstract_content":"error"},"$SINK":{"start":{"line":169,"col":23,"offset":5705},"end":{"line":169,"col":86,"offset":5768},"abstract_content":"f\"Database error while deleting product {product_id}: {str(e)}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2d3a3db048cfd8d7646dba28688e9265b2e0c4bc420213b692ea399007d57b40604bdd845f34f0dcc2b49349a5449d193d6341ddae68f15abf52257740fa1930_0","lines":"        logging.error(f\"Database error while deleting product {product_id}: {str(e)}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":162,"col":20,"offset":5430},"end":{"line":162,"col":30,"offset":5440}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":169,"col":23,"offset":5705},"end":{"line":169,"col":86,"offset":5768}},"f\"Database error while deleting product {product_id}: {str(e)}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":183,"col":5,"offset":6090},"end":{"line":183,"col":24,"offset":6109},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"dfe7ea82971bcc41e83ce2e4ae3ee891a53aa09a5ccf700df7e943a95f7b5406c611b772bafabacf2f128625c7e277eddbb47bac10efcc1201121f83248132eb_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_93_original.py","start":{"line":183,"col":5,"offset":6090},"end":{"line":183,"col":24,"offset":6109},"extra":{"metavars":{"$APP":{"start":{"line":183,"col":5,"offset":6090},"end":{"line":183,"col":8,"offset":6093},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":297},"svalue_end":{"line":9,"col":22,"offset":312},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"cac74c9880bc30f7c58740c6eba96bc9c5ff19081419e97afcf3b06bea23e532d1b57e12aa3c568f0dcd0775ba871169b1eb5f6e18c0a4f8de0dacd9b0d0a231_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":46,"col":17,"offset":1427},"end":{"line":47,"col":82,"offset":1599},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":35,"col":28,"offset":1049},"end":{"line":35,"col":32,"offset":1053},"abstract_content":"form"},"$ENGINE":{"start":{"line":45,"col":18,"offset":1385},"end":{"line":45,"col":24,"offset":1391},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":14,"col":10,"offset":437},"svalue_end":{"line":14,"col":53,"offset":480},"svalue_abstract_content":"create_engine(\"sqlite:///your_database.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":45,"col":18,"offset":1385},"end":{"line":45,"col":34,"offset":1401},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":46,"col":30,"offset":1440},"end":{"line":46,"col":106,"offset":1516},"abstract_content":"text(\"INSERT INTO users (username, password) VALUES (:username, :password)\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"c9e67ba837e9004347dbdfd15369aea685485ae2387c484d57b715b1e18db96108cb3f0354ba42cfb2e9b71e50832fe408e5c32dde421a58e897c9bbaf4d139e_0","lines":"                conn.execute(text(\"INSERT INTO users (username, password) VALUES (:username, :password)\"),\n                             {\"username\": username, \"password\": hashed_password})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":35,"col":20,"offset":1041},"end":{"line":35,"col":44,"offset":1065}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":35,"col":9,"offset":1030},"end":{"line":35,"col":17,"offset":1038}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":46,"col":17,"offset":1427},"end":{"line":47,"col":82,"offset":1599}},"conn.execute(text(\"INSERT INTO users (username, password) VALUES (:username, :password)\"),\n                             {\"username\": username, \"password\": hashed_password})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":50,"col":26,"offset":1727},"end":{"line":50,"col":60,"offset":1761},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":35,"col":28,"offset":1049},"end":{"line":35,"col":32,"offset":1053},"abstract_content":"form"},"$LOG":{"start":{"line":50,"col":21,"offset":1722},"end":{"line":50,"col":25,"offset":1726},"abstract_content":"info"},"$SINK":{"start":{"line":50,"col":26,"offset":1727},"end":{"line":50,"col":60,"offset":1761},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d20c125afc637fc47f1712ca213f3f70d5ba2275da126dd84fccd79e5ea32375752a2bc747d738cb0ace8cbd5b05f085df7b4104654a83d96d2d07d67cb2598d_0","lines":"            logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":35,"col":20,"offset":1041},"end":{"line":35,"col":44,"offset":1065}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":35,"col":9,"offset":1030},"end":{"line":35,"col":17,"offset":1038}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":50,"col":26,"offset":1727},"end":{"line":50,"col":60,"offset":1761}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":66,"col":26,"offset":2288},"end":{"line":66,"col":118,"offset":2380},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":61,"col":28,"offset":2137},"end":{"line":61,"col":32,"offset":2141},"abstract_content":"form"},"$ENGINE":{"start":{"line":65,"col":18,"offset":2237},"end":{"line":65,"col":24,"offset":2243},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":14,"col":10,"offset":437},"svalue_end":{"line":14,"col":53,"offset":480},"svalue_abstract_content":"create_engine(\"sqlite:///your_database.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":65,"col":18,"offset":2237},"end":{"line":65,"col":34,"offset":2253},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":66,"col":39,"offset":2301},"end":{"line":66,"col":93,"offset":2355},"abstract_content":"text(\"SELECT * FROM users WHERE username = :username\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"a90d14d683d22bfe87f1cfcb2cfb24c34130e6e26f33c1d600c4791c730c929a835f9234b48b3ee0b8bb252cc432d31c9b17cb11313060a2fd8cdd7c0a455e7e_0","lines":"                result = conn.execute(text(\"SELECT * FROM users WHERE username = :username\"), {\"username\": username})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":61,"col":20,"offset":2129},"end":{"line":61,"col":44,"offset":2153}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":61,"col":9,"offset":2118},"end":{"line":61,"col":17,"offset":2126}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":66,"col":26,"offset":2288},"end":{"line":66,"col":118,"offset":2380}},"conn.execute(text(\"SELECT * FROM users WHERE username = :username\"), {\"username\": username})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":71,"col":30,"offset":2573},"end":{"line":71,"col":59,"offset":2602},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":61,"col":28,"offset":2137},"end":{"line":61,"col":32,"offset":2141},"abstract_content":"form"},"$LOG":{"start":{"line":71,"col":25,"offset":2568},"end":{"line":71,"col":29,"offset":2572},"abstract_content":"info"},"$SINK":{"start":{"line":71,"col":30,"offset":2573},"end":{"line":71,"col":59,"offset":2602},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"9ade6d5a06c16ba35373391913f8ad8b43f49b6213e0d694d903d1c16d43a491dc98971790b05e91e334c1ef1f2b85d8a3c550b81e175021640fa75fb2c6f81e_0","lines":"                logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":61,"col":20,"offset":2129},"end":{"line":61,"col":44,"offset":2153}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":61,"col":9,"offset":2118},"end":{"line":61,"col":17,"offset":2126}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":71,"col":30,"offset":2573},"end":{"line":71,"col":59,"offset":2602}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":100,"col":22,"offset":3541},"end":{"line":100,"col":70,"offset":3589},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":92,"col":21,"offset":3273},"end":{"line":92,"col":25,"offset":3277},"abstract_content":"args"},"$ENGINE":{"start":{"line":99,"col":14,"offset":3494},"end":{"line":99,"col":20,"offset":3500},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":14,"col":10,"offset":437},"svalue_end":{"line":14,"col":53,"offset":480},"svalue_abstract_content":"create_engine(\"sqlite:///your_database.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":99,"col":14,"offset":3494},"end":{"line":99,"col":30,"offset":3510},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":100,"col":35,"offset":3554},"end":{"line":100,"col":44,"offset":3563},"abstract_content":"text(sql)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"e767cc783db6b938ab72aedec5ec9befeb70d0569303d2df327aa304f8c6d74215fb678295d156d37bc0b6651f0d719893485a32a2f31adb391534f35bc958c5_0","lines":"            result = conn.execute(text(sql), {\"query\": f\"%{query}%\"})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":92,"col":13,"offset":3265},"end":{"line":92,"col":42,"offset":3294}},"request.args.get('query', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":92,"col":5,"offset":3257},"end":{"line":92,"col":10,"offset":3262}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":100,"col":22,"offset":3541},"end":{"line":100,"col":70,"offset":3589}},"conn.execute(text(sql), {\"query\": f\"%{query}%\"})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":102,"col":22,"offset":3651},"end":{"line":102,"col":55,"offset":3684},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":92,"col":21,"offset":3273},"end":{"line":92,"col":25,"offset":3277},"abstract_content":"args"},"$LOG":{"start":{"line":102,"col":17,"offset":3646},"end":{"line":102,"col":21,"offset":3650},"abstract_content":"info"},"$SINK":{"start":{"line":102,"col":22,"offset":3651},"end":{"line":102,"col":55,"offset":3684},"abstract_content":"f\"Search query executed: {query}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"eb54b57f6929e564c7a0da59441da91be0c7fa6974dca9478dea29f6ff4aee5c5b7e8edfa9fb4cb95f274309a76c8fbf5289daf5fbfd9ff1872f88d9fd84a855_0","lines":"        logging.info(f\"Search query executed: {query}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":92,"col":13,"offset":3265},"end":{"line":92,"col":42,"offset":3294}},"request.args.get('query', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":92,"col":5,"offset":3257},"end":{"line":92,"col":10,"offset":3262}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":102,"col":22,"offset":3651},"end":{"line":102,"col":55,"offset":3684}},"f\"Search query executed: {query}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.nan-injection.nan-injection","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":121,"col":21,"offset":4352},"end":{"line":121,"col":33,"offset":4364},"extra":{"metavars":{"$SOMETHING":{"start":{"line":114,"col":25,"offset":4131},"end":{"line":114,"col":29,"offset":4135},"abstract_content":"form"}},"message":"Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.","metadata":{"references":["https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868","https://blog.bitdiscovery.com/2021/12/python-nan-injection/"],"category":"security","cwe":["CWE-704: Incorrect Type Conversion or Cast"],"technology":["flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection","shortlink":"https://sg.run/e598","semgrep.dev":{"rule":{"origin":"community","r_id":18276,"rule_id":"WAUdj7","rule_name":"python.flask.security.injection.nan-injection.nan-injection","rv_id":946222,"url":"https://semgrep.dev/playground/r/qkT4j85/python.flask.security.injection.nan-injection.nan-injection","version_id":"qkT4j85"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"f241c63e4c14f4c7fc3dbab1c75095db925364435ef6b4a36c383272b353175ab2930a2053f8a86f5bedb4357774b44ada22661f6d1442afa53368d32718973c_0","lines":"            price = float(price)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":114,"col":17,"offset":4123},"end":{"line":114,"col":38,"offset":4144}},"request.form['price']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":114,"col":9,"offset":4115},"end":{"line":114,"col":14,"offset":4120}},"content":"price"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":121,"col":21,"offset":4352},"end":{"line":121,"col":33,"offset":4364}},"float(price)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":128,"col":17,"offset":4580},"end":{"line":129,"col":61,"offset":4720},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":113,"col":24,"offset":4094},"end":{"line":113,"col":28,"offset":4098},"abstract_content":"form"},"$ENGINE":{"start":{"line":127,"col":18,"offset":4538},"end":{"line":127,"col":24,"offset":4544},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":14,"col":10,"offset":437},"svalue_end":{"line":14,"col":53,"offset":480},"svalue_abstract_content":"create_engine(\"sqlite:///your_database.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":127,"col":18,"offset":4538},"end":{"line":127,"col":34,"offset":4554},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":128,"col":30,"offset":4593},"end":{"line":128,"col":95,"offset":4658},"abstract_content":"text(\"INSERT INTO products (name, price) VALUES (:name, :price)\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"60695a731c2187967fa407d2b57bf8b48a9f81bbe6493c4d0c846a030d793f8f68310fe9c4efa8bef32a929a4cf0dfc52bde5935e419c51726e7a479a90888af_0","lines":"                conn.execute(text(\"INSERT INTO products (name, price) VALUES (:name, :price)\"),\n                             {\"name\": name, \"price\": price})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":113,"col":16,"offset":4086},"end":{"line":113,"col":36,"offset":4106}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":113,"col":9,"offset":4079},"end":{"line":113,"col":13,"offset":4083}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":128,"col":17,"offset":4580},"end":{"line":129,"col":61,"offset":4720}},"conn.execute(text(\"INSERT INTO products (name, price) VALUES (:name, :price)\"),\n                             {\"name\": name, \"price\": price})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":132,"col":26,"offset":4836},"end":{"line":132,"col":54,"offset":4864},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":113,"col":24,"offset":4094},"end":{"line":113,"col":28,"offset":4098},"abstract_content":"form"},"$LOG":{"start":{"line":132,"col":21,"offset":4831},"end":{"line":132,"col":25,"offset":4835},"abstract_content":"info"},"$SINK":{"start":{"line":132,"col":26,"offset":4836},"end":{"line":132,"col":54,"offset":4864},"abstract_content":"f\"New product added: {name}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c7d845cc185dd6df85573840b75fc6a08cfb6238c5a267a91c97dbecd2d9598f305bd39d59dc7d1af0691158a9322cb4ad48db352636b36f9db6ac2f42a6d1a0_0","lines":"            logging.info(f\"New product added: {name}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":113,"col":16,"offset":4086},"end":{"line":113,"col":36,"offset":4106}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":113,"col":9,"offset":4079},"end":{"line":113,"col":13,"offset":4083}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":132,"col":26,"offset":4836},"end":{"line":132,"col":54,"offset":4864}},"f\"New product added: {name}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":155,"col":22,"offset":5519},"end":{"line":155,"col":101,"offset":5598},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":147,"col":2,"offset":5298},"end":{"line":147,"col":5,"offset":5301},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":262},"svalue_end":{"line":8,"col":22,"offset":277},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":147,"col":6,"offset":5302},"end":{"line":147,"col":11,"offset":5307},"abstract_content":"route"},"$FUNC":{"start":{"line":149,"col":5,"offset":5361},"end":{"line":149,"col":16,"offset":5372},"abstract_content":"add_to_cart"},"$PARAM":{"start":{"line":149,"col":17,"offset":5373},"end":{"line":149,"col":27,"offset":5383},"abstract_content":"product_id"},"$ENGINE":{"start":{"line":154,"col":14,"offset":5472},"end":{"line":154,"col":20,"offset":5478},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":14,"col":10,"offset":437},"svalue_end":{"line":14,"col":53,"offset":480},"svalue_abstract_content":"create_engine(\"sqlite:///your_database.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":154,"col":14,"offset":5472},"end":{"line":154,"col":30,"offset":5488},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":155,"col":35,"offset":5532},"end":{"line":155,"col":80,"offset":5577},"abstract_content":"text(\"SELECT * FROM products WHERE id = :id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"80d49495f1dc185da17d9db6704aa5f149b2eba96dbeed1c8b463f01999baaa965674d76ac22f6a2f7de4496ded6415177920c9fe28ffb9e88aa42c28f36249d_0","lines":"            result = conn.execute(text(\"SELECT * FROM products WHERE id = :id\"), {\"id\": product_id})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":149,"col":17,"offset":5373},"end":{"line":149,"col":27,"offset":5383}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":149,"col":17,"offset":5373},"end":{"line":149,"col":27,"offset":5383}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":155,"col":22,"offset":5519},"end":{"line":155,"col":101,"offset":5598}},"conn.execute(text(\"SELECT * FROM products WHERE id = :id\"), {\"id\": product_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":162,"col":26,"offset":5834},"end":{"line":162,"col":69,"offset":5877},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":147,"col":2,"offset":5298},"end":{"line":147,"col":5,"offset":5301},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":262},"svalue_end":{"line":8,"col":22,"offset":277},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":147,"col":6,"offset":5302},"end":{"line":147,"col":11,"offset":5307},"abstract_content":"route"},"$FUNC":{"start":{"line":149,"col":5,"offset":5361},"end":{"line":149,"col":16,"offset":5372},"abstract_content":"add_to_cart"},"$PARAM":{"start":{"line":149,"col":17,"offset":5373},"end":{"line":149,"col":27,"offset":5383},"abstract_content":"product_id"},"$LOG":{"start":{"line":162,"col":21,"offset":5829},"end":{"line":162,"col":25,"offset":5833},"abstract_content":"info"},"$SINK":{"start":{"line":162,"col":26,"offset":5834},"end":{"line":162,"col":69,"offset":5877},"abstract_content":"f\"Product added to cart: {product['name']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"45101cda072f0b236806d59b6d2f7017d165dc6f5d1f38e1d58f2ebcb4dd89659d5b98f318fa152971e6d05e559d635032adaaf1dcdef59ddf98c26249b62dc8_0","lines":"            logging.info(f\"Product added to cart: {product['name']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":149,"col":17,"offset":5373},"end":{"line":149,"col":27,"offset":5383}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":149,"col":17,"offset":5373},"end":{"line":149,"col":27,"offset":5383}},"content":"product_id"},{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":155,"col":13,"offset":5510},"end":{"line":155,"col":19,"offset":5516}},"content":"result"},{"location":{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":156,"col":13,"offset":5611},"end":{"line":156,"col":20,"offset":5618}},"content":"product"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":162,"col":26,"offset":5834},"end":{"line":162,"col":69,"offset":5877}},"f\"Product added to cart: {product['name']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":204,"col":5,"offset":7272},"end":{"line":204,"col":24,"offset":7291},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"4d05c3631e0eb49ae80b43806f530fb6c11c1883022a66a674f52aeb6928fbb40c3bfd26e8c000fe2854a51269563a5addfab9d2ce19104c3f6850cae3223006_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-89/sample_95_original.py","start":{"line":204,"col":5,"offset":7272},"end":{"line":204,"col":24,"offset":7291},"extra":{"metavars":{"$APP":{"start":{"line":204,"col":5,"offset":7272},"end":{"line":204,"col":8,"offset":7275},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":262},"svalue_end":{"line":8,"col":22,"offset":277},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"72361dae9d11292528d8b997815e92b8d196c6b01004ca6483fedc893a247310f08a3c6cf131dfc5b8d2bd58fbb060e7d59b8d3b28d34a1d65745bde4fab506e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":88,"col":13,"offset":3048},"end":{"line":88,"col":76,"offset":3111},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":86,"col":23,"offset":2977},"end":{"line":86,"col":27,"offset":2981},"abstract_content":"args"},"$SQLSTR":{"start":{"line":88,"col":15,"offset":3050},"end":{"line":88,"col":65,"offset":3100},"abstract_content":"SELECT id, username, email FROM users WHERE id = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"a75ab2c1fbd675e4983ec3bdce282ab5fa0344ca230dcf15d730af2ab2d8013ccffbc49ca9a3071b5149b462c339fef8c9730b5613229b76abab925dc7395d99_0","lines":"    query = f\"SELECT id, username, email FROM users WHERE id = '{user_id}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":86,"col":15,"offset":2969},"end":{"line":86,"col":27,"offset":2981}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":86,"col":5,"offset":2959},"end":{"line":86,"col":12,"offset":2966}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":88,"col":13,"offset":3048},"end":{"line":88,"col":76,"offset":3111}},"f\"SELECT id, username, email FROM users WHERE id = '{user_id}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":88,"col":13,"offset":3048},"end":{"line":88,"col":76,"offset":3111},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$APP":{"start":{"line":84,"col":2,"offset":2903},"end":{"line":84,"col":5,"offset":2906},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":140},"svalue_end":{"line":9,"col":23,"offset":156},"svalue_abstract_content":"Sanic(\"UserApp\")"}},"$FUNC":{"start":{"line":85,"col":11,"offset":2936},"end":{"line":85,"col":19,"offset":2944},"abstract_content":"get_user"},"$ROUTEVAR":{"start":{"line":86,"col":15,"offset":2969},"end":{"line":86,"col":22,"offset":2976},"abstract_content":"request"},"$SQLSTR":{"start":{"line":88,"col":15,"offset":3050},"end":{"line":88,"col":65,"offset":3100},"abstract_content":"SELECT id, username, email FROM users WHERE id = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"e92c4dea0eaa2d52c40f708dac3e1f55e2a955a9b575210993de1bff0ef8c23692311150e84716bee7d1b75f85e9f59efc51b06f59bf762f607c4f504ba0d183_0","lines":"    query = f\"SELECT id, username, email FROM users WHERE id = '{user_id}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":86,"col":15,"offset":2969},"end":{"line":86,"col":22,"offset":2976}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":86,"col":5,"offset":2959},"end":{"line":86,"col":12,"offset":2966}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":88,"col":13,"offset":3048},"end":{"line":88,"col":76,"offset":3111}},"f\"SELECT id, username, email FROM users WHERE id = '{user_id}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":89,"col":5,"offset":3116},"end":{"line":89,"col":26,"offset":3137},"extra":{"metavars":{"$X":{"start":{"line":88,"col":66,"offset":3101},"end":{"line":88,"col":73,"offset":3108},"abstract_content":"user_id","propagated_value":{"svalue_start":{"line":86,"col":15,"offset":2969},"svalue_end":{"line":86,"col":45,"offset":2999},"svalue_abstract_content":"request.args.get('user_id')[0]"}},"$DB":{"start":{"line":89,"col":5,"offset":3116},"end":{"line":89,"col":11,"offset":3122},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":87,"col":14,"offset":3013},"svalue_end":{"line":87,"col":36,"offset":3035},"svalue_abstract_content":"db_connection.cursor()"}},"$SQL":{"start":{"line":89,"col":20,"offset":3131},"end":{"line":89,"col":25,"offset":3136},"abstract_content":"query","propagated_value":{"svalue_start":{"line":88,"col":13,"offset":3048},"svalue_end":{"line":88,"col":76,"offset":3111},"svalue_abstract_content":"f\"SELECT id, username, email FROM users WHERE id = '{user_id}'\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"e89f0113094088caa7784fcb6fce16ff27168603efa4d80e6c554d5410e5ecb60fb6a6d2c61ddf8d39a9e3e62340439b784e1400a8ce605a90cc9629c8e03274_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":89,"col":5,"offset":3116},"end":{"line":89,"col":26,"offset":3137},"extra":{"metavars":{"$CONNECTION":{"start":{"line":89,"col":5,"offset":3116},"end":{"line":89,"col":11,"offset":3122},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":87,"col":14,"offset":3013},"svalue_end":{"line":87,"col":36,"offset":3035},"svalue_abstract_content":"db_connection.cursor()"}},"$QUERY":{"start":{"line":89,"col":20,"offset":3131},"end":{"line":89,"col":25,"offset":3136},"abstract_content":"query","propagated_value":{"svalue_start":{"line":88,"col":13,"offset":3048},"svalue_end":{"line":88,"col":76,"offset":3111},"svalue_abstract_content":"f\"SELECT id, username, email FROM users WHERE id = '{user_id}'\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"358c413e301b274ffaa9de2d890e03122925e1bc351e03936880c5c38cbec0b751ff812f0025e452b7e33beb7d40248189315639e6dd8947bc6762a9187dc0a2_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-89/sample_97_original.py","start":{"line":174,"col":5,"offset":6689},"end":{"line":174,"col":39,"offset":6723},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"7594d48f0ecff8f1c580713e45df15204887186e58e7081108e387582476cab194094bdbf505a312358b96e8089baa9d479f8b7b462645e21b5b0642d5f24097_0","lines":"    app.run(host=\"0.0.0.0\", port=8000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":55,"col":26,"offset":1776},"end":{"line":55,"col":60,"offset":1810},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":49,"col":28,"offset":1530},"end":{"line":49,"col":32,"offset":1534},"abstract_content":"form"},"$LOG":{"start":{"line":55,"col":21,"offset":1771},"end":{"line":55,"col":25,"offset":1775},"abstract_content":"info"},"$SINK":{"start":{"line":55,"col":26,"offset":1776},"end":{"line":55,"col":60,"offset":1810},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1b15e1478977cd35d2b36763c692d40f1d93f8c1ac67cfb7a14fb2f9979adc68c5ffa4076ef022a810414cd1fbbaf4f937e1fb4746b9c962722f2b9f62169426_0","lines":"            logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":49,"col":20,"offset":1522},"end":{"line":49,"col":44,"offset":1546}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":49,"col":9,"offset":1511},"end":{"line":49,"col":17,"offset":1519}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":55,"col":26,"offset":1776},"end":{"line":55,"col":60,"offset":1810}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":71,"col":26,"offset":2441},"end":{"line":71,"col":55,"offset":2470},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":64,"col":28,"offset":2111},"end":{"line":64,"col":32,"offset":2115},"abstract_content":"form"},"$LOG":{"start":{"line":71,"col":21,"offset":2436},"end":{"line":71,"col":25,"offset":2440},"abstract_content":"info"},"$SINK":{"start":{"line":71,"col":26,"offset":2441},"end":{"line":71,"col":55,"offset":2470},"abstract_content":"f\"User logged in: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"1f6fb398bdb0030cb2421c2b2b68fd33169c896a727bb2824325c386f5346496424a43f06b0926faa9762977adfe645c31ea34db2095a1e7ca592df291d52663_0","lines":"            logging.info(f\"User logged in: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":64,"col":20,"offset":2103},"end":{"line":64,"col":44,"offset":2127}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":64,"col":9,"offset":2092},"end":{"line":64,"col":17,"offset":2100}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":71,"col":26,"offset":2441},"end":{"line":71,"col":55,"offset":2470}},"f\"User logged in: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":156,"col":5,"offset":5449},"end":{"line":156,"col":24,"offset":5468},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5eed67122b7e0d79494e3173ab5433af24b47e675d6e6e7f5b6d252781e50b233f871c6ff1b021c52b5d9801682795bd78e5353a0e31d586ab87202ab8aa6d16_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-93/sample_182_original.py","start":{"line":156,"col":5,"offset":5449},"end":{"line":156,"col":24,"offset":5468},"extra":{"metavars":{"$APP":{"start":{"line":156,"col":5,"offset":5449},"end":{"line":156,"col":8,"offset":5452},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":174},"svalue_end":{"line":8,"col":22,"offset":189},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"a3c6a7db95bb3e8e0b03c3cc08c5a16f90275e37dfe40c9f0363dc3fd7cb431fa726cded7aebf7f134ba90586ec84ca9641888e6735e8bf8a4ce02cde2553c9a_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":33,"col":26,"offset":1080},"end":{"line":33,"col":54,"offset":1108},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":26,"col":28,"offset":748},"end":{"line":26,"col":32,"offset":752},"abstract_content":"form"},"$LOG":{"start":{"line":33,"col":21,"offset":1075},"end":{"line":33,"col":25,"offset":1079},"abstract_content":"info"},"$SINK":{"start":{"line":33,"col":26,"offset":1080},"end":{"line":33,"col":54,"offset":1108},"abstract_content":"f\"User {username} logged in\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"da7bea42a8d7229555eb3117f09beffa38457008614d6dc60fd76400ae42f2736d8b34697661adc3fe2b7c4076af791d295fa4956f3dbab88506f754e427c6f5_0","lines":"            logging.info(f\"User {username} logged in\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":26,"col":20,"offset":740},"end":{"line":26,"col":44,"offset":764}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":26,"col":9,"offset":729},"end":{"line":26,"col":17,"offset":737}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":33,"col":26,"offset":1080},"end":{"line":33,"col":54,"offset":1108}},"f\"User {username} logged in\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":48,"col":26,"offset":1667},"end":{"line":48,"col":60,"offset":1701},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":41,"col":28,"offset":1374},"end":{"line":41,"col":32,"offset":1378},"abstract_content":"form"},"$LOG":{"start":{"line":48,"col":21,"offset":1662},"end":{"line":48,"col":25,"offset":1666},"abstract_content":"info"},"$SINK":{"start":{"line":48,"col":26,"offset":1667},"end":{"line":48,"col":60,"offset":1701},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7922d3435dbb2cd2edbec9540e32f565e3029ee5245f6bd9c7e21372bb8a09ab24fef3308645d7c6b14b791daf2e32e6169c3a81bbda3cbe095eebb0f1187d6a_0","lines":"            logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":41,"col":20,"offset":1366},"end":{"line":41,"col":44,"offset":1390}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":41,"col":9,"offset":1355},"end":{"line":41,"col":17,"offset":1363}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":48,"col":26,"offset":1667},"end":{"line":48,"col":60,"offset":1701}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":80,"col":25,"offset":2860},"end":{"line":80,"col":78,"offset":2913},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":73,"col":2,"offset":2514},"end":{"line":73,"col":5,"offset":2517},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":231},"svalue_end":{"line":8,"col":22,"offset":246},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":73,"col":6,"offset":2518},"end":{"line":73,"col":11,"offset":2523},"abstract_content":"route"},"$FUNC":{"start":{"line":74,"col":5,"offset":2550},"end":{"line":74,"col":14,"offset":2559},"abstract_content":"view_note"},"$PARAM":{"start":{"line":74,"col":15,"offset":2560},"end":{"line":74,"col":20,"offset":2565},"abstract_content":"title"},"$LOG":{"start":{"line":80,"col":17,"offset":2852},"end":{"line":80,"col":24,"offset":2859},"abstract_content":"warning"},"$SINK":{"start":{"line":80,"col":25,"offset":2860},"end":{"line":80,"col":78,"offset":2913},"abstract_content":"f\"Attempted to access invalid file path: {file_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"096900569bc7e1b19d19ab1bec4402ff11ae70a17e542776c2155b5bebd88444d673fdfc2d451a7680246e5654fd3a066e7d4161f8de67bdcbc73b58c5b05868_0","lines":"        logging.warning(f\"Attempted to access invalid file path: {file_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":74,"col":15,"offset":2560},"end":{"line":74,"col":20,"offset":2565}},"title"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":74,"col":15,"offset":2560},"end":{"line":74,"col":20,"offset":2565}},"content":"title"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":78,"col":5,"offset":2707},"end":{"line":78,"col":14,"offset":2716}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":80,"col":25,"offset":2860},"end":{"line":80,"col":78,"offset":2913}},"f\"Attempted to access invalid file path: {file_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.request-data-write.request-data-write","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":95,"col":9,"offset":3415},"end":{"line":105,"col":37,"offset":4033},"extra":{"metavars":{"$DATA":{"start":{"line":95,"col":9,"offset":3415},"end":{"line":95,"col":21,"offset":3427},"abstract_content":"note_content"},"$W":{"start":{"line":95,"col":32,"offset":3438},"end":{"line":95,"col":36,"offset":3442},"abstract_content":"form"},"$F":{"start":{"line":105,"col":13,"offset":4009},"end":{"line":105,"col":17,"offset":4013},"abstract_content":"file","propagated_value":{"svalue_start":{"line":104,"col":14,"offset":3967},"svalue_end":{"line":104,"col":34,"offset":3987},"svalue_abstract_content":"open(file_path'w')"}}},"message":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.","metadata":{"cwe":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"],"owasp":["A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","shortlink":"https://sg.run/0Q6j","semgrep.dev":{"rule":{"origin":"community","r_id":9498,"rule_id":"ReUg5z","rule_name":"python.django.security.injection.request-data-write.request-data-write","rv_id":946183,"url":"https://semgrep.dev/playground/r/zyTlkEY/python.django.security.injection.request-data-write.request-data-write","version_id":"zyTlkEY"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c731d8c155bff5320450f40f43015089ea38349636f14b7447317772d6451773535c60be3443f9ecf52546fae79c87f51871219867d626e2807b6f18c9eb0b32_0","lines":"        note_content = request.form.get('note')\n        note_title = request.form.get('title')\n        note_title_path = Path(note_title).name \n        notes_directory = Path(f'./notes/{session[\"user_id\"]}')\n        notes_directory.mkdir(parents=True, exist_ok=True)\n        file_path = notes_directory / f\"{note_title_path}.txt\"\n        if not os.path.abspath(file_path).startswith(os.path.abspath(notes_directory)):\n            logging.warning(f\"Attempted to write to invalid file path: {file_path}\")\n            return \"Invalid file path\", 400\n        with open(file_path, 'w') as file:\n            file.write(note_content)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":102,"col":29,"offset":3853},"end":{"line":102,"col":84,"offset":3908},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":30,"offset":3484},"end":{"line":96,"col":34,"offset":3488},"abstract_content":"form"},"$LOG":{"start":{"line":102,"col":21,"offset":3845},"end":{"line":102,"col":28,"offset":3852},"abstract_content":"warning"},"$SINK":{"start":{"line":102,"col":29,"offset":3853},"end":{"line":102,"col":84,"offset":3908},"abstract_content":"f\"Attempted to write to invalid file path: {file_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"f5d5ad77f713bc5de57ea724c54a7eb5b91b91fa70e934b9bc492d64be766acc45c757ab6bb0a0049f3d7ca5ab05abb22425e2348662a26e48f48c7850ce2ec0_0","lines":"            logging.warning(f\"Attempted to write to invalid file path: {file_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":96,"col":22,"offset":3476},"end":{"line":96,"col":47,"offset":3501}},"request.form.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":96,"col":9,"offset":3463},"end":{"line":96,"col":19,"offset":3473}},"content":"note_title"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":97,"col":9,"offset":3510},"end":{"line":97,"col":24,"offset":3525}},"content":"note_title_path"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":100,"col":9,"offset":3682},"end":{"line":100,"col":18,"offset":3691}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":102,"col":29,"offset":3853},"end":{"line":102,"col":84,"offset":3908}},"f\"Attempted to write to invalid file path: {file_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":104,"col":19,"offset":3972},"end":{"line":104,"col":28,"offset":3981},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":30,"offset":3484},"end":{"line":96,"col":34,"offset":3488},"abstract_content":"form"},"$SINK":{"start":{"line":104,"col":19,"offset":3972},"end":{"line":104,"col":28,"offset":3981},"abstract_content":"file_path","propagated_value":{"svalue_start":{"line":100,"col":21,"offset":3694},"svalue_end":{"line":100,"col":63,"offset":3736},"svalue_abstract_content":"notes_directory/f\"{note_title_path}.txt\""}}},"message":"The application builds a file path from potentially untrusted data, which can lead to a path traversal vulnerability. An attacker can manipulate the path which the application uses to access files. If the application does not validate user input and sanitize file paths, sensitive files such as configuration or user data can be accessed, potentially creating or overwriting files. In Flask apps, consider using the Werkzeug util `werkzeug.utils.secure_filename()` to sanitize paths and filenames.","metadata":{"likelihood":"MEDIUM","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"Path Traversal with Flask","functional-categories":["file::sink::file-access::fileinput","file::sink::file-access::io","file::sink::file-access::linecache","file::sink::file-access::os","file::sink::file-access::shutil","file::sink::file-access::stdlib","file::sink::file-access::stdlib2","file::sink::file-access::stdlib3","file::sink::file-access::tempfile","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2021 - Broken Access Control","A05:2017 - Broken Access Control"],"references":["https://flask.palletsprojects.com/en/2.3.x/patterns/fileuploads/","https://owasp.org/Top10/A01_2021-Broken_Access_Control","https://owasp.org/www-community/attacks/Path_Traversal","https://portswigger.net/web-security/file-path-traversal","https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.utils.secure_filename"],"technology":["codecs","fileaccess","fileinput","flask","flask-wtf","io","linecache","os","shutil","stdlib","stdlib2","stdlib3","tempfile","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Path Traversal"],"source":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","shortlink":"https://sg.run/6J4gW","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116515,"rule_id":"2ZUzRLQ","rule_name":"python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","rv_id":947936,"url":"https://semgrep.dev/playground/r/WrTEZDz/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","version_id":"WrTEZDz"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.file.tainted-path-traversal-stdlib-flask.tainted-path-traversal-stdlib-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"5f62765ed0fa10f0ae59efb00e0b1f157487d7cea647b418ee1e56a257caf961db0fa4a504ba13cc0c7aef7676b11d51fd345f942ddb85eec239fed2cee07a29_0","lines":"        with open(file_path, 'w') as file:","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":96,"col":22,"offset":3476},"end":{"line":96,"col":47,"offset":3501}},"request.form.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":96,"col":9,"offset":3463},"end":{"line":96,"col":19,"offset":3473}},"content":"note_title"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":97,"col":9,"offset":3510},"end":{"line":97,"col":24,"offset":3525}},"content":"note_title_path"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":100,"col":9,"offset":3682},"end":{"line":100,"col":18,"offset":3691}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":104,"col":19,"offset":3972},"end":{"line":104,"col":28,"offset":3981}},"file_path"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":106,"col":22,"offset":4055},"end":{"line":106,"col":80,"offset":4113},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":96,"col":30,"offset":3484},"end":{"line":96,"col":34,"offset":3488},"abstract_content":"form"},"$LOG":{"start":{"line":106,"col":17,"offset":4050},"end":{"line":106,"col":21,"offset":4054},"abstract_content":"info"},"$SINK":{"start":{"line":106,"col":22,"offset":4055},"end":{"line":106,"col":80,"offset":4113},"abstract_content":"f\"User {session['user_id']} wrote note: {note_title_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"594de240892a9f8b4e0f9f93527b407990e6f20f7f44c89e564bb3e9f3eafa4527098af7dadd61887821ec58279333e95b7ea10cd41096cfb30e020f6df6fffd_0","lines":"        logging.info(f\"User {session['user_id']} wrote note: {note_title_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":96,"col":22,"offset":3476},"end":{"line":96,"col":47,"offset":3501}},"request.form.get('title')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":96,"col":9,"offset":3463},"end":{"line":96,"col":19,"offset":3473}},"content":"note_title"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":97,"col":9,"offset":3510},"end":{"line":97,"col":24,"offset":3525}},"content":"note_title_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":106,"col":22,"offset":4055},"end":{"line":106,"col":80,"offset":4113}},"f\"User {session['user_id']} wrote note: {note_title_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":118,"col":25,"offset":4601},"end":{"line":118,"col":78,"offset":4654},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":111,"col":2,"offset":4251},"end":{"line":111,"col":5,"offset":4254},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":231},"svalue_end":{"line":8,"col":22,"offset":246},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":111,"col":6,"offset":4255},"end":{"line":111,"col":11,"offset":4260},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":4289},"end":{"line":112,"col":16,"offset":4300},"abstract_content":"delete_note"},"$PARAM":{"start":{"line":112,"col":17,"offset":4301},"end":{"line":112,"col":22,"offset":4306},"abstract_content":"title"},"$LOG":{"start":{"line":118,"col":17,"offset":4593},"end":{"line":118,"col":24,"offset":4600},"abstract_content":"warning"},"$SINK":{"start":{"line":118,"col":25,"offset":4601},"end":{"line":118,"col":78,"offset":4654},"abstract_content":"f\"Attempted to delete invalid file path: {file_path}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a0cdd9307f018c7877dbd94999d82c8e8c9b2d78bb120fa5042fe098cfd9bfa9170d46ac36e599c1b804b63dd8c875bf4b9269f9e57113e0c3e24fd6f52dddfa_0","lines":"        logging.warning(f\"Attempted to delete invalid file path: {file_path}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":112,"col":17,"offset":4301},"end":{"line":112,"col":22,"offset":4306}},"title"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":112,"col":17,"offset":4301},"end":{"line":112,"col":22,"offset":4306}},"content":"title"},{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":116,"col":5,"offset":4448},"end":{"line":116,"col":14,"offset":4457}},"content":"file_path"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":118,"col":25,"offset":4601},"end":{"line":118,"col":78,"offset":4654}},"f\"Attempted to delete invalid file path: {file_path}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":122,"col":22,"offset":4755},"end":{"line":122,"col":72,"offset":4805},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":111,"col":2,"offset":4251},"end":{"line":111,"col":5,"offset":4254},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":231},"svalue_end":{"line":8,"col":22,"offset":246},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":111,"col":6,"offset":4255},"end":{"line":111,"col":11,"offset":4260},"abstract_content":"route"},"$FUNC":{"start":{"line":112,"col":5,"offset":4289},"end":{"line":112,"col":16,"offset":4300},"abstract_content":"delete_note"},"$PARAM":{"start":{"line":112,"col":17,"offset":4301},"end":{"line":112,"col":22,"offset":4306},"abstract_content":"title"},"$LOG":{"start":{"line":122,"col":17,"offset":4750},"end":{"line":122,"col":21,"offset":4754},"abstract_content":"info"},"$SINK":{"start":{"line":122,"col":22,"offset":4755},"end":{"line":122,"col":72,"offset":4805},"abstract_content":"f\"User {session['user_id']} deleted note: {title}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a86f9b3e9ea579d246140bc11fed6454a30ad012cb8720d947195b5fc79bbbceea42ccbea362404aceff64812b4bdd935320c5a5310043b23027efd3159b58ce_0","lines":"        logging.info(f\"User {session['user_id']} deleted note: {title}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":112,"col":17,"offset":4301},"end":{"line":112,"col":22,"offset":4306}},"title"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":112,"col":17,"offset":4301},"end":{"line":112,"col":22,"offset":4306}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":122,"col":22,"offset":4755},"end":{"line":122,"col":72,"offset":4805}},"f\"User {session['user_id']} deleted note: {title}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":147,"col":5,"offset":5491},"end":{"line":147,"col":24,"offset":5510},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ec662707e88b6a0447b04cf1e2cbd82703749e78f1e434ffb6b3831439e8b2004388e80baeb8104ebea36c4ddc8b47862fa2b32bf19013a0bf96e8a62d793590_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-93/sample_183_original.py","start":{"line":147,"col":5,"offset":5491},"end":{"line":147,"col":24,"offset":5510},"extra":{"metavars":{"$APP":{"start":{"line":147,"col":5,"offset":5491},"end":{"line":147,"col":8,"offset":5494},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":231},"svalue_end":{"line":8,"col":22,"offset":246},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"a3c0121d6f6ef10cde912beff7bbd30d84f1057325d458dafb10dd4dc3ff037b1c796434756c0e07d0aa1ab71e56049fb54bd9b8f926e616598780b83537b29c_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","path":"vulnerability_samples/CWE-93/sample_98_original.py","start":{"line":68,"col":20,"offset":2846},"end":{"line":68,"col":52,"offset":2878},"extra":{"metavars":{},"message":"Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render","https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","shortlink":"https://sg.run/EknN","semgrep.dev":{"rule":{"origin":"community","r_id":9481,"rule_id":"PeUZgE","rule_name":"python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","rv_id":946150,"url":"https://semgrep.dev/playground/r/gETe1K0/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","version_id":"gETe1K0"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"555b61ffa884d0400ba8aa85ceaf9fb89f581c0f0a102adb6834e13899d768691ed2d8696327835caad610423a45c395e12a562937d14d25816d5223856a9d82_0","lines":"            return HttpResponse(str(e), status=400)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-93/sample_98_original.py","start":{"line":127,"col":1,"offset":5273},"end":{"line":141,"col":69,"offset":6116},"extra":{"metavars":{"$R":{"start":{"line":128,"col":5,"offset":5290},"end":{"line":128,"col":19,"offset":5304},"abstract_content":"api_blog_posts"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"072862fd03270de7c3ddced2d0fd35f383504e871f1a42f80a3b39c284fcda55fd45767bcd4f49a232032b6776c4f05712cac4b33ec5b5d5b050ec995072542e_0","lines":"@csrf_exempt\ndef api_blog_posts(request):\n    if request.method == 'GET':\n        posts = BlogPost.objects.all().values('id', 'title', 'author__username', 'created_at')\n        return JsonResponse(list(posts), safe=False)\n    elif request.method == 'POST':\n        if not request.user.is_authenticated:\n            return JsonResponse({\"error\": \"Authentication required\"}, status=401)\n        title = request.POST.get('title')\n        content = request.POST.get('content')\n        if title and content:\n            post = BlogPost.objects.create(title=title, content=content, author=request.user)\n            return JsonResponse({\"id\": post.id, \"message\": \"Blog post created\"}, status=201)\n        return JsonResponse({\"error\": \"Title and content are required\"}, status=400)\n    return JsonResponse({\"error\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":53,"col":26,"offset":1685},"end":{"line":53,"col":54,"offset":1713},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":46,"col":28,"offset":1379},"end":{"line":46,"col":32,"offset":1383},"abstract_content":"form"},"$LOG":{"start":{"line":53,"col":21,"offset":1680},"end":{"line":53,"col":25,"offset":1684},"abstract_content":"info"},"$SINK":{"start":{"line":53,"col":26,"offset":1685},"end":{"line":53,"col":54,"offset":1713},"abstract_content":"f\"User {username} logged in\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d15f62e90a979895731e3173e7c9ab2f364ce05ed5583dd71bddc8146557cb9514e944bde2dba32c2f519371e86d3a6f3a4547bd0d2c5a7899492715e443f1de_0","lines":"            logging.info(f\"User {username} logged in\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":46,"col":20,"offset":1371},"end":{"line":46,"col":44,"offset":1395}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":46,"col":9,"offset":1360},"end":{"line":46,"col":17,"offset":1368}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":53,"col":26,"offset":1685},"end":{"line":53,"col":54,"offset":1713}},"f\"User {username} logged in\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":55,"col":25,"offset":1789},"end":{"line":55,"col":73,"offset":1837},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":46,"col":28,"offset":1379},"end":{"line":46,"col":32,"offset":1383},"abstract_content":"form"},"$LOG":{"start":{"line":55,"col":17,"offset":1781},"end":{"line":55,"col":24,"offset":1788},"abstract_content":"warning"},"$SINK":{"start":{"line":55,"col":25,"offset":1789},"end":{"line":55,"col":73,"offset":1837},"abstract_content":"f\"Failed login attempt for username: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"770d0f9a8170e392d4c6acb9e87a84527fb817a2c4a64d4a549271db7d0a3726ee5c6819686723310f0e54a091c432847eb330a56bcacef3da2c6b506dbcb4ab_0","lines":"        logging.warning(f\"Failed login attempt for username: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":46,"col":20,"offset":1371},"end":{"line":46,"col":44,"offset":1395}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":46,"col":9,"offset":1360},"end":{"line":46,"col":17,"offset":1368}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":55,"col":25,"offset":1789},"end":{"line":55,"col":73,"offset":1837}},"f\"Failed login attempt for username: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":68,"col":26,"offset":2326},"end":{"line":68,"col":60,"offset":2360},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":62,"col":28,"offset":2080},"end":{"line":62,"col":32,"offset":2084},"abstract_content":"form"},"$LOG":{"start":{"line":68,"col":21,"offset":2321},"end":{"line":68,"col":25,"offset":2325},"abstract_content":"info"},"$SINK":{"start":{"line":68,"col":26,"offset":2326},"end":{"line":68,"col":60,"offset":2360},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"aeb0a45d9e946f536068137b2c2378b6bf275750152b5d916d4829db80ff2d445f0ad85476bb7faf658e5bf3d5bfde95e4e2e2cdcd64377fcf93cc950522030b_0","lines":"            logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":62,"col":20,"offset":2072},"end":{"line":62,"col":44,"offset":2096}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":62,"col":9,"offset":2061},"end":{"line":62,"col":17,"offset":2069}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":68,"col":26,"offset":2326},"end":{"line":68,"col":60,"offset":2360}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.request-data-write.request-data-write","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":85,"col":9,"offset":2847},"end":{"line":87,"col":26,"offset":2943},"extra":{"metavars":{"$DATA":{"start":{"line":85,"col":9,"offset":2847},"end":{"line":85,"col":13,"offset":2851},"abstract_content":"data"},"$W":{"start":{"line":85,"col":24,"offset":2862},"end":{"line":85,"col":28,"offset":2866},"abstract_content":"form"},"$F":{"start":{"line":87,"col":13,"offset":2930},"end":{"line":87,"col":14,"offset":2931},"abstract_content":"f","propagated_value":{"svalue_start":{"line":86,"col":14,"offset":2888},"svalue_end":{"line":86,"col":37,"offset":2911},"svalue_abstract_content":"open('output.txt''w')"}}},"message":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.","metadata":{"cwe":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"],"owasp":["A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","shortlink":"https://sg.run/0Q6j","semgrep.dev":{"rule":{"origin":"community","r_id":9498,"rule_id":"ReUg5z","rule_name":"python.django.security.injection.request-data-write.request-data-write","rv_id":946183,"url":"https://semgrep.dev/playground/r/zyTlkEY/python.django.security.injection.request-data-write.request-data-write","version_id":"zyTlkEY"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f1c85b049609c994c7cd9d28d0d131f9f41ea5ef7aa0ec9f6e413dcbb35b15d4f64cdd68f4eb1d20731c13779f909fef3e2075f3ff944a402af89d11059a2a29_0","lines":"        data = request.form['data']\n        with open('output.txt', 'w') as f:\n            f.write(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":145,"col":18,"offset":4944},"end":{"line":145,"col":45,"offset":4971},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":85,"col":24,"offset":2862},"end":{"line":85,"col":28,"offset":2866},"abstract_content":"form"},"$LOG":{"start":{"line":145,"col":13,"offset":4939},"end":{"line":145,"col":17,"offset":4943},"abstract_content":"info"},"$SINK":{"start":{"line":145,"col":18,"offset":4944},"end":{"line":145,"col":45,"offset":4971},"abstract_content":"f\"User {user_id}: {action}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d17c9167ebf6511b4cf358bb889e8de20a1b29311f191d6b3476d28a02e665b551f535dcbda36f8d03d49e132551262d8cf2bca52ac7a120ea3545af5552d078_0","lines":"    logging.info(f\"User {user_id}: {action}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":85,"col":16,"offset":2854},"end":{"line":85,"col":36,"offset":2874}},"request.form['data']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":85,"col":9,"offset":2847},"end":{"line":85,"col":13,"offset":2851}},"content":"data"}],"taint_sink":["CliCall",[[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":88,"col":9,"offset":2952},"end":{"line":88,"col":19,"offset":2962}},"log_action"],[{"location":{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":140,"col":25,"offset":4783},"end":{"line":140,"col":31,"offset":4789}},"content":"action"}],["CliLoc",[{"path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":145,"col":18,"offset":4944},"end":{"line":145,"col":45,"offset":4971}},"f\"User {user_id}: {action}\""]]]]},"engine_kind":["PRO_REQUIRED",{"interproc_taint":true,"interfile_taint":false,"proprietary_language":false}]}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":158,"col":5,"offset":5262},"end":{"line":158,"col":24,"offset":5281},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3c0c498477d5ec456cd4296cf57966b7c480e24c95da0465deeec201f9da56140e7b42495d78313e675cea5215829f3301fa69d43a6ba88f559da76e80d18a7e_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-93/sample_99_original.py","start":{"line":158,"col":5,"offset":5262},"end":{"line":158,"col":24,"offset":5281},"extra":{"metavars":{"$APP":{"start":{"line":158,"col":5,"offset":5262},"end":{"line":158,"col":8,"offset":5265},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":236},"svalue_end":{"line":8,"col":22,"offset":251},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"06ab2c052dbcead5781a9a0bcb91250ce7faf20f37de2917f72acd9dabea6ecedacbf4d1c4b2beecacfcfc31fa34e4f8c885d2bcb9d09117b2f36da860436c18_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection","path":"vulnerability_samples/CWE-943/sample_184_original.py","start":{"line":23,"col":69,"offset":517},"end":{"line":23,"col":81,"offset":529},"extra":{"metavars":{"$HANDLER":{"start":{"line":17,"col":5,"offset":288},"end":{"line":17,"col":15,"offset":298},"abstract_content":"query_data"},"$TABLE":{"start":{"line":23,"col":20,"offset":468},"end":{"line":23,"col":28,"offset":476},"abstract_content":"dynamodb","propagated_value":{"svalue_start":{"line":11,"col":12,"offset":191},"svalue_end":{"line":11,"col":36,"offset":215},"svalue_abstract_content":"boto3.client('dynamodb')"}},"$SINK":{"start":{"line":23,"col":69,"offset":517},"end":{"line":23,"col":81,"offset":529},"abstract_content":"query_filter","propagated_value":{"svalue_start":{"line":18,"col":20,"offset":335},"svalue_end":{"line":18,"col":45,"offset":360},"svalue_abstract_content":"event.get('query_filter')"}}},"message":"Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.","metadata":{"cwe":["CWE-943: Improper Neutralization of Special Elements in Data Query Logic"],"owasp":["A01:2017 - Injection"],"category":"security","technology":["python","boto3","aws-lambda","dynamodb"],"references":["https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection","shortlink":"https://sg.run/jjrl","semgrep.dev":{"rule":{"origin":"community","r_id":21321,"rule_id":"KxUJ2B","rule_name":"python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection","rv_id":946088,"url":"https://semgrep.dev/playground/r/9lTy1rQ/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection","version_id":"9lTy1rQ"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"a4641f3d892f2a527295e3fdbebeb8613fde097d4a5f77e91f20c6a34a4fbf719b0c9bff237769b0b4c972ea502c7e8d5d6dd2ba0b09ccfe4ad17248b869f30f_0","lines":"        response = dynamodb.query(TableName=TABLE_NAME, QueryFilter=query_filter)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-943/sample_184_original.py","start":{"line":18,"col":20,"offset":335},"end":{"line":18,"col":25,"offset":340}},"event"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-943/sample_184_original.py","start":{"line":18,"col":5,"offset":320},"end":{"line":18,"col":17,"offset":332}},"content":"query_filter"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-943/sample_184_original.py","start":{"line":23,"col":69,"offset":517},"end":{"line":23,"col":81,"offset":529}},"query_filter"]]},"engine_kind":"PRO"}},{"check_id":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":55,"col":19,"offset":1483},"end":{"line":55,"col":73,"offset":1537},"extra":{"metavars":{},"message":"Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)","metadata":{"cwe":["CWE-522: Insufficiently Protected Credentials"],"owasp":["A02:2017 - Broken Authentication","A04:2021 - Insecure Design"],"references":["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"],"category":"security","technology":["jwt"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cryptographic Issues"],"source":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","shortlink":"https://sg.run/l2E9","semgrep.dev":{"rule":{"origin":"community","r_id":9557,"rule_id":"X5U8P5","rule_name":"python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","rv_id":1024162,"url":"https://semgrep.dev/playground/r/yeT2Rke/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","version_id":"yeT2Rke"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"ERROR","fingerprint":"35c66828a7c0bb830648ede4e3898a337df23e6be66056f2ef149020a847b85946de672803fdffcf812841ab51faed1c136047809055e7993991b255978d1108_0","lines":"    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":55,"col":19,"offset":1483},"end":{"line":55,"col":73,"offset":1537},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":55,"col":30,"offset":1494},"end":{"line":55,"col":39,"offset":1503},"abstract_content":"to_encode"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"0d48befb16d316c7647151e4b56ed9975dea378bc1116bf1c405dcd5c12b49e0609212d875f56d9bf1ac8d0f0d91d9667a37bf378487567da4003b8275ebf9be_0","lines":"    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.request-data-write.request-data-write","path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":117,"col":5,"offset":4228},"end":{"line":120,"col":22,"offset":4352},"extra":{"metavars":{"$DATA":{"start":{"line":117,"col":5,"offset":4228},"end":{"line":117,"col":9,"offset":4232},"abstract_content":"data"},"$W":{"start":{"line":117,"col":20,"offset":4243},"end":{"line":117,"col":32,"offset":4255},"abstract_content":"query_params"},"$F":{"start":{"line":120,"col":9,"offset":4339},"end":{"line":120,"col":10,"offset":4340},"abstract_content":"f","propagated_value":{"svalue_start":{"line":119,"col":10,"offset":4305},"svalue_end":{"line":119,"col":29,"offset":4324},"svalue_abstract_content":"open(filename'w')"}}},"message":"Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.","metadata":{"cwe":["CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')"],"owasp":["A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","shortlink":"https://sg.run/0Q6j","semgrep.dev":{"rule":{"origin":"community","r_id":9498,"rule_id":"ReUg5z","rule_name":"python.django.security.injection.request-data-write.request-data-write","rv_id":946183,"url":"https://semgrep.dev/playground/r/zyTlkEY/python.django.security.injection.request-data-write.request-data-write","version_id":"zyTlkEY"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8f5ef4a2c17c1ae630231f9aac8fbcfd120b2fbec9a473ba5c52efeacab22e982e90b5d0c616dec82f489996324dd60fd3d207d8984c515c5b9437f1e315dfdf_0","lines":"    data = request.query_params.get('data')\n    filename = 'output.txt'\n    with open(filename, 'w') as f:\n        f.write(data)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":121,"col":18,"offset":4370},"end":{"line":121,"col":49,"offset":4401},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"info"},"$FUNC":{"start":{"line":116,"col":5,"offset":4181},"end":{"line":116,"col":28,"offset":4204},"abstract_content":"write_data_from_request"},"$FASTAPI_REQUEST":{"start":{"line":116,"col":29,"offset":4205},"end":{"line":116,"col":36,"offset":4212},"abstract_content":"request"},"$LOG":{"start":{"line":121,"col":13,"offset":4365},"end":{"line":121,"col":17,"offset":4369},"abstract_content":"info"},"$SINK":{"start":{"line":121,"col":18,"offset":4370},"end":{"line":121,"col":49,"offset":4401},"abstract_content":"f\"Data written to file: {data}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ca4438b1aee4225df4569ac0c6029ef04b7aba90f664bbb3490bffd56bf81c1b6a81d887897bc6958aeabdb731b712d64ffac8e89245c9f1255152bea65d5359_0","lines":"    logging.info(f\"Data written to file: {data}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":116,"col":29,"offset":4205},"end":{"line":116,"col":36,"offset":4212}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":116,"col":29,"offset":4205},"end":{"line":116,"col":36,"offset":4212}},"content":"request"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":117,"col":5,"offset":4228},"end":{"line":117,"col":9,"offset":4232}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":121,"col":18,"offset":4370},"end":{"line":121,"col":49,"offset":4401}},"f\"Data written to file: {data}\""]]},"engine_kind":"PRO"}},{"check_id":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","path":"vulnerability_samples/CWE-Unknown/sample_100_original.py","start":{"line":127,"col":19,"offset":4592},"end":{"line":127,"col":72,"offset":4645},"extra":{"metavars":{"$PAYLOAD":{"start":{"line":127,"col":30,"offset":4603},"end":{"line":127,"col":35,"offset":4608},"abstract_content":"token"}},"message":"A secret is hard-coded in the application. Secrets stored in source code, such as credentials, identifiers, and other types of sensitive data, can be leaked and used by internal or external malicious actors. Use environment variables to securely provide credentials and other secrets or retrieve them from a secure vault or Hardware Security Module (HSM).","metadata":{"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-798: Use of Hard-coded Credentials"],"cwe2021-top25":true,"cwe2022-top25":true,"owasp":["A07:2021 - Identification and Authentication Failures"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"],"technology":["pyjwt","jwt","secrets"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Hard-coded Secrets"],"source":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","shortlink":"https://sg.run/pLOg","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":28362,"rule_id":"L1Ukno","rule_name":"python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","rv_id":948025,"url":"https://semgrep.dev/playground/r/gETeWd3/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","version_id":"gETeWd3"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"526d6936e81d7db8c235b5bbe13e2695b0dce5b7e3405ba1a527753d1ce4a54ad7d90dbee97b214006e9ffab7fe51817944dd985e9e42dc899c4e20f3b3e174a_0","lines":"        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":62,"col":12,"offset":2224},"end":{"line":68,"col":9,"offset":2473},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ef2dab9863dabb91a56d9d5b6d079081dfec42463e45c2a8d2c46231f2bb2da025c1a33fa52f81d5f088e95bbe56b39b18ac9db1974ea7e59f36431ffa811dc8_0","lines":"    return render_template_string('''\n        <form method=\"post\">\n            <input type=\"text\" name=\"username\" required>\n            <input type=\"password\" name=\"password\" required>\n            <input type=\"submit\" value=\"Register\">\n        </form>\n    ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":86,"col":12,"offset":3176},"end":{"line":92,"col":9,"offset":3422},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ef2dab9863dabb91a56d9d5b6d079081dfec42463e45c2a8d2c46231f2bb2da025c1a33fa52f81d5f088e95bbe56b39b18ac9db1974ea7e59f36431ffa811dc8_1","lines":"    return render_template_string('''\n        <form method=\"post\">\n            <input type=\"text\" name=\"username\" required>\n            <input type=\"password\" name=\"password\" required>\n            <input type=\"submit\" value=\"Login\">\n        </form>\n    ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":105,"col":16,"offset":3775},"end":{"line":118,"col":26,"offset":4381},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ef2dab9863dabb91a56d9d5b6d079081dfec42463e45c2a8d2c46231f2bb2da025c1a33fa52f81d5f088e95bbe56b39b18ac9db1974ea7e59f36431ffa811dc8_2","lines":"        return render_template_string('''\n            <h1>Blog Posts</h1>\n            {% for post in posts %}\n                <h2>{{ post['title'] }}</h2>\n                <p>By {{ post['username'] }}</p>\n                <a href=\"{{ url_for('view_post', post_id=post['id']) }}\">Read more</a>\n            {% endfor %}\n            <a href=\"{{ url_for('create_post') }}\">Create new post</a>\n            {% if 'user_id' in session %}\n                <a href=\"{{ url_for('logout') }}\">Logout</a>\n            {% else %}\n                <a href=\"{{ url_for('login') }}\">Login</a>\n            {% endif %}\n        ''', posts=posts)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":129,"col":15,"offset":4915},"end":{"line":129,"col":51,"offset":4951},"extra":{"metavars":{},"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe","semgrep.dev":{"rule":{"origin":"community","r_id":9549,"rule_id":"qNUjN2","rule_name":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","rv_id":946237,"url":"https://semgrep.dev/playground/r/NdTqkwG/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","version_id":"NdTqkwG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ce8f7d79284900a0edec1e2cc33359966fccc6bcd7914b05690903d1a726ed74c115c269c3c73651e70529a1022f24355e20dfe83daa99e98c542f1ebf991dcd_0","lines":"        env = jinja2.Environment(autoescape=False)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":163,"col":12,"offset":6300},"end":{"line":169,"col":9,"offset":6546},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ef2dab9863dabb91a56d9d5b6d079081dfec42463e45c2a8d2c46231f2bb2da025c1a33fa52f81d5f088e95bbe56b39b18ac9db1974ea7e59f36431ffa811dc8_3","lines":"    return render_template_string('''\n        <form method=\"post\">\n            <input type=\"text\" name=\"title\" required>\n            <textarea name=\"content\" required></textarea>\n            <input type=\"submit\" value=\"Create Post\">\n        </form>\n    ''')","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.render-template-string.render-template-string","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":202,"col":16,"offset":7893},"end":{"line":208,"col":24,"offset":8223},"extra":{"metavars":{},"message":"Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.","metadata":{"cwe":["CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"],"owasp":["A03:2021 - Injection"],"references":["https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html"],"category":"security","technology":["flask"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Code Injection"],"source":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","shortlink":"https://sg.run/8yjE","semgrep.dev":{"rule":{"origin":"community","r_id":9540,"rule_id":"5rUOv1","rule_name":"python.flask.security.audit.render-template-string.render-template-string","rv_id":946214,"url":"https://semgrep.dev/playground/r/GxTP7pA/python.flask.security.audit.render-template-string.render-template-string","version_id":"GxTP7pA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"ef2dab9863dabb91a56d9d5b6d079081dfec42463e45c2a8d2c46231f2bb2da025c1a33fa52f81d5f088e95bbe56b39b18ac9db1974ea7e59f36431ffa811dc8_4","lines":"        return render_template_string('''\n            <form method=\"post\">\n                <input type=\"text\" name=\"title\" value=\"{{ post['title'] }}\" required>\n                <textarea name=\"content\" required>{{ post['content'] }}</textarea>\n                <input type=\"submit\" value=\"Update Post\">\n            </form>\n        ''', post=post)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":232,"col":5,"offset":9130},"end":{"line":232,"col":24,"offset":9149},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"adb64e5678236f63c6ac261c124e57d6001d9c28f4c2c510c49a0ac4cb90d07301213242a9d004c6506c02397ba32331e806297d4bedbc1a5d656da2f08f4061_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-Unknown/sample_151_original.py","start":{"line":232,"col":5,"offset":9130},"end":{"line":232,"col":24,"offset":9149},"extra":{"metavars":{"$APP":{"start":{"line":232,"col":5,"offset":9130},"end":{"line":232,"col":8,"offset":9133},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":245},"svalue_end":{"line":8,"col":22,"offset":260},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"5f40caef16f428fa12379488a7df4380e44f843c0f5ba3a0c87b2c55bfa7c69ca018b4e51c75d186b084357dfd8f3b5986d1e3baf4c5596397e07ec083d6068a_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":50,"col":9,"offset":1819},"end":{"line":50,"col":116,"offset":1926},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":43,"col":20,"offset":1516},"end":{"line":43,"col":28,"offset":1524},"abstract_content":"get_json"},"$O":{"start":{"line":48,"col":14,"offset":1788},"end":{"line":48,"col":27,"offset":1801},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":50,"col":24,"offset":1834},"end":{"line":50,"col":78,"offset":1888},"abstract_content":"\"INSERT INTO users (username, password) VALUES (?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5acb3ff728d5f8c0f677aee61761dc4750185a6080f1bb507601963c15502124252817cdb78e4527d8d5b7b9f4538b832d6472a9e9c302a75ec505acbb880a40_0","lines":"        cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (data['username'], hashed_password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":43,"col":12,"offset":1508},"end":{"line":43,"col":30,"offset":1526}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":43,"col":5,"offset":1501},"end":{"line":43,"col":9,"offset":1505}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":50,"col":9,"offset":1819},"end":{"line":50,"col":116,"offset":1926}},"cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (data['username'], hashed_password))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":50,"col":9,"offset":1819},"end":{"line":50,"col":116,"offset":1926},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":43,"col":20,"offset":1516},"end":{"line":43,"col":28,"offset":1524},"abstract_content":"get_json"},"$O":{"start":{"line":48,"col":14,"offset":1788},"end":{"line":48,"col":27,"offset":1801},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":50,"col":24,"offset":1834},"end":{"line":50,"col":78,"offset":1888},"abstract_content":"\"INSERT INTO users (username, password) VALUES (?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"40c6b6f8feadefd5f48c20d282bc662e324528e6f42d21a059d96d30f0acae7eebd6a23110eb2a76dcd3dea1bc34b518d297242f79c5c64e4b5396e7410f70ea_0","lines":"        cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (data['username'], hashed_password))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":43,"col":12,"offset":1508},"end":{"line":43,"col":30,"offset":1526}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":43,"col":5,"offset":1501},"end":{"line":43,"col":9,"offset":1505}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":50,"col":9,"offset":1819},"end":{"line":50,"col":116,"offset":1926}},"cursor.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (data['username'], hashed_password))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":52,"col":22,"offset":1970},"end":{"line":52,"col":60,"offset":2008},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":43,"col":20,"offset":1516},"end":{"line":43,"col":28,"offset":1524},"abstract_content":"get_json"},"$LOG":{"start":{"line":52,"col":17,"offset":1965},"end":{"line":52,"col":21,"offset":1969},"abstract_content":"info"},"$SINK":{"start":{"line":52,"col":22,"offset":1970},"end":{"line":52,"col":60,"offset":2008},"abstract_content":"f\"User registered: {data['username']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"589505f14551eee023dded7d47259684db872d8406a04d3d380c6ec6a748512b643eabd51b1371720a070ec3e2365996df81a321df831a977851780602e5f6d3_0","lines":"        logging.info(f\"User registered: {data['username']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":43,"col":12,"offset":1508},"end":{"line":43,"col":30,"offset":1526}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":43,"col":5,"offset":1501},"end":{"line":43,"col":9,"offset":1505}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":52,"col":22,"offset":1970},"end":{"line":52,"col":60,"offset":2008}},"f\"User registered: {data['username']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":5,"offset":3098},"end":{"line":84,"col":26,"offset":3352},"extra":{"metavars":{"$FUNC":{"start":{"line":78,"col":5,"offset":3081},"end":{"line":78,"col":14,"offset":3090},"abstract_content":"get_books"},"$DATA":{"start":{"line":79,"col":5,"offset":3098},"end":{"line":79,"col":11,"offset":3104},"abstract_content":"author"},"$W":{"start":{"line":79,"col":22,"offset":3115},"end":{"line":79,"col":26,"offset":3119},"abstract_content":"args"},"$INTERM":{"start":{"line":83,"col":5,"offset":3242},"end":{"line":83,"col":10,"offset":3247},"abstract_content":"query"},"$STR":{"start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":68,"offset":3305},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CURSOR":{"start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":11,"offset":3337},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":82,"col":14,"offset":3224},"svalue_end":{"line":82,"col":27,"offset":3237},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"7612e09f2220f89c0cbbc4ab619eb110778a7972bbe8086a095f00d95d338bbe578761e286447b42c3e7914ad94f40282a88437414c7197088344468e4a05516_0","lines":"    author = request.args.get('author')\n    year = request.args.get('year')\n    conn = sqlite3.connect('library.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":80,"col":5,"offset":3138},"end":{"line":84,"col":26,"offset":3352},"extra":{"metavars":{"$FUNC":{"start":{"line":78,"col":5,"offset":3081},"end":{"line":78,"col":14,"offset":3090},"abstract_content":"get_books"},"$DATA":{"start":{"line":80,"col":5,"offset":3138},"end":{"line":80,"col":9,"offset":3142},"abstract_content":"year"},"$W":{"start":{"line":80,"col":20,"offset":3153},"end":{"line":80,"col":24,"offset":3157},"abstract_content":"args"},"$INTERM":{"start":{"line":83,"col":5,"offset":3242},"end":{"line":83,"col":10,"offset":3247},"abstract_content":"query"},"$STR":{"start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":68,"offset":3305},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CURSOR":{"start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":11,"offset":3337},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":82,"col":14,"offset":3224},"svalue_end":{"line":82,"col":27,"offset":3237},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"c939faa9623a4321bd47e491f26249cd2f445c4bf4f0746be7c2601901fc2c80c0bb980182c93c9582fcf04aaf15fca999866fa0f12122bfa45d7677db148f77_0","lines":"    year = request.args.get('year')\n    conn = sqlite3.connect('library.db')\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":89,"offset":3326},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":79,"col":22,"offset":3115},"end":{"line":79,"col":26,"offset":3119},"abstract_content":"args"},"$SQLSTR":{"start":{"line":83,"col":14,"offset":3251},"end":{"line":83,"col":67,"offset":3304},"abstract_content":"SELECT * FROM books WHERE author = '{}' AND year = {}"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"b25da6b58fa80814841949811b0f47be15a5f734fb13966039bfb2e2a76c247d6a34800d11a1a4921dfbc597db0a3a7cd9ee121448c63d636d48610ca31f320b_0","lines":"    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":14,"offset":3107},"end":{"line":79,"col":26,"offset":3119}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":5,"offset":3098},"end":{"line":79,"col":11,"offset":3104}},"content":"author"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":89,"offset":3326}},"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":89,"offset":3326},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":79,"col":22,"offset":3115},"end":{"line":79,"col":26,"offset":3119},"abstract_content":"args"},"$SQLSTR":{"start":{"line":83,"col":14,"offset":3251},"end":{"line":83,"col":67,"offset":3304},"abstract_content":"SELECT * FROM books WHERE author = '{}' AND year = {}"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"70949b5477a444e1823713235752758b2a87dfc68347e745141bd786a770aa26a11b893b5e7c56d2224c4e0f34cde321b785b6ad8eacccc77f06671972eb9751_0","lines":"    query = \"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":14,"offset":3107},"end":{"line":79,"col":26,"offset":3119}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":5,"offset":3098},"end":{"line":79,"col":11,"offset":3104}},"content":"author"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":89,"offset":3326}},"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author, year)"]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":26,"offset":3352},"extra":{"metavars":{"$DB":{"start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":11,"offset":3337},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":82,"col":14,"offset":3224},"svalue_end":{"line":82,"col":27,"offset":3237},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":84,"col":20,"offset":3346},"end":{"line":84,"col":25,"offset":3351},"abstract_content":"query","propagated_value":{"svalue_start":{"line":83,"col":13,"offset":3250},"svalue_end":{"line":83,"col":89,"offset":3326},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"3d5eb80ec64ca01d47a8b9d33dee4651c48d53e6212e9f57ce8c2a78f6c57e9b9d76460ed29cbfabe0c6c280f9db5663729cfe67233bee2b0cd1fbffdb93ebe0_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":26,"offset":3352},"extra":{"metavars":{"$SQL":{"start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":68,"offset":3305},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\""},"$CONNECTION":{"start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":11,"offset":3337},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":82,"col":14,"offset":3224},"svalue_end":{"line":82,"col":27,"offset":3237},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":84,"col":20,"offset":3346},"end":{"line":84,"col":25,"offset":3351},"abstract_content":"query","propagated_value":{"svalue_start":{"line":83,"col":13,"offset":3250},"svalue_end":{"line":83,"col":89,"offset":3326},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"96b150e244f62ef0a13fc437520ea1b405a8dec61ddf34c4a20474354a8fb53977a711ee8b62d982101e4d745044611dc86142c925e2c5d38d8864f229adf57a_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":26,"offset":3352},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":79,"col":22,"offset":3115},"end":{"line":79,"col":26,"offset":3119},"abstract_content":"args"},"$O":{"start":{"line":82,"col":14,"offset":3224},"end":{"line":82,"col":27,"offset":3237},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":89,"offset":3326},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"6b59a8db617517bffdf7b38a80fcedb3c531875d59a691ce64dd1bff218c383e255d9f44099821f664c34a59239bc00e2bee73307f9727ba4bd3ddf34f729708_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":14,"offset":3107},"end":{"line":79,"col":40,"offset":3133}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":5,"offset":3098},"end":{"line":79,"col":11,"offset":3104}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":5,"offset":3242},"end":{"line":83,"col":10,"offset":3247}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":26,"offset":3352}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":26,"offset":3352},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":79,"col":22,"offset":3115},"end":{"line":79,"col":26,"offset":3119},"abstract_content":"args"},"$O":{"start":{"line":82,"col":14,"offset":3224},"end":{"line":82,"col":27,"offset":3237},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":83,"col":13,"offset":3250},"end":{"line":83,"col":89,"offset":3326},"abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"42acebfeda58577076ac025201c03660581176da054e93731db955fe5e3e09ae1cdf69fd2b5f9ef360373150e641e2c3fe2cc35a2c8cd3b3ee73a8bbc83cef35_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":14,"offset":3107},"end":{"line":79,"col":40,"offset":3133}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":5,"offset":3098},"end":{"line":79,"col":11,"offset":3104}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":5,"offset":3242},"end":{"line":83,"col":10,"offset":3247}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":5,"offset":3331},"end":{"line":84,"col":26,"offset":3352}},"cursor.execute(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":20,"offset":3346},"end":{"line":84,"col":25,"offset":3351},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":79,"col":22,"offset":3115},"end":{"line":79,"col":26,"offset":3119},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":82,"col":14,"offset":3224},"end":{"line":82,"col":27,"offset":3237},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":84,"col":20,"offset":3346},"end":{"line":84,"col":25,"offset":3351},"abstract_content":"query","propagated_value":{"svalue_start":{"line":83,"col":13,"offset":3250},"svalue_end":{"line":83,"col":89,"offset":3326},"svalue_abstract_content":"\"SELECT * FROM books WHERE author = '{}' AND year = {}\".format(author year)"}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"b64a5efe73c896d681f867adc5eade34641ec835d2d06ec5882af2c8b20a50597db9dda55159bf384481546de6d807540371ad5e5335cafaf8ffa1c66071aae4_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":14,"offset":3107},"end":{"line":79,"col":40,"offset":3133}},"request.args.get('author')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":79,"col":5,"offset":3098},"end":{"line":79,"col":11,"offset":3104}},"content":"author"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":83,"col":5,"offset":3242},"end":{"line":83,"col":10,"offset":3247}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":84,"col":20,"offset":3346},"end":{"line":84,"col":25,"offset":3351}},"query"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":97,"col":5,"offset":3747},"end":{"line":98,"col":66,"offset":3887},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":92,"col":20,"offset":3520},"end":{"line":92,"col":28,"offset":3528},"abstract_content":"get_json"},"$O":{"start":{"line":96,"col":14,"offset":3729},"end":{"line":96,"col":27,"offset":3742},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":97,"col":20,"offset":3762},"end":{"line":97,"col":78,"offset":3820},"abstract_content":"\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"25531369720b3a91e048ee4fb8bb90e14df62ffffee20c18859c45a742d8bc8aca1473d5e76d2e59834fda8f62b252688fbdd181d01e81418bdcf0606ed3074a_0","lines":"    cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\",\n                   (data['title'], data['author'], data['year']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":92,"col":12,"offset":3512},"end":{"line":92,"col":30,"offset":3530}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":92,"col":5,"offset":3505},"end":{"line":92,"col":9,"offset":3509}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":97,"col":5,"offset":3747},"end":{"line":98,"col":66,"offset":3887}},"cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\",\n                   (data['title'], data['author'], data['year']))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":97,"col":5,"offset":3747},"end":{"line":98,"col":66,"offset":3887},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":92,"col":20,"offset":3520},"end":{"line":92,"col":28,"offset":3528},"abstract_content":"get_json"},"$O":{"start":{"line":96,"col":14,"offset":3729},"end":{"line":96,"col":27,"offset":3742},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":97,"col":20,"offset":3762},"end":{"line":97,"col":78,"offset":3820},"abstract_content":"\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"45984eb87527068e76ee7368568088833c6860fcebcb2afd0cf50c93d08419e79511dd7e10864f91aa8007b85a60db6578ad83bb638fb3e2bba9dbb73d24e6ed_0","lines":"    cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\",\n                   (data['title'], data['author'], data['year']))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":92,"col":12,"offset":3512},"end":{"line":92,"col":30,"offset":3530}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":92,"col":5,"offset":3505},"end":{"line":92,"col":9,"offset":3509}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":97,"col":5,"offset":3747},"end":{"line":98,"col":66,"offset":3887}},"cursor.execute(\"INSERT INTO books (title, author, year) VALUES (?, ?, ?)\",\n                   (data['title'], data['author'], data['year']))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":102,"col":18,"offset":3971},"end":{"line":102,"col":68,"offset":4021},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":92,"col":20,"offset":3520},"end":{"line":92,"col":28,"offset":3528},"abstract_content":"get_json"},"$LOG":{"start":{"line":102,"col":13,"offset":3966},"end":{"line":102,"col":17,"offset":3970},"abstract_content":"info"},"$SINK":{"start":{"line":102,"col":18,"offset":3971},"end":{"line":102,"col":68,"offset":4021},"abstract_content":"f\"Book added: {data['title']} by {data['author']}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"119ec351cae642e89ef04c252565aeb1f03c054f872dcea3e265f848e63f27e9c892a5021005973c0a4da6b35612dd835d8665157599bfc608e89a492cfb7b44_0","lines":"    logging.info(f\"Book added: {data['title']} by {data['author']}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":92,"col":12,"offset":3512},"end":{"line":92,"col":30,"offset":3530}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":92,"col":5,"offset":3505},"end":{"line":92,"col":9,"offset":3509}},"content":"data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":102,"col":18,"offset":3971},"end":{"line":102,"col":68,"offset":4021}},"f\"Book added: {data['title']} by {data['author']}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":110,"col":5,"offset":4265},"end":{"line":110,"col":67,"offset":4327},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":105,"col":2,"offset":4104},"end":{"line":105,"col":5,"offset":4107},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":218},"svalue_end":{"line":10,"col":22,"offset":233},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":105,"col":6,"offset":4108},"end":{"line":105,"col":11,"offset":4113},"abstract_content":"route"},"$FUNC":{"start":{"line":107,"col":5,"offset":4174},"end":{"line":107,"col":13,"offset":4182},"abstract_content":"get_book"},"$PARAM":{"start":{"line":107,"col":14,"offset":4183},"end":{"line":107,"col":21,"offset":4190},"abstract_content":"book_id"},"$O":{"start":{"line":109,"col":14,"offset":4247},"end":{"line":109,"col":27,"offset":4260},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":110,"col":20,"offset":4280},"end":{"line":110,"col":54,"offset":4314},"abstract_content":"\"SELECT * FROM books WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5094bd7aea18ccd7085c70171d2e03f9955a408da3df7afd6300d598ae7a120ac978f36d38b232477653aae1189ffff0754a304b094b550ac261a62d0651f04f_0","lines":"    cursor.execute(\"SELECT * FROM books WHERE id = ?\", (book_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":107,"col":14,"offset":4183},"end":{"line":107,"col":21,"offset":4190}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":107,"col":14,"offset":4183},"end":{"line":107,"col":21,"offset":4190}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":110,"col":5,"offset":4265},"end":{"line":110,"col":67,"offset":4327}},"cursor.execute(\"SELECT * FROM books WHERE id = ?\", (book_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":138,"col":5,"offset":5216},"end":{"line":138,"col":41,"offset":5252},"extra":{"metavars":{"$SQL":{"start":{"line":136,"col":13,"offset":5148},"end":{"line":136,"col":31,"offset":5166},"abstract_content":"query.rstrip(', ')"},"$CONNECTION":{"start":{"line":138,"col":5,"offset":5216},"end":{"line":138,"col":11,"offset":5222},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":124,"col":14,"offset":4798},"svalue_end":{"line":124,"col":27,"offset":4811},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":138,"col":20,"offset":5231},"end":{"line":138,"col":25,"offset":5236},"abstract_content":"query","propagated_value":{"svalue_start":{"line":136,"col":13,"offset":5148},"svalue_end":{"line":136,"col":49,"offset":5184},"svalue_abstract_content":"query.rstrip(', ')+\" WHERE id = ?\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"60c7a5650bc5f2d3a162374b2b216c19e0b781544b86a52962fa4f6a779305e457f97a9c09b84ecb94b125a22435c68a502af0eeed5d39a1d619fb0dff6dd809_0","lines":"    cursor.execute(query, tuple(params))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":138,"col":5,"offset":5216},"end":{"line":138,"col":41,"offset":5252},"extra":{"metavars":{"$APP":{"start":{"line":117,"col":2,"offset":4538},"end":{"line":117,"col":5,"offset":4541},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":218},"svalue_end":{"line":10,"col":22,"offset":233},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":117,"col":6,"offset":4542},"end":{"line":117,"col":11,"offset":4547},"abstract_content":"route"},"$PARAM":{"start":{"line":119,"col":17,"offset":4620},"end":{"line":119,"col":24,"offset":4627},"abstract_content":"book_id"},"$O":{"start":{"line":124,"col":14,"offset":4798},"end":{"line":124,"col":27,"offset":4811},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":136,"col":13,"offset":5148},"end":{"line":136,"col":49,"offset":5184},"abstract_content":"query.rstrip(', ')+\" WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"3ada97fe122c9f7fcd28f051bd3ece6a6cd03782f6da4b3cc8adf8c09c2357726521c8a674e2877f1a25f3ce20e41ae930a9a2bb5de2933831ac78d0362fbb10_0","lines":"    cursor.execute(query, tuple(params))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":119,"col":17,"offset":4620},"end":{"line":119,"col":24,"offset":4627}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":119,"col":17,"offset":4620},"end":{"line":119,"col":24,"offset":4627}},"content":"book_id"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":137,"col":5,"offset":5189},"end":{"line":137,"col":11,"offset":5195}},"content":"params"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":138,"col":5,"offset":5216},"end":{"line":138,"col":41,"offset":5252}},"cursor.execute(query, tuple(params))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":138,"col":5,"offset":5216},"end":{"line":138,"col":41,"offset":5252},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":9,"offset":8},"abstract_content":"get_json"},"$FUNC":{"start":{"line":120,"col":20,"offset":4649},"end":{"line":120,"col":28,"offset":4657},"abstract_content":"get_json"},"$O":{"start":{"line":124,"col":14,"offset":4798},"end":{"line":124,"col":27,"offset":4811},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":136,"col":13,"offset":5148},"end":{"line":136,"col":49,"offset":5184},"abstract_content":"query.rstrip(', ')+\" WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"f49a3fe75f6c8baafa5e82924cdf2b93488f25b0d8dd475ccd37b42fdbc2c5d9dea6fd7b40cbc6dfc225a010d26b079a2a76bb4851dc3651d21fe3fde90f3e25_0","lines":"    cursor.execute(query, tuple(params))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":120,"col":12,"offset":4641},"end":{"line":120,"col":30,"offset":4659}},"request.get_json()"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":120,"col":5,"offset":4634},"end":{"line":120,"col":9,"offset":4638}},"content":"data"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":129,"col":9,"offset":4923},"end":{"line":129,"col":15,"offset":4929}},"content":"params"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":138,"col":5,"offset":5216},"end":{"line":138,"col":41,"offset":5252}},"cursor.execute(query, tuple(params))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":141,"col":18,"offset":5305},"end":{"line":141,"col":47,"offset":5334},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":117,"col":2,"offset":4538},"end":{"line":117,"col":5,"offset":4541},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":218},"svalue_end":{"line":10,"col":22,"offset":233},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":117,"col":6,"offset":4542},"end":{"line":117,"col":11,"offset":4547},"abstract_content":"route"},"$FUNC":{"start":{"line":119,"col":5,"offset":4608},"end":{"line":119,"col":16,"offset":4619},"abstract_content":"update_book"},"$PARAM":{"start":{"line":119,"col":17,"offset":4620},"end":{"line":119,"col":24,"offset":4627},"abstract_content":"book_id"},"$LOG":{"start":{"line":141,"col":13,"offset":5300},"end":{"line":141,"col":17,"offset":5304},"abstract_content":"info"},"$SINK":{"start":{"line":141,"col":18,"offset":5305},"end":{"line":141,"col":47,"offset":5334},"abstract_content":"f\"Book updated: ID {book_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"2de2eb34d19686cd4c2209935bc64f7222ff31977f4b9776c36a577d44825ede43151a88dd43c2032ed972a9528dc24be3fc6069ab7b954a6b9c6341e3aaaf93_0","lines":"    logging.info(f\"Book updated: ID {book_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":119,"col":17,"offset":4620},"end":{"line":119,"col":24,"offset":4627}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":119,"col":17,"offset":4620},"end":{"line":119,"col":24,"offset":4627}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":141,"col":18,"offset":5305},"end":{"line":141,"col":47,"offset":5334}},"f\"Book updated: ID {book_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":149,"col":5,"offset":5566},"end":{"line":149,"col":65,"offset":5626},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":144,"col":2,"offset":5399},"end":{"line":144,"col":5,"offset":5402},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":218},"svalue_end":{"line":10,"col":22,"offset":233},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":144,"col":6,"offset":5403},"end":{"line":144,"col":11,"offset":5408},"abstract_content":"route"},"$FUNC":{"start":{"line":146,"col":5,"offset":5472},"end":{"line":146,"col":16,"offset":5483},"abstract_content":"delete_book"},"$PARAM":{"start":{"line":146,"col":17,"offset":5484},"end":{"line":146,"col":24,"offset":5491},"abstract_content":"book_id"},"$O":{"start":{"line":148,"col":14,"offset":5548},"end":{"line":148,"col":27,"offset":5561},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":149,"col":20,"offset":5581},"end":{"line":149,"col":52,"offset":5613},"abstract_content":"\"DELETE FROM books WHERE id = ?\""}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"53359f0f6af0438f65e66e869f84df1a50a897a32976054fb1f96a769d1dbcf34134fac1ca1b7cb282e2e60569231d466d285a7c894cc5840db9bcb07dbd5af2_0","lines":"    cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":146,"col":17,"offset":5484},"end":{"line":146,"col":24,"offset":5491}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":146,"col":17,"offset":5484},"end":{"line":146,"col":24,"offset":5491}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":149,"col":5,"offset":5566},"end":{"line":149,"col":65,"offset":5626}},"cursor.execute(\"DELETE FROM books WHERE id = ?\", (book_id,))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":155,"col":18,"offset":5788},"end":{"line":155,"col":47,"offset":5817},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":144,"col":2,"offset":5399},"end":{"line":144,"col":5,"offset":5402},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":218},"svalue_end":{"line":10,"col":22,"offset":233},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":144,"col":6,"offset":5403},"end":{"line":144,"col":11,"offset":5408},"abstract_content":"route"},"$FUNC":{"start":{"line":146,"col":5,"offset":5472},"end":{"line":146,"col":16,"offset":5483},"abstract_content":"delete_book"},"$PARAM":{"start":{"line":146,"col":17,"offset":5484},"end":{"line":146,"col":24,"offset":5491},"abstract_content":"book_id"},"$LOG":{"start":{"line":155,"col":13,"offset":5783},"end":{"line":155,"col":17,"offset":5787},"abstract_content":"info"},"$SINK":{"start":{"line":155,"col":18,"offset":5788},"end":{"line":155,"col":47,"offset":5817},"abstract_content":"f\"Book deleted: ID {book_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"09afe85379cf7c2a258ed1d12a771058a94d961bf5855268f1f65bfa7f59f33b8cb8f1e9b0c56e3657ba7757bb862753415df833ad8d22b402b10a202126c821_0","lines":"    logging.info(f\"Book deleted: ID {book_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":146,"col":17,"offset":5484},"end":{"line":146,"col":24,"offset":5491}},"book_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":146,"col":17,"offset":5484},"end":{"line":146,"col":24,"offset":5491}},"content":"book_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":155,"col":18,"offset":5788},"end":{"line":155,"col":47,"offset":5817}},"f\"Book deleted: ID {book_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":166,"col":5,"offset":6191},"end":{"line":166,"col":57,"offset":6243},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":161,"col":21,"offset":5982},"end":{"line":161,"col":25,"offset":5986},"abstract_content":"args"},"$O":{"start":{"line":164,"col":14,"offset":6102},"end":{"line":164,"col":27,"offset":6115},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":166,"col":20,"offset":6206},"end":{"line":166,"col":25,"offset":6211},"abstract_content":"query","propagated_value":{"svalue_start":{"line":165,"col":13,"offset":6128},"svalue_end":{"line":165,"col":71,"offset":6186},"svalue_abstract_content":"\"SELECT * FROM books WHERE title LIKE ? AND author LIKE ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","shortlink":"https://sg.run/Ab2Y4","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151050,"rule_id":"qNU2nYq","rule_name":"python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","rv_id":1015020,"url":"https://semgrep.dev/playground/r/w8TKenE/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","version_id":"w8TKenE"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-prestodb-sqli.flask-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"a1a060f096cf827d3c96b0f3136dcf23dcf00b98478601880a514a9fafb11e767dd3c25365f153b38b2c4f2a830ab9ff2a1b037409b876f915c9a3c13c6cc52a_0","lines":"    cursor.execute(query, (f'%{title}%', f'%{author}%'))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":161,"col":13,"offset":5974},"end":{"line":161,"col":42,"offset":6003}},"request.args.get('title', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":161,"col":5,"offset":5966},"end":{"line":161,"col":10,"offset":5971}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":166,"col":5,"offset":6191},"end":{"line":166,"col":57,"offset":6243}},"cursor.execute(query, (f'%{title}%', f'%{author}%'))"]]},"engine_kind":"PRO"}},{"check_id":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":166,"col":5,"offset":6191},"end":{"line":166,"col":57,"offset":6243},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":161,"col":21,"offset":5982},"end":{"line":161,"col":25,"offset":5986},"abstract_content":"args"},"$O":{"start":{"line":164,"col":14,"offset":6102},"end":{"line":164,"col":27,"offset":6115},"abstract_content":"conn.cursor()"},"$SINK":{"start":{"line":166,"col":20,"offset":6206},"end":{"line":166,"col":25,"offset":6211},"abstract_content":"query","propagated_value":{"svalue_start":{"line":165,"col":13,"offset":6128},"svalue_end":{"line":165,"col":71,"offset":6186},"svalue_abstract_content":"\"SELECT * FROM books WHERE title LIKE ? AND author LIKE ?\""}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with prestodb via flask-without-url-path","functional-categories":["db::sink::sql-or-nosql-query::prestodb","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","prestodb","python","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","shortlink":"https://sg.run/BYXN5","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":151051,"rule_id":"lBU4OQB","rule_name":"python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","rv_id":1015021,"url":"https://semgrep.dev/playground/r/xyTqYZO/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","version_id":"xyTqYZO"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.tars.flask.sql.prestodb.flask-without-url-path-prestodb-sqli.flask-without-url-path-prestodb-sqli","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"e99734dd866f151555ec059c70d13bd47f2a0b93c731a8712c6806ef99ac0904345d766cc5e475fce97f47f7615deda0bd5c6fb79380cc7cafc48886990c7ae2_0","lines":"    cursor.execute(query, (f'%{title}%', f'%{author}%'))","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":161,"col":13,"offset":5974},"end":{"line":161,"col":42,"offset":6003}},"request.args.get('title', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":161,"col":5,"offset":5966},"end":{"line":161,"col":10,"offset":5971}},"content":"title"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":166,"col":5,"offset":6191},"end":{"line":166,"col":57,"offset":6243}},"cursor.execute(query, (f'%{title}%', f'%{author}%'))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":189,"col":5,"offset":7015},"end":{"line":189,"col":24,"offset":7034},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"e12fb57d2f8b3a31f765df48cf5804e27a534a4fd09f6305b3da4f46830d73b04f6adf79960435206703928f0b3e24ae077c187b5dc2c215282384b698a7ec02_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-Unknown/sample_162_original.py","start":{"line":189,"col":5,"offset":7015},"end":{"line":189,"col":24,"offset":7034},"extra":{"metavars":{"$APP":{"start":{"line":189,"col":5,"offset":7015},"end":{"line":189,"col":8,"offset":7018},"abstract_content":"app","propagated_value":{"svalue_start":{"line":10,"col":7,"offset":218},"svalue_end":{"line":10,"col":22,"offset":233},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"8b28292842ed34de58b763ccd076b5b4fda573f77a113edaa4e455c8fa960ced3dfb2474f81635cdf7a632ddda7461d13f7fe22326b69d73866e85a3742da0c7_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-Unknown/sample_165_original.py","start":{"line":65,"col":1,"offset":2251},"end":{"line":115,"col":104,"offset":4653},"extra":{"metavars":{"$R":{"start":{"line":67,"col":5,"offset":2300},"end":{"line":67,"col":28,"offset":2323},"abstract_content":"send_notification_email"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"43c4466b1329ce10d333fd49b4a5694845f486de476c849a3f200751ae58266205e714a46914a91757582e9d4b9076592c4ae4a46958265bb67443b32546f6cb_0","lines":"@csrf_exempt\n@require_http_methods([\"POST\"])\ndef send_notification_email(request: HttpRequest):\n    try:\n        data = json.loads(request.body)\n        if not validate_input(data):\n            return JsonResponse({'status': 'error', 'message': 'Invalid input data'}, status=400)\n\n        data = sanitize_input(data)\n        subject = data['subject']\n        template_name = data['template']\n        user_id = data['user_id']\n        message = data['message']\n\n        try:\n            user = User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            log_email_attempt(user_id, 'error', 'User not found')\n            return JsonResponse({'status': 'error', 'message': 'User not found'}, status=404)\n\n        template_content = get_email_template(template_name)\n        if template_content is None:\n            log_email_attempt(user_id, 'error', 'Template not found', template_name, subject)\n            return JsonResponse({'status': 'error', 'message': 'Email template not found'}, status=404)\n\n        try:\n            email_body = render_to_string('email_template.html', {\n                'username': user.username,\n                'content': message,\n                'custom_template': template_content\n            })\n        except Exception as e:\n            log_email_attempt(user_id, 'error', f'Template rendering failed: {str(e)}', template_name, subject)\n            return JsonResponse({'status': 'error', 'message': 'Failed to render email template'}, status=500)\n\n        try:\n            email = EmailMessage(subject, email_body, to=[user.email])\n            email.content_subtype = \"html\"\n            email.send()\n        except Exception as e:\n            log_email_attempt(user_id, 'error', f'Email sending failed: {str(e)}', template_name, subject)\n            return JsonResponse({'status': 'error', 'message': 'Failed to send email'}, status=500)\n\n        log_email_attempt(user_id, 'success', 'Email sent', template_name, subject)\n        return JsonResponse({'status': 'success', 'message': 'Email sent to user'})\n\n    except json.JSONDecodeError:\n        return JsonResponse({'status': 'error', 'message': 'Invalid JSON in request body'}, status=400)\n    except Exception as e:\n        logging.error(f\"Unexpected error in send_notification_email: {str(e)}\")\n        return JsonResponse({'status': 'error', 'message': 'An unexpected error occurred'}, status=500)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"vulnerability_samples/CWE-Unknown/sample_1_original.py","start":{"line":117,"col":9,"offset":3219},"end":{"line":118,"col":34,"offset":3306},"extra":{"metavars":{"$S":{"start":{"line":117,"col":9,"offset":3219},"end":{"line":117,"col":10,"offset":3220},"abstract_content":"s"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rule_name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"71cb1618477c7a8446251ffdde635192ebec63baa53984249a4988b7adadc24d2578cbdf7609563dbd0f225f9f851de05b7982d49ccb9f6ddf395cde5ee14f4e_0","lines":"        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind(('0.0.0.0', 1337))","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-Unknown/sample_1_original.py","start":{"line":132,"col":1,"offset":3625},"end":{"line":158,"col":90,"offset":5107},"extra":{"metavars":{"$R":{"start":{"line":133,"col":5,"offset":3642},"end":{"line":133,"col":15,"offset":3652},"abstract_content":"user_login"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"605c397814af986cf1042eaa104bb9a34e9eb9287b7baa7cd2c8fadd2af11f1b8c9bb04ccb85fcef75c9ce7609a6a8509df91a8889a494c98f82f5353c49138d_0","lines":"@csrf_exempt\ndef user_login(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            username = data.get('username')\n            password = data.get('password')\n            if not username or not password:\n                raise ValidationError(\"Username and password are required\")\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                logger.info(f\"User {username} logged in successfully\")\n                return JsonResponse({\"status\": \"success\"})\n            else:\n                logger.warning(f\"Failed login attempt for user {username}\")\n                return JsonResponse({\"status\": \"error\", \"message\": \"Invalid credentials\"}, status=401)\n        except json.JSONDecodeError:\n            logger.error(\"Invalid JSON in login request\")\n            return JsonResponse({\"status\": \"error\", \"message\": \"Invalid JSON\"}, status=400)\n        except ValidationError as ve:\n            logger.error(f\"Validation error in login: {str(ve)}\")\n            return JsonResponse({\"status\": \"error\", \"message\": str(ve)}, status=400)\n        except Exception as e:\n            logger.error(f\"Unexpected error in login: {str(e)}\")\n            return JsonResponse({\"status\": \"error\", \"message\": \"An unexpected error occurred\"}, status=500)\n    return JsonResponse({\"status\": \"error\", \"message\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.audit.csrf-exempt.no-csrf-exempt","path":"vulnerability_samples/CWE-Unknown/sample_1_original.py","start":{"line":166,"col":1,"offset":5279},"end":{"line":187,"col":90,"offset":6453},"extra":{"metavars":{"$R":{"start":{"line":168,"col":5,"offset":5312},"end":{"line":168,"col":17,"offset":5324},"abstract_content":"send_message"}},"message":"Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.","metadata":{"cwe":["CWE-352: Cross-Site Request Forgery (CSRF)"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["django"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site Request Forgery (CSRF)"],"source":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","shortlink":"https://sg.run/rd5e","semgrep.dev":{"rule":{"origin":"community","r_id":9469,"rule_id":"v8UnqO","rule_name":"python.django.security.audit.csrf-exempt.no-csrf-exempt","rv_id":946139,"url":"https://semgrep.dev/playground/r/xyTqn6x/python.django.security.audit.csrf-exempt.no-csrf-exempt","version_id":"xyTqn6x"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"efcab0549a831aaff2261876073019df9f530d4c1cd6bd1fad5755261955d480c55e32385e34d6c7dd97383e47ec30beb550923c9b4dd3acf6e52878068b0880_0","lines":"@login_required\n@csrf_exempt\ndef send_message(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            message = data.get('message')\n            if not message:\n                raise ValidationError(\"Message cannot be empty\")\n            ChatMessage.objects.create(user=request.user, message=message)\n            logger.info(f\"Message sent by user {request.user.username}\")\n            return JsonResponse({\"status\": \"success\"})\n        except json.JSONDecodeError:\n            logger.error(\"Invalid JSON in send_message request\")\n            return JsonResponse({\"status\": \"error\", \"message\": \"Invalid JSON\"}, status=400)\n        except ValidationError as ve:\n            logger.error(f\"Validation error in send_message: {str(ve)}\")\n            return JsonResponse({\"status\": \"error\", \"message\": str(ve)}, status=400)\n        except Exception as e:\n            logger.error(f\"Unexpected error in send_message: {str(e)}\")\n            return JsonResponse({\"status\": \"error\", \"message\": \"An unexpected error occurred\"}, status=500)\n    return JsonResponse({\"status\": \"error\", \"message\": \"Method not allowed\"}, status=405)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","path":"vulnerability_samples/CWE-Unknown/sample_2_original.py","start":{"line":114,"col":5,"offset":3762},"end":{"line":115,"col":47,"offset":3862},"extra":{"metavars":{"$S":{"start":{"line":114,"col":5,"offset":3762},"end":{"line":114,"col":6,"offset":3763},"abstract_content":"s"}},"message":"Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.","metadata":{"cwe":["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mishandled Sensitive Information"],"source":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","shortlink":"https://sg.run/rdln","semgrep.dev":{"rule":{"origin":"community","r_id":9669,"rule_id":"OrU3og","rule_name":"python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","rv_id":946369,"url":"https://semgrep.dev/playground/r/YDTvRek/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","version_id":"YDTvRek"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"8b64edbe025bee419d19061a416e4fdc25071a34becb085764be64aeea1b6891e11b790ad8462d013df7711a17db1d9df1c40fcca32543c7223dec4b9e951a64_0","lines":"    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('0.0.0.0', CONFIG[\"socket_port\"]))  # Vulnerable line","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":51,"col":17,"offset":1397},"end":{"line":51,"col":77,"offset":1457},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":49,"col":2,"offset":1287},"end":{"line":49,"col":5,"offset":1290},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":49,"col":6,"offset":1291},"end":{"line":49,"col":9,"offset":1294},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":49,"col":11,"offset":1296},"end":{"line":49,"col":26,"offset":1311},"abstract_content":"/search_flights"},"$FUNC":{"start":{"line":50,"col":11,"offset":1324},"end":{"line":50,"col":25,"offset":1338},"abstract_content":"search_flights"},"$LOG":{"start":{"line":51,"col":12,"offset":1392},"end":{"line":51,"col":16,"offset":1396},"abstract_content":"info"},"$SINK":{"start":{"line":51,"col":17,"offset":1397},"end":{"line":51,"col":77,"offset":1457},"abstract_content":"f\"Searching flights from {from_city} to {to_city} on {date}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ca7549b65e23b1a76dd4af4ba40277ac3b0853e4d08f1795c8b29828557b193d78fd278f2eb9f586267d69aea1aa8bf356edd7b1ed62a3f9cd1e619df2717d2c_0","lines":"    logger.info(f\"Searching flights from {from_city} to {to_city} on {date}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":50,"col":56,"offset":1369},"end":{"line":50,"col":60,"offset":1373}},"date"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":50,"col":56,"offset":1369},"end":{"line":50,"col":60,"offset":1373}},"content":"date"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":51,"col":17,"offset":1397},"end":{"line":51,"col":77,"offset":1457}},"f\"Searching flights from {from_city} to {to_city} on {date}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.xml.tainted-fastapi-xml-stdlib.tainted-fastapi-xml-stdlib","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":63,"col":27,"offset":1898},"end":{"line":63,"col":50,"offset":1921},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$APP":{"start":{"line":58,"col":2,"offset":1667},"end":{"line":58,"col":5,"offset":1670},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":58,"col":6,"offset":1671},"end":{"line":58,"col":10,"offset":1675},"abstract_content":"post"},"$ROUTESTRING":{"start":{"line":58,"col":12,"offset":1677},"end":{"line":58,"col":24,"offset":1689},"abstract_content":"/book_flight"},"$FUNC":{"start":{"line":59,"col":11,"offset":1702},"end":{"line":59,"col":22,"offset":1713},"abstract_content":"book_flight"},"$PARAM":{"start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718},"abstract_content":"file"},"$SINK":{"start":{"line":63,"col":41,"offset":1912},"end":{"line":63,"col":49,"offset":1920},"abstract_content":"xml_data"}},"message":"The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. The xml parsing libraries are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, they are still vulnerable to denial of service attacks such as billion laughs and quadratic blowup. To mitigate these attacks, it is recommended to use a different parser such as defusedxml.","metadata":{"likelihood":"LOW","impact":"HIGH","confidence":"MEDIUM","category":"security","subcategory":["vuln"],"cwe":["CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"],"display-name":"XML Entity Expansion with FastAPI","functional-categories":["web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi","xml::sink::xml-parser::sax","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.dom","xml::sink::xml-parser::xml.dom.minidom","xml::sink::xml-parser::xml.dom.pulldom","xml::sink::xml-parser::xml.etree","xml::sink::xml-parser::xml.sax"],"owasp":["A04:2017 - XML External Entities (XXE)","A05:2021 - Security Misconfiguration"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html","https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://cwe.mitre.org/data/definitions/776.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A05_2021-Security_Misconfiguration","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["fastapi","python","sax","stdlib","stdlib2","stdlib3","web","xml","xml.dom","xml.dom.minidom","xml.dom.pulldom","xml.etree","xml.sax"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XML Injection"],"source":"https://semgrep.dev/r/python.fastapi.xml.tainted-fastapi-xml-stdlib.tainted-fastapi-xml-stdlib","shortlink":"https://sg.run/yyw7O","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139068,"rule_id":"ReUD6L8","rule_name":"python.fastapi.xml.tainted-fastapi-xml-stdlib.tainted-fastapi-xml-stdlib","rv_id":1018717,"url":"https://semgrep.dev/playground/r/vdTGk4g/python.fastapi.xml.tainted-fastapi-xml-stdlib.tainted-fastapi-xml-stdlib","version_id":"vdTGk4g"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.xml.tainted-fastapi-xml-stdlib.tainted-fastapi-xml-stdlib","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"1c504088eec558c9c048e66098c8f90a8cc832d5810ced5399d686c18a7c8edf9dfe9eae769e150084af2dc12726a1f0d52f1b9cda1af473c473fa932109d6a7_0","lines":"        booking_details = ET.fromstring(xml_data)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718}},"file"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":61,"col":16,"offset":1845},"end":{"line":61,"col":21,"offset":1850}},"content":"await"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":61,"col":5,"offset":1834},"end":{"line":61,"col":13,"offset":1842}},"content":"xml_data"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":63,"col":27,"offset":1898},"end":{"line":63,"col":50,"offset":1921}},"ET.fromstring(xml_data)"]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":65,"col":26,"offset":2011},"end":{"line":65,"col":64,"offset":2049},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$APP":{"start":{"line":58,"col":2,"offset":1667},"end":{"line":58,"col":5,"offset":1670},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":58,"col":6,"offset":1671},"end":{"line":58,"col":10,"offset":1675},"abstract_content":"post"},"$ROUTESTRING":{"start":{"line":58,"col":12,"offset":1677},"end":{"line":58,"col":24,"offset":1689},"abstract_content":"/book_flight"},"$FUNC":{"start":{"line":59,"col":11,"offset":1702},"end":{"line":59,"col":22,"offset":1713},"abstract_content":"book_flight"},"$PARAM":{"start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718},"abstract_content":"file"},"$ELEMENT":{"start":{"line":63,"col":27,"offset":1898},"end":{"line":63,"col":50,"offset":1921},"abstract_content":"ET.fromstring(xml_data)"},"$SINK":{"start":{"line":65,"col":47,"offset":2032},"end":{"line":65,"col":63,"offset":2048},"abstract_content":"\"passenger_name\""}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with FastAPI","functional-categories":["web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["fastapi","python","stdlib","stdlib2","stdlib3","web","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","shortlink":"https://sg.run/r6X71","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139069,"rule_id":"AbU9Od8","rule_name":"python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","rv_id":1018718,"url":"https://semgrep.dev/playground/r/d6TPR4X/python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","version_id":"d6TPR4X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"36913b6196b8bf7a3697872317e0d7d621f73c7d52f189c1bd503cbda67679e90911e1711d01e656dd28bd27c02ab1b7c8a383ab77c68fae7452493cd52a859d_0","lines":"        passenger_name = booking_details.find(\"passenger_name\").text","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718}},"file"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":61,"col":16,"offset":1845},"end":{"line":61,"col":21,"offset":1850}},"content":"await"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":61,"col":5,"offset":1834},"end":{"line":61,"col":13,"offset":1842}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":63,"col":9,"offset":1880},"end":{"line":63,"col":24,"offset":1895}},"content":"booking_details"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":65,"col":26,"offset":2011},"end":{"line":65,"col":64,"offset":2049}},"booking_details.find(\"passenger_name\")"]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":66,"col":27,"offset":2081},"end":{"line":66,"col":66,"offset":2120},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"post"},"$APP":{"start":{"line":58,"col":2,"offset":1667},"end":{"line":58,"col":5,"offset":1670},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":58,"col":6,"offset":1671},"end":{"line":58,"col":10,"offset":1675},"abstract_content":"post"},"$ROUTESTRING":{"start":{"line":58,"col":12,"offset":1677},"end":{"line":58,"col":24,"offset":1689},"abstract_content":"/book_flight"},"$FUNC":{"start":{"line":59,"col":11,"offset":1702},"end":{"line":59,"col":22,"offset":1713},"abstract_content":"book_flight"},"$PARAM":{"start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718},"abstract_content":"file"},"$ELEMENT":{"start":{"line":63,"col":27,"offset":1898},"end":{"line":63,"col":50,"offset":1921},"abstract_content":"ET.fromstring(xml_data)"},"$SINK":{"start":{"line":66,"col":48,"offset":2102},"end":{"line":66,"col":65,"offset":2119},"abstract_content":"\"passport_number\""}},"message":"XPath queries are constructed dynamically on user-controlled input. This could lead to XPath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Thoroughly sanitize user input or use parameterized XPath queries if you can. The xml parsing library are safe from several known high-impact vulnerabilities such as external entity expansion and DTD retrieval. However, search queries in the XML documents are still vulnerable to XPath injection attacks.","metadata":{"likelihood":"MEDIUM","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"],"display-name":"XPath Injection with FastAPI","functional-categories":["web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi","xml::sink::xml-parser::stdlib","xml::sink::xml-parser::stdlib2","xml::sink::xml-parser::stdlib3","xml::sink::xml-parser::xml","xml::sink::xml-parser::xml.etree","xml::sink::xpath::stdlib","xml::sink::xpath::stdlib2","xml::sink::xpath::stdlib3","xml::sink::xpath::xml","xml::sink::xpath::xml.etree"],"owasp":["A03:2021 - Injection"],"references":["https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html","https://docs.python.org/3/library/xml.html#xml-vulnerabilities","https://owasp.org/Top10/A03_2021-Injection","https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing","https://pypi.org/project/defusedxml/"],"technology":["fastapi","python","stdlib","stdlib2","stdlib3","web","xml","xml.etree","xpath"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["XPath Injection"],"source":"https://semgrep.dev/r/python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","shortlink":"https://sg.run/r6X71","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":139069,"rule_id":"AbU9Od8","rule_name":"python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","rv_id":1018718,"url":"https://semgrep.dev/playground/r/d6TPR4X/python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","version_id":"d6TPR4X"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.xml.tainted-fastapi-xml-xpath-stdlib.tainted-fastapi-xml-xpath-stdlib","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"a0f9b2bd8d51afdf3fb075d57b6d2128a5c8731252e6aead33c4536fb23a91e512ec5e42e803adcbf59ac2059813c25f31e83998f0187464810f1bd17a9adb6e_0","lines":"        passport_number = booking_details.find(\"passport_number\").text","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718}},"file"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":59,"col":23,"offset":1714},"end":{"line":59,"col":27,"offset":1718}},"content":"file"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":61,"col":16,"offset":1845},"end":{"line":61,"col":21,"offset":1850}},"content":"await"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":61,"col":5,"offset":1834},"end":{"line":61,"col":13,"offset":1842}},"content":"xml_data"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":63,"col":9,"offset":1880},"end":{"line":63,"col":24,"offset":1895}},"content":"booking_details"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":66,"col":27,"offset":2081},"end":{"line":66,"col":66,"offset":2120}},"booking_details.find(\"passport_number\")"]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":128,"col":17,"offset":4926},"end":{"line":128,"col":65,"offset":4974},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":126,"col":2,"offset":4796},"end":{"line":126,"col":5,"offset":4799},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":126,"col":6,"offset":4800},"end":{"line":126,"col":9,"offset":4803},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":126,"col":11,"offset":4805},"end":{"line":126,"col":33,"offset":4827},"abstract_content":"/bookings/{booking_id}"},"$FUNC":{"start":{"line":127,"col":11,"offset":4840},"end":{"line":127,"col":22,"offset":4851},"abstract_content":"get_booking"},"$PARAM":{"start":{"line":127,"col":23,"offset":4852},"end":{"line":127,"col":33,"offset":4862},"abstract_content":"booking_id"},"$LOG":{"start":{"line":128,"col":12,"offset":4921},"end":{"line":128,"col":16,"offset":4925},"abstract_content":"info"},"$SINK":{"start":{"line":128,"col":17,"offset":4926},"end":{"line":128,"col":65,"offset":4974},"abstract_content":"f\"Fetching booking details for ID: {booking_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"d69de9fafd8a6fffedcfb916f1c4f2dade9927515784d5f34fced859091d4d6b2426a53f85c46dd514a7f2fc39213629f6bfb8ad7596e4c5db317fcf36383340_0","lines":"    logger.info(f\"Fetching booking details for ID: {booking_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":127,"col":23,"offset":4852},"end":{"line":127,"col":33,"offset":4862}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":127,"col":23,"offset":4852},"end":{"line":127,"col":33,"offset":4862}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":128,"col":17,"offset":4926},"end":{"line":128,"col":65,"offset":4974}},"f\"Fetching booking details for ID: {booking_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":132,"col":18,"offset":5092},"end":{"line":132,"col":52,"offset":5126},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"get"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":126,"col":2,"offset":4796},"end":{"line":126,"col":5,"offset":4799},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":126,"col":6,"offset":4800},"end":{"line":126,"col":9,"offset":4803},"abstract_content":"get"},"$ROUTESTRING":{"start":{"line":126,"col":11,"offset":4805},"end":{"line":126,"col":33,"offset":4827},"abstract_content":"/bookings/{booking_id}"},"$FUNC":{"start":{"line":127,"col":11,"offset":4840},"end":{"line":127,"col":22,"offset":4851},"abstract_content":"get_booking"},"$PARAM":{"start":{"line":127,"col":23,"offset":4852},"end":{"line":127,"col":33,"offset":4862},"abstract_content":"booking_id"},"$LOG":{"start":{"line":132,"col":12,"offset":5086},"end":{"line":132,"col":17,"offset":5091},"abstract_content":"error"},"$SINK":{"start":{"line":132,"col":18,"offset":5092},"end":{"line":132,"col":52,"offset":5126},"abstract_content":"f\"Booking not found: {booking_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"3dcda8c891849630914a27f8feadc85278ded00738b97c2241eb7a063623d0473bb458cdab4c072a3ac9bb66a9bb54b98269aeb35e3305878e6fc099f674ef13_0","lines":"    logger.error(f\"Booking not found: {booking_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":127,"col":23,"offset":4852},"end":{"line":127,"col":33,"offset":4862}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":127,"col":23,"offset":4852},"end":{"line":127,"col":33,"offset":4862}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":132,"col":18,"offset":5092},"end":{"line":132,"col":52,"offset":5126}},"f\"Booking not found: {booking_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":137,"col":17,"offset":5364},"end":{"line":137,"col":50,"offset":5397},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"put"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":135,"col":2,"offset":5199},"end":{"line":135,"col":5,"offset":5202},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":135,"col":6,"offset":5203},"end":{"line":135,"col":9,"offset":5206},"abstract_content":"put"},"$ROUTESTRING":{"start":{"line":135,"col":11,"offset":5208},"end":{"line":135,"col":39,"offset":5236},"abstract_content":"/update_booking/{booking_id}"},"$FUNC":{"start":{"line":136,"col":11,"offset":5249},"end":{"line":136,"col":25,"offset":5263},"abstract_content":"update_booking"},"$PARAM":{"start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274},"abstract_content":"booking_id"},"$LOG":{"start":{"line":137,"col":12,"offset":5359},"end":{"line":137,"col":16,"offset":5363},"abstract_content":"info"},"$SINK":{"start":{"line":137,"col":17,"offset":5364},"end":{"line":137,"col":50,"offset":5397},"abstract_content":"f\"Updating booking: {booking_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"0193d0993388b5976abbf0d0a7402f801f23c0bb366c2ea4d14d8ed63eb7d1313c2c7e247576e50d695f5ddcef490ac4150cc4010f751d4b226ea132757bc410_0","lines":"    logger.info(f\"Updating booking: {booking_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":137,"col":17,"offset":5364},"end":{"line":137,"col":50,"offset":5397}},"f\"Updating booking: {booking_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":141,"col":25,"offset":5567},"end":{"line":141,"col":69,"offset":5611},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"put"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":135,"col":2,"offset":5199},"end":{"line":135,"col":5,"offset":5202},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":135,"col":6,"offset":5203},"end":{"line":135,"col":9,"offset":5206},"abstract_content":"put"},"$ROUTESTRING":{"start":{"line":135,"col":11,"offset":5208},"end":{"line":135,"col":39,"offset":5236},"abstract_content":"/update_booking/{booking_id}"},"$FUNC":{"start":{"line":136,"col":11,"offset":5249},"end":{"line":136,"col":25,"offset":5263},"abstract_content":"update_booking"},"$PARAM":{"start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274},"abstract_content":"booking_id"},"$LOG":{"start":{"line":141,"col":20,"offset":5562},"end":{"line":141,"col":24,"offset":5566},"abstract_content":"info"},"$SINK":{"start":{"line":141,"col":25,"offset":5567},"end":{"line":141,"col":69,"offset":5611},"abstract_content":"f\"Booking {booking_id} updated successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"a6d15e61debc7a1070d5bbb55ab9dcb53ca0e23a0303b8a099df25c211b982bd4e59c148a9413f310e7b747c6d703870d214be10f6e5c3f68faf7920e8fae6e9_0","lines":"            logger.info(f\"Booking {booking_id} updated successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":141,"col":25,"offset":5567},"end":{"line":141,"col":69,"offset":5611}},"f\"Booking {booking_id} updated successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":143,"col":18,"offset":5693},"end":{"line":143,"col":52,"offset":5727},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":4,"offset":3},"abstract_content":"put"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":135,"col":2,"offset":5199},"end":{"line":135,"col":5,"offset":5202},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":135,"col":6,"offset":5203},"end":{"line":135,"col":9,"offset":5206},"abstract_content":"put"},"$ROUTESTRING":{"start":{"line":135,"col":11,"offset":5208},"end":{"line":135,"col":39,"offset":5236},"abstract_content":"/update_booking/{booking_id}"},"$FUNC":{"start":{"line":136,"col":11,"offset":5249},"end":{"line":136,"col":25,"offset":5263},"abstract_content":"update_booking"},"$PARAM":{"start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274},"abstract_content":"booking_id"},"$LOG":{"start":{"line":143,"col":12,"offset":5687},"end":{"line":143,"col":17,"offset":5692},"abstract_content":"error"},"$SINK":{"start":{"line":143,"col":18,"offset":5693},"end":{"line":143,"col":52,"offset":5727},"abstract_content":"f\"Booking not found: {booking_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"7077d55c7b99c803a9c8ada0dd430c2ed90c025c901fc5b2a2d5702aa2ad8c4906679507f9cd8360c5a20b12c3218b05a590c874ecf10601c9afeacec415ebc6_0","lines":"    logger.error(f\"Booking not found: {booking_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":136,"col":26,"offset":5264},"end":{"line":136,"col":36,"offset":5274}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":143,"col":18,"offset":5693},"end":{"line":143,"col":52,"offset":5727}},"f\"Booking not found: {booking_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":148,"col":17,"offset":5942},"end":{"line":148,"col":50,"offset":5975},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"delete"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":146,"col":2,"offset":5800},"end":{"line":146,"col":5,"offset":5803},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":146,"col":6,"offset":5804},"end":{"line":146,"col":12,"offset":5810},"abstract_content":"delete"},"$ROUTESTRING":{"start":{"line":146,"col":14,"offset":5812},"end":{"line":146,"col":42,"offset":5840},"abstract_content":"/delete_booking/{booking_id}"},"$FUNC":{"start":{"line":147,"col":11,"offset":5853},"end":{"line":147,"col":25,"offset":5867},"abstract_content":"delete_booking"},"$PARAM":{"start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878},"abstract_content":"booking_id"},"$LOG":{"start":{"line":148,"col":12,"offset":5937},"end":{"line":148,"col":16,"offset":5941},"abstract_content":"info"},"$SINK":{"start":{"line":148,"col":17,"offset":5942},"end":{"line":148,"col":50,"offset":5975},"abstract_content":"f\"Deleting booking: {booking_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"669776250879f082ee4780dafbd4f8dc2975cf91a9056cea0a1f59738589700ba4cc5d43573da38d8f73880970e4e0bdacbcb22e97277cb65d21cd28b90563a4_0","lines":"    logger.info(f\"Deleting booking: {booking_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":148,"col":17,"offset":5942},"end":{"line":148,"col":50,"offset":5975}},"f\"Deleting booking: {booking_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":152,"col":25,"offset":6118},"end":{"line":152,"col":69,"offset":6162},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"delete"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":146,"col":2,"offset":5800},"end":{"line":146,"col":5,"offset":5803},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":146,"col":6,"offset":5804},"end":{"line":146,"col":12,"offset":5810},"abstract_content":"delete"},"$ROUTESTRING":{"start":{"line":146,"col":14,"offset":5812},"end":{"line":146,"col":42,"offset":5840},"abstract_content":"/delete_booking/{booking_id}"},"$FUNC":{"start":{"line":147,"col":11,"offset":5853},"end":{"line":147,"col":25,"offset":5867},"abstract_content":"delete_booking"},"$PARAM":{"start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878},"abstract_content":"booking_id"},"$LOG":{"start":{"line":152,"col":20,"offset":6113},"end":{"line":152,"col":24,"offset":6117},"abstract_content":"info"},"$SINK":{"start":{"line":152,"col":25,"offset":6118},"end":{"line":152,"col":69,"offset":6162},"abstract_content":"f\"Booking {booking_id} deleted successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"70a35ef249194db7c72845a991b1fa9e456870bff6ce0ddc4a092920cb67902ec1186bc18345fdb0833afbc0b96b2be6194fabaef9be6fc7802a6af072a09184_0","lines":"            logger.info(f\"Booking {booking_id} deleted successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":152,"col":25,"offset":6118},"end":{"line":152,"col":69,"offset":6162}},"f\"Booking {booking_id} deleted successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":154,"col":18,"offset":6244},"end":{"line":154,"col":52,"offset":6278},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"delete"},"$LOGGER":{"start":{"line":15,"col":10,"offset":374},"end":{"line":15,"col":37,"offset":401},"abstract_content":"logging.getLogger(__name__)"},"$APP":{"start":{"line":146,"col":2,"offset":5800},"end":{"line":146,"col":5,"offset":5803},"abstract_content":"app","propagated_value":{"svalue_start":{"line":11,"col":7,"offset":294},"svalue_end":{"line":11,"col":16,"offset":303},"svalue_abstract_content":"FastAPI()"}},"$ROUTE":{"start":{"line":146,"col":6,"offset":5804},"end":{"line":146,"col":12,"offset":5810},"abstract_content":"delete"},"$ROUTESTRING":{"start":{"line":146,"col":14,"offset":5812},"end":{"line":146,"col":42,"offset":5840},"abstract_content":"/delete_booking/{booking_id}"},"$FUNC":{"start":{"line":147,"col":11,"offset":5853},"end":{"line":147,"col":25,"offset":5867},"abstract_content":"delete_booking"},"$PARAM":{"start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878},"abstract_content":"booking_id"},"$LOG":{"start":{"line":154,"col":12,"offset":6238},"end":{"line":154,"col":17,"offset":6243},"abstract_content":"error"},"$SINK":{"start":{"line":154,"col":18,"offset":6244},"end":{"line":154,"col":52,"offset":6278},"abstract_content":"f\"Booking not found: {booking_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with FastAPI","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::fastapi","web::source::form-data::fastapi","web::source::header::fastapi","web::source::http-body::fastapi","web::source::http-params::fastapi","web::source::url-path-params::fastapi"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://fastapi.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["fastapi","log","logging","stdlib","stdlib2","stdlib3","web"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","shortlink":"https://sg.run/4bZjZ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":133300,"rule_id":"7KUg6y6","rule_name":"python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","rv_id":1018697,"url":"https://semgrep.dev/playground/r/l4TxPWy/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","version_id":"l4TxPWy"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.fastapi.log.tainted-log-injection-stdlib-fastapi.tainted-log-injection-stdlib-fastapi","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c5afbee53e70c106c21f94122de558a011279450919f318f8a52fcc408e590d64bceb08345ff7f7f270eb7389ab438d0f2828836f1afcf24ac5611c187ed77d8_0","lines":"    logger.error(f\"Booking not found: {booking_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878}},"booking_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":147,"col":26,"offset":5868},"end":{"line":147,"col":36,"offset":5878}},"content":"booking_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_67_original.py","start":{"line":154,"col":18,"offset":6244},"end":{"line":154,"col":52,"offset":6278}},"f\"Booking not found: {booking_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","path":"vulnerability_samples/CWE-Unknown/sample_76_original.py","start":{"line":59,"col":72,"offset":1931},"end":{"line":59,"col":76,"offset":1935},"extra":{"metavars":{"$FUNC":{"start":{"line":59,"col":35,"offset":1894},"end":{"line":59,"col":47,"offset":1906},"abstract_content":"check_output"},"$TRUE":{"start":{"line":59,"col":72,"offset":1931},"end":{"line":59,"col":76,"offset":1935},"abstract_content":"True"}},"message":"Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.","fix":"False","metadata":{"source-rule-url":"https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html","owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"],"references":["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess","https://docs.python.org/3/library/subprocess.html"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["secure default"],"likelihood":"HIGH","impact":"LOW","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Command Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","shortlink":"https://sg.run/J92w","semgrep.dev":{"rule":{"origin":"community","r_id":9646,"rule_id":"DbUpz2","rule_name":"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","rv_id":946382,"url":"https://semgrep.dev/playground/r/YDTvReW/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","version_id":"YDTvReW"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"723763cbc1f9c99c7bbed63af1ada6b028100d82da865f8f905380a0528a886c868b4adbe430b48238d28486c91362d708c9ddf4843b0204aa9c0215f828978c_0","lines":"            response = subprocess.check_output(f\"cat {command}\", shell=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":37,"col":26,"offset":1173},"end":{"line":37,"col":118,"offset":1265},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":33,"col":28,"offset":1031},"end":{"line":33,"col":32,"offset":1035},"abstract_content":"form"},"$ENGINE":{"start":{"line":36,"col":18,"offset":1122},"end":{"line":36,"col":24,"offset":1128},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":36,"col":18,"offset":1122},"end":{"line":36,"col":34,"offset":1138},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":37,"col":39,"offset":1186},"end":{"line":37,"col":93,"offset":1240},"abstract_content":"text(\"SELECT * FROM users WHERE username = :username\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"33114d33c513c89a6435243636d7dc23200c1ba4345aaf78463e5b1ec071e71cf11b63c422001c803bd94b1d53afde6f6b4666324d13b981c6ed0f172aa8c504_0","lines":"                result = conn.execute(text(\"SELECT * FROM users WHERE username = :username\"), {\"username\": username}).fetchone()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":33,"col":20,"offset":1023},"end":{"line":33,"col":44,"offset":1047}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":33,"col":9,"offset":1012},"end":{"line":33,"col":17,"offset":1020}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":37,"col":26,"offset":1173},"end":{"line":37,"col":118,"offset":1265}},"conn.execute(text(\"SELECT * FROM users WHERE username = :username\"), {\"username\": username})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":41,"col":34,"offset":1506},"end":{"line":41,"col":75,"offset":1547},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":33,"col":28,"offset":1031},"end":{"line":33,"col":32,"offset":1035},"abstract_content":"form"},"$LOG":{"start":{"line":41,"col":29,"offset":1501},"end":{"line":41,"col":33,"offset":1505},"abstract_content":"info"},"$SINK":{"start":{"line":41,"col":34,"offset":1506},"end":{"line":41,"col":75,"offset":1547},"abstract_content":"f\"User {username} logged in successfully\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"887d71b7f41e7e69167a0e173052854f0b93709f6cfee66e014509a3bd4fb7fd7b1022d73bb65cee3db8a9507579d10aad40027e94c811b6de804a14ae502ab4_0","lines":"                    logging.info(f\"User {username} logged in successfully\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":33,"col":20,"offset":1023},"end":{"line":33,"col":44,"offset":1047}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":33,"col":9,"offset":1012},"end":{"line":33,"col":17,"offset":1020}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":41,"col":34,"offset":1506},"end":{"line":41,"col":75,"offset":1547}},"f\"User {username} logged in successfully\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":44,"col":37,"offset":1665},"end":{"line":44,"col":80,"offset":1708},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":33,"col":28,"offset":1031},"end":{"line":33,"col":32,"offset":1035},"abstract_content":"form"},"$LOG":{"start":{"line":44,"col":29,"offset":1657},"end":{"line":44,"col":36,"offset":1664},"abstract_content":"warning"},"$SINK":{"start":{"line":44,"col":37,"offset":1665},"end":{"line":44,"col":80,"offset":1708},"abstract_content":"f\"Failed login attempt for user {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5f8156352c30cf003d548e1b43cbf3ca72c1c293c494e444498e636b75fe0aedb5218ef2572727baea364010a9a5dbadf2d0f389e521d2af342a5a2e66d1189e_0","lines":"                    logging.warning(f\"Failed login attempt for user {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":33,"col":20,"offset":1023},"end":{"line":33,"col":44,"offset":1047}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":33,"col":9,"offset":1012},"end":{"line":33,"col":17,"offset":1020}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":44,"col":37,"offset":1665},"end":{"line":44,"col":80,"offset":1708}},"f\"Failed login attempt for user {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":57,"col":17,"offset":2159},"end":{"line":58,"col":101,"offset":2371},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":52,"col":28,"offset":1967},"end":{"line":52,"col":32,"offset":1971},"abstract_content":"form"},"$ENGINE":{"start":{"line":56,"col":18,"offset":2117},"end":{"line":56,"col":24,"offset":2123},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":56,"col":18,"offset":2117},"end":{"line":56,"col":34,"offset":2133},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":57,"col":30,"offset":2172},"end":{"line":57,"col":127,"offset":2269},"abstract_content":"text(\"INSERT INTO users (username, password, is_admin) VALUES (:username, :password, :is_admin)\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"0f8d3c0f2bfdf58ac1eec1cc3010f2c379c37b01c79db004da32af777353cc120083d1d8e8b2001555e7319b36c0069ead7af58b709ddc1787a79e0fb8ea58fb_0","lines":"                conn.execute(text(\"INSERT INTO users (username, password, is_admin) VALUES (:username, :password, :is_admin)\"),\n                             {\"username\": username, \"password\": hashed_password, \"is_admin\": False})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":52,"col":20,"offset":1959},"end":{"line":52,"col":44,"offset":1983}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":52,"col":9,"offset":1948},"end":{"line":52,"col":17,"offset":1956}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":57,"col":17,"offset":2159},"end":{"line":58,"col":101,"offset":2371}},"conn.execute(text(\"INSERT INTO users (username, password, is_admin) VALUES (:username, :password, :is_admin)\"),\n                             {\"username\": username, \"password\": hashed_password, \"is_admin\": False})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":59,"col":30,"offset":2401},"end":{"line":59,"col":64,"offset":2435},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":52,"col":28,"offset":1967},"end":{"line":52,"col":32,"offset":1971},"abstract_content":"form"},"$LOG":{"start":{"line":59,"col":25,"offset":2396},"end":{"line":59,"col":29,"offset":2400},"abstract_content":"info"},"$SINK":{"start":{"line":59,"col":30,"offset":2401},"end":{"line":59,"col":64,"offset":2435},"abstract_content":"f\"New user registered: {username}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"477fa38805f83ef3651ee14a922e62c644c328c3ff9999534103d486086eb35106f18e698885e1fad7f211e359042264217adebb7b4236685bbf0adef7c39c49_0","lines":"                logging.info(f\"New user registered: {username}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":52,"col":20,"offset":1959},"end":{"line":52,"col":44,"offset":1983}},"request.form['username']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":52,"col":9,"offset":1948},"end":{"line":52,"col":17,"offset":1956}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":59,"col":30,"offset":2401},"end":{"line":59,"col":64,"offset":2435}},"f\"New user registered: {username}\""]]},"engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":11,"offset":2817},"end":{"line":73,"col":72,"offset":2878},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":72,"col":21,"offset":2785},"end":{"line":72,"col":25,"offset":2789},"abstract_content":"args"},"$SQLSTR":{"start":{"line":73,"col":12,"offset":2818},"end":{"line":73,"col":57,"offset":2863},"abstract_content":"SELECT * FROM products WHERE name LIKE '%{}%'"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"141518738153d1a6ee17beba1d956cfd9f53599defc284ec9fd87817adb3f81f49821bd728400e5740aff692d9dccaa199839a18f695dbd0be8b76cafa8e5ec5_0","lines":"    sql = \"SELECT * FROM products WHERE name LIKE '%{}%'\".format(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":13,"offset":2777},"end":{"line":72,"col":25,"offset":2789}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":5,"offset":2769},"end":{"line":72,"col":10,"offset":2774}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":11,"offset":2817},"end":{"line":73,"col":72,"offset":2878}},"\"SELECT * FROM products WHERE name LIKE '%{}%'\".format(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":11,"offset":2817},"end":{"line":73,"col":72,"offset":2878},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":72,"col":21,"offset":2785},"end":{"line":72,"col":25,"offset":2789},"abstract_content":"args"},"$SQLSTR":{"start":{"line":73,"col":12,"offset":2818},"end":{"line":73,"col":57,"offset":2863},"abstract_content":"SELECT * FROM products WHERE name LIKE '%{}%'"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"a130e7b9e482de35b4e50ea4427d87324c726276a79009612ac4c6370b07b2f7f042bf7d1efed0808f1e5c97dec7611e22395037931babb4c347e4448420fecc_0","lines":"    sql = \"SELECT * FROM products WHERE name LIKE '%{}%'\".format(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":13,"offset":2777},"end":{"line":72,"col":25,"offset":2789}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":5,"offset":2769},"end":{"line":72,"col":10,"offset":2774}},"content":"query"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":11,"offset":2817},"end":{"line":73,"col":72,"offset":2878}},"\"SELECT * FROM products WHERE name LIKE '%{}%'\".format(query)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":23,"offset":2949},"end":{"line":76,"col":46,"offset":2972},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":72,"col":21,"offset":2785},"end":{"line":72,"col":25,"offset":2789},"abstract_content":"args"},"$ENGINE":{"start":{"line":75,"col":14,"offset":2901},"end":{"line":75,"col":20,"offset":2907},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":75,"col":14,"offset":2901},"end":{"line":75,"col":30,"offset":2917},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":76,"col":36,"offset":2962},"end":{"line":76,"col":45,"offset":2971},"abstract_content":"text(sql)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"a0a8da80c5f335148e20ebb94b0106be606f1de09d16a4c320f6ee33024832711af50e64bc4b8b510d62315ff8045d1d53898d90e63f1f3721b2f52b93926e82_0","lines":"            results = conn.execute(text(sql)).fetchall()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":13,"offset":2777},"end":{"line":72,"col":42,"offset":2806}},"request.args.get('query', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":5,"offset":2769},"end":{"line":72,"col":10,"offset":2774}},"content":"query"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":5,"offset":2811},"end":{"line":73,"col":8,"offset":2814}},"content":"sql"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":23,"offset":2949},"end":{"line":76,"col":46,"offset":2972}},"conn.execute(text(sql))"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.generic-sql-flask.generic-sql-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":36,"offset":2962},"end":{"line":76,"col":45,"offset":2971},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":72,"col":21,"offset":2785},"end":{"line":72,"col":25,"offset":2789},"abstract_content":"args"},"$AIOMYSQL_CURSOR":{"start":{"line":75,"col":14,"offset":2901},"end":{"line":75,"col":30,"offset":2917},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":76,"col":36,"offset":2962},"end":{"line":76,"col":45,"offset":2971},"abstract_content":"text(sql)"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with Flask","functional-categories":["db::sink::sql-or-nosql-query::aiomysql","db::sink::sql-or-nosql-query::aiopg","db::sink::sql-or-nosql-query::mysql-connector","db::sink::sql-or-nosql-query::mysqldb","db::sink::sql-or-nosql-query::pep249","db::sink::sql-or-nosql-query::psycopg2","db::sink::sql-or-nosql-query::pymssql","db::sink::sql-or-nosql-query::pymysql","db::sink::sql-or-nosql-query::pyodbc","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["aiomysql","aiopg","db-api","flask","flask-wtf","mssql","mysql","mysql-connector","mysqldb","pep249","postgres","psycopg2","pymssql","pymysql","pyodbc","sql","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","shortlink":"https://sg.run/AbKXQ","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116506,"rule_id":"0oULG2d","rule_name":"python.flask.db.generic-sql-flask.generic-sql-flask","rv_id":1014982,"url":"https://semgrep.dev/playground/r/ZRT3L3P/python.flask.db.generic-sql-flask.generic-sql-flask","version_id":"ZRT3L3P"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"e993dc5bcd38417f545fbc5d6f059d15372ae7de886ac7eef4393b789cc67fcda3dc9d5d2505f9dda03aa85577ebcc55d00127bf00dfa702c5d586935b5d1d6a_0","lines":"            results = conn.execute(text(sql)).fetchall()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":13,"offset":2777},"end":{"line":72,"col":42,"offset":2806}},"request.args.get('query', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":5,"offset":2769},"end":{"line":72,"col":10,"offset":2774}},"content":"query"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":5,"offset":2811},"end":{"line":73,"col":8,"offset":2814}},"content":"sql"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":36,"offset":2962},"end":{"line":76,"col":45,"offset":2971}},"text(sql)"]]},"engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":36,"offset":2962},"end":{"line":76,"col":45,"offset":2971},"extra":{"metavars":{"$X":{"start":{"line":73,"col":11,"offset":2817},"end":{"line":73,"col":58,"offset":2864},"abstract_content":"\"SELECT * FROM products WHERE name LIKE '%{}%'\""}},"message":"sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"category":"security","technology":["sqlalchemy"],"confidence":"MEDIUM","references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","shortlink":"https://sg.run/yP1O","semgrep.dev":{"rule":{"origin":"community","r_id":15824,"rule_id":"r6U2wE","rule_name":"python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","rv_id":946451,"url":"https://semgrep.dev/playground/r/LjTXyKX/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","version_id":"LjTXyKX"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"fb3ca97fb401654748b9337e0f561de73d8660235c76c6e5296e195651b640a4d8722b2b88f97e89a63531214e3313ae83f74b20eb7d36979cbf152aa7729a54_0","lines":"            results = conn.execute(text(sql)).fetchall()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":11,"offset":2817},"end":{"line":73,"col":72,"offset":2878}},"\"SELECT * FROM products WHERE name LIKE '%{}%'\".format(query)"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":5,"offset":2811},"end":{"line":73,"col":8,"offset":2814}},"content":"sql"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":36,"offset":2962},"end":{"line":76,"col":45,"offset":2971}},"text(sql)"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-flask.sqlalchemy-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":41,"offset":2967},"end":{"line":76,"col":44,"offset":2970},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"args"},"$PROPERTY":{"start":{"line":72,"col":21,"offset":2785},"end":{"line":72,"col":25,"offset":2789},"abstract_content":"args"},"$SINK":{"start":{"line":76,"col":41,"offset":2967},"end":{"line":76,"col":44,"offset":2970},"abstract_content":"sql","propagated_value":{"svalue_start":{"line":73,"col":11,"offset":2817},"svalue_end":{"line":73,"col":72,"offset":2878},"svalue_abstract_content":"\"SELECT * FROM products WHERE name LIKE '%{}%'\".format(query)"}}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. Use the SQLAlchemy ORM provided functions to build SQL queries instead to avoid SQL injection.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/20/core/sqlelement.html#sqlalchemy.sql.expression.text","https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-flask.sqlalchemy-flask","shortlink":"https://sg.run/Kx1Xj","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116511,"rule_id":"6JUvR1p","rule_name":"python.flask.db.sqlalchemy-flask.sqlalchemy-flask","rv_id":1018719,"url":"https://semgrep.dev/playground/r/ZRT3EGb/python.flask.db.sqlalchemy-flask.sqlalchemy-flask","version_id":"ZRT3EGb"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-flask.sqlalchemy-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"dd578f710926a97f6151ff3c05f4116154861e68d078e45c35a6e49141e73cf583ae4ac1642fd483107e993320083857ee9b2c116502abdaa8fcbc2bd91ed8f7_0","lines":"            results = conn.execute(text(sql)).fetchall()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":13,"offset":2777},"end":{"line":72,"col":42,"offset":2806}},"request.args.get('query', '')"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":72,"col":5,"offset":2769},"end":{"line":72,"col":10,"offset":2774}},"content":"query"},{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":73,"col":5,"offset":2811},"end":{"line":73,"col":8,"offset":2814}},"content":"sql"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":76,"col":41,"offset":2967},"end":{"line":76,"col":44,"offset":2970}},"sql"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":101,"col":17,"offset":3848},"end":{"line":102,"col":61,"offset":3988},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":97,"col":24,"offset":3725},"end":{"line":97,"col":28,"offset":3729},"abstract_content":"form"},"$ENGINE":{"start":{"line":100,"col":18,"offset":3806},"end":{"line":100,"col":24,"offset":3812},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":100,"col":18,"offset":3806},"end":{"line":100,"col":34,"offset":3822},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":101,"col":30,"offset":3861},"end":{"line":101,"col":95,"offset":3926},"abstract_content":"text(\"INSERT INTO products (name, price) VALUES (:name, :price)\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"89cda26abec0e3d081859442b5da64117743afe54c28c2c6d634694bd3ede6612f1ba1dd6f52d3b3001cb454edfd9f130bde970255a25f6ce09a3911a6d832b5_0","lines":"                conn.execute(text(\"INSERT INTO products (name, price) VALUES (:name, :price)\"),\n                             {\"name\": name, \"price\": price})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":97,"col":16,"offset":3717},"end":{"line":97,"col":36,"offset":3737}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":97,"col":9,"offset":3710},"end":{"line":97,"col":13,"offset":3714}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":101,"col":17,"offset":3848},"end":{"line":102,"col":61,"offset":3988}},"conn.execute(text(\"INSERT INTO products (name, price) VALUES (:name, :price)\"),\n                             {\"name\": name, \"price\": price})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":103,"col":26,"offset":4014},"end":{"line":103,"col":54,"offset":4042},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":5,"offset":4},"abstract_content":"form"},"$PROPERTY":{"start":{"line":97,"col":24,"offset":3725},"end":{"line":97,"col":28,"offset":3729},"abstract_content":"form"},"$LOG":{"start":{"line":103,"col":21,"offset":4009},"end":{"line":103,"col":25,"offset":4013},"abstract_content":"info"},"$SINK":{"start":{"line":103,"col":26,"offset":4014},"end":{"line":103,"col":54,"offset":4042},"abstract_content":"f\"New product added: {name}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"c3baf39cf6d9902742736fea3b6f37accd4e342f93b69891e98854624c660b127aa77a3acabc8e0de6fe4c802c0424a85e029db20fd5346494c69a1d48a70bd0_0","lines":"            logging.info(f\"New product added: {name}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":97,"col":16,"offset":3717},"end":{"line":97,"col":36,"offset":3737}},"request.form['name']"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":97,"col":9,"offset":3710},"end":{"line":97,"col":13,"offset":3714}},"content":"name"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":103,"col":26,"offset":4014},"end":{"line":103,"col":54,"offset":4042}},"f\"New product added: {name}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":117,"col":17,"offset":4557},"end":{"line":118,"col":79,"offset":4721},"extra":{"metavars":{"$APP":{"start":{"line":109,"col":2,"offset":4240},"end":{"line":109,"col":5,"offset":4243},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":264},"svalue_end":{"line":8,"col":22,"offset":279},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":109,"col":6,"offset":4244},"end":{"line":109,"col":11,"offset":4249},"abstract_content":"route"},"$FUNC":{"start":{"line":111,"col":5,"offset":4336},"end":{"line":111,"col":17,"offset":4348},"abstract_content":"edit_product"},"$PARAM":{"start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359},"abstract_content":"product_id"},"$ENGINE":{"start":{"line":113,"col":14,"offset":4384},"end":{"line":113,"col":20,"offset":4390},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":113,"col":14,"offset":4384},"end":{"line":113,"col":30,"offset":4400},"abstract_content":"engine.connect()"},"$PROPERTY":{"start":{"line":115,"col":32,"offset":4482},"end":{"line":115,"col":36,"offset":4486},"abstract_content":"form"},"$SINK":{"start":{"line":117,"col":30,"offset":4570},"end":{"line":117,"col":101,"offset":4641},"abstract_content":"text(\"UPDATE products SET name = :name, price = :price WHERE id = :id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"17fd497155f4d239226f21853bb8faed50b72bd1bf884ac8c09885a3e2f893fdc427c0224566647a9156a1194ba1168433380a6b5fc7ecb5bd1a9388221b824c_0","lines":"                conn.execute(text(\"UPDATE products SET name = :name, price = :price WHERE id = :id\"),\n                             {\"name\": name, \"price\": price, \"id\": product_id})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":117,"col":17,"offset":4557},"end":{"line":118,"col":79,"offset":4721}},"conn.execute(text(\"UPDATE products SET name = :name, price = :price WHERE id = :id\"),\n                             {\"name\": name, \"price\": price, \"id\": product_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":119,"col":30,"offset":4751},"end":{"line":119,"col":65,"offset":4786},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":109,"col":2,"offset":4240},"end":{"line":109,"col":5,"offset":4243},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":264},"svalue_end":{"line":8,"col":22,"offset":279},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":109,"col":6,"offset":4244},"end":{"line":109,"col":11,"offset":4249},"abstract_content":"route"},"$FUNC":{"start":{"line":111,"col":5,"offset":4336},"end":{"line":111,"col":17,"offset":4348},"abstract_content":"edit_product"},"$PARAM":{"start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359},"abstract_content":"product_id"},"$LOG":{"start":{"line":119,"col":25,"offset":4746},"end":{"line":119,"col":29,"offset":4750},"abstract_content":"info"},"$SINK":{"start":{"line":119,"col":30,"offset":4751},"end":{"line":119,"col":65,"offset":4786},"abstract_content":"f\"Product updated: ID {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"ddd40f6bcac4cdfdd6827ffa444a3f9f24f02cf25557b05058e333c2da0417a04164bfcdb656191b7fb2c2438d7751dae97b7135a0298cde8644986baffaf093_0","lines":"                logging.info(f\"Product updated: ID {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":119,"col":30,"offset":4751},"end":{"line":119,"col":65,"offset":4786}},"f\"Product updated: ID {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":121,"col":23,"offset":4869},"end":{"line":121,"col":102,"offset":4948},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":109,"col":2,"offset":4240},"end":{"line":109,"col":5,"offset":4243},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":264},"svalue_end":{"line":8,"col":22,"offset":279},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":109,"col":6,"offset":4244},"end":{"line":109,"col":11,"offset":4249},"abstract_content":"route"},"$FUNC":{"start":{"line":111,"col":5,"offset":4336},"end":{"line":111,"col":17,"offset":4348},"abstract_content":"edit_product"},"$PARAM":{"start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359},"abstract_content":"product_id"},"$ENGINE":{"start":{"line":113,"col":14,"offset":4384},"end":{"line":113,"col":20,"offset":4390},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":113,"col":14,"offset":4384},"end":{"line":113,"col":30,"offset":4400},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":121,"col":36,"offset":4882},"end":{"line":121,"col":81,"offset":4927},"abstract_content":"text(\"SELECT * FROM products WHERE id = :id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"5b0fe410120b3571e887519777f2cd196141eb7e14aa725517a5502dcb7ebe40eda1895be1721f87b20fa11278e207af31903daffe01e125bf87be97cd4d8010_0","lines":"            product = conn.execute(text(\"SELECT * FROM products WHERE id = :id\"), {\"id\": product_id}).fetchone()","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":111,"col":18,"offset":4349},"end":{"line":111,"col":28,"offset":4359}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":121,"col":23,"offset":4869},"end":{"line":121,"col":102,"offset":4948}},"conn.execute(text(\"SELECT * FROM products WHERE id = :id\"), {\"id\": product_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":132,"col":13,"offset":5317},"end":{"line":132,"col":90,"offset":5394},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":127,"col":2,"offset":5156},"end":{"line":127,"col":5,"offset":5159},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":264},"svalue_end":{"line":8,"col":22,"offset":279},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":127,"col":6,"offset":5160},"end":{"line":127,"col":11,"offset":5165},"abstract_content":"route"},"$FUNC":{"start":{"line":129,"col":5,"offset":5229},"end":{"line":129,"col":19,"offset":5243},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":129,"col":20,"offset":5244},"end":{"line":129,"col":30,"offset":5254},"abstract_content":"product_id"},"$ENGINE":{"start":{"line":131,"col":14,"offset":5279},"end":{"line":131,"col":20,"offset":5285},"abstract_content":"engine","propagated_value":{"svalue_start":{"line":10,"col":10,"offset":321},"svalue_end":{"line":10,"col":47,"offset":358},"svalue_abstract_content":"create_engine(\"sqlite:///example.db\")"}},"$SQLALCHEMY_CONN":{"start":{"line":131,"col":14,"offset":5279},"end":{"line":131,"col":30,"offset":5295},"abstract_content":"engine.connect()"},"$SINK":{"start":{"line":132,"col":26,"offset":5330},"end":{"line":132,"col":69,"offset":5373},"abstract_content":"text(\"DELETE FROM products WHERE id = :id\")"}},"message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions.","metadata":{"likelihood":"HIGH","impact":"HIGH","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"cwe2020-top25":true,"cwe2021-top25":true,"cwe2022-top25":true,"display-name":"SQL Injection with SQLAlchemy","functional-categories":["db::sink::sql-or-nosql-query::sqlalchemy","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"technology":["flask","flask-wtf","sql","sqlalchemy","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","shortlink":"https://sg.run/WAbpo","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116509,"rule_id":"lBU4p85","rule_name":"python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","rv_id":1014986,"url":"https://semgrep.dev/playground/r/LjTX1XK/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","version_id":"LjTX1XK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.db.sqlalchemy-connection-flask.sqlalchemy-connection-flask","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"CRITICAL","fingerprint":"ce68579484ed9111efe338d7f989611ee41c435a5bf546f0074991a96c9dc6f2aa93b87c38d3880e3c086470865a7b38a1ba8c60a79e15c7ba15c702589c0648_0","lines":"            conn.execute(text(\"DELETE FROM products WHERE id = :id\"), {\"id\": product_id})","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":129,"col":20,"offset":5244},"end":{"line":129,"col":30,"offset":5254}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":129,"col":20,"offset":5244},"end":{"line":129,"col":30,"offset":5254}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":132,"col":13,"offset":5317},"end":{"line":132,"col":90,"offset":5394}},"conn.execute(text(\"DELETE FROM products WHERE id = :id\"), {\"id\": product_id})"]]},"engine_kind":"PRO"}},{"check_id":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":133,"col":22,"offset":5416},"end":{"line":133,"col":57,"offset":5451},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":6,"offset":5},"abstract_content":"route"},"$APP":{"start":{"line":127,"col":2,"offset":5156},"end":{"line":127,"col":5,"offset":5159},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":264},"svalue_end":{"line":8,"col":22,"offset":279},"svalue_abstract_content":"Flask(__name__)"}},"$ROUTE":{"start":{"line":127,"col":6,"offset":5160},"end":{"line":127,"col":11,"offset":5165},"abstract_content":"route"},"$FUNC":{"start":{"line":129,"col":5,"offset":5229},"end":{"line":129,"col":19,"offset":5243},"abstract_content":"delete_product"},"$PARAM":{"start":{"line":129,"col":20,"offset":5244},"end":{"line":129,"col":30,"offset":5254},"abstract_content":"product_id"},"$LOG":{"start":{"line":133,"col":17,"offset":5411},"end":{"line":133,"col":21,"offset":5415},"abstract_content":"info"},"$SINK":{"start":{"line":133,"col":22,"offset":5416},"end":{"line":133,"col":57,"offset":5451},"abstract_content":"f\"Product deleted: ID {product_id}\""}},"message":"Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-117: Improper Output Neutralization for Logs"],"display-name":"Log Injection with Flask","functional-categories":["log::sink::log::stdlib","log::sink::log::stdlib2","log::sink::log::stdlib3","web::source::cookie::flask","web::source::form-data::flask","web::source::form-data::flask-wtf","web::source::form-data::wtforms","web::source::header::flask","web::source::http-body::flask","web::source::http-params::flask","web::source::url-path-params::flask"],"owasp":["A09:2021 - Security Logging and Monitoring Failures"],"references":["https://cwe.mitre.org/data/definitions/117.html","https://flask.palletsprojects.com/en/2.3.x/logging/","https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures"],"technology":["flask","flask-wtf","log","logging","stdlib","stdlib2","stdlib3","web","wtforms"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","shortlink":"https://sg.run/2Zep8","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116519,"rule_id":"9AUd3ZR","rule_name":"python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","rv_id":983031,"url":"https://semgrep.dev/playground/r/l4Tx3nK/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","version_id":"l4Tx3nK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.log.tainted-log-injection-stdlib-flask.tainted-log-injection-stdlib-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"39a126da3067b01003b2297d047ea6fdc7390c998cf9db8dff9c71fb0970c63c05ffadaa0924aa4eab5543367de92f7399eaf63c04679a9f125113d9f357cf8d_0","lines":"        logging.info(f\"Product deleted: ID {product_id}\")","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":129,"col":20,"offset":5244},"end":{"line":129,"col":30,"offset":5254}},"product_id"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":129,"col":20,"offset":5244},"end":{"line":129,"col":30,"offset":5254}},"content":"product_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":133,"col":22,"offset":5416},"end":{"line":133,"col":57,"offset":5451}},"f\"Product deleted: ID {product_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.debug.debug-flask.active-debug-code-flask","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":170,"col":5,"offset":6682},"end":{"line":170,"col":24,"offset":6701},"extra":{"metavars":{},"message":"The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.","metadata":{"likelihood":"LOW","impact":"MEDIUM","confidence":"HIGH","category":"security","subcategory":["vuln"],"cwe":["CWE-489: Active Debug Code"],"display-name":"Active Debug Code in Flask","functional-categories":["debug::search::active-debug-code"],"references":["https://flask.palletsprojects.com/en/3.0.x/debugging/"],"technology":["flask","python"],"license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","shortlink":"https://sg.run/lBbpB","semgrep.dev":{"rule":{"origin":"pro_rules","r_id":116513,"rule_id":"zdUKBnK","rule_name":"python.flask.debug.debug-flask.active-debug-code-flask","rv_id":947918,"url":"https://semgrep.dev/playground/r/ZRT3q9v/python.flask.debug.debug-flask.active-debug-code-flask","version_id":"ZRT3q9v"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"INFO","fingerprint":"5b050ee034e5a09851ec441677857d7ec232b45dc63afeeb2f9a4f9a377c76ef486dd6b47ac9dc48c8fbc15821c490f306be3fbe3deb8e095e6f8a2cd89494e6_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.debug-enabled.debug-enabled","path":"vulnerability_samples/CWE-Unknown/sample_94_original.py","start":{"line":170,"col":5,"offset":6682},"end":{"line":170,"col":24,"offset":6701},"extra":{"metavars":{"$APP":{"start":{"line":170,"col":5,"offset":6682},"end":{"line":170,"col":8,"offset":6685},"abstract_content":"app","propagated_value":{"svalue_start":{"line":8,"col":7,"offset":264},"svalue_end":{"line":8,"col":22,"offset":279},"svalue_abstract_content":"Flask(__name__)"}}},"message":"Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.","metadata":{"cwe":["CWE-489: Active Debug Code"],"owasp":"A06:2017 - Security Misconfiguration","references":["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"],"category":"security","technology":["flask"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Active Debug Code"],"source":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","shortlink":"https://sg.run/dKrd","semgrep.dev":{"rule":{"origin":"community","r_id":9534,"rule_id":"gxU1bd","rule_name":"python.flask.security.audit.debug-enabled.debug-enabled","rv_id":946206,"url":"https://semgrep.dev/playground/r/8KTKjwR/python.flask.security.audit.debug-enabled.debug-enabled","version_id":"8KTKjwR"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"4853ed1ae4f364580f3836b858b4beab365c8fb587de51f494f8721672e58b96b156cdcd9b9931b57b89307d1d8aa760f556201df0e90a5969da6b2297168926_0","lines":"    app.run(debug=True)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":34,"col":5,"offset":773},"end":{"line":55,"col":21,"offset":1693},"extra":{"metavars":{"$FUNC":{"start":{"line":33,"col":11,"offset":750},"end":{"line":33,"col":19,"offset":758},"abstract_content":"register"},"$DATA":{"start":{"line":34,"col":5,"offset":773},"end":{"line":34,"col":13,"offset":781},"abstract_content":"username"},"$W":{"start":{"line":34,"col":24,"offset":792},"end":{"line":34,"col":28,"offset":796},"abstract_content":"json"},"$INTERM":{"start":{"line":45,"col":5,"offset":1150},"end":{"line":45,"col":10,"offset":1155},"abstract_content":"query"},"$CURSOR":{"start":{"line":47,"col":9,"offset":1278},"end":{"line":47,"col":15,"offset":1284},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":44,"col":14,"offset":1132},"svalue_end":{"line":44,"col":27,"offset":1145},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"3777c7184723cfdfc2c1c49e4e5b76d4e53902244023ca141bcf0e6fe27065a8f64aaf499a4678f65417ac85d5730745a5601ed92e2bd38c40c0bb6c373d5ca1_0","lines":"    username = request.json.get('username')\n    password = request.json.get('password')\n    email = request.json.get('email')\n    \n    if not all([username, password, email]):\n        return response.json({\"error\": \"Missing required fields\"}, status=400)\n    \n    hashed_password = hash_password(password)\n    \n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\"\n    try:\n        cursor.execute(query)\n        conn.commit()\n        logger.info(f\"User registered: {username}\")\n        return response.json({\"message\": \"User registered successfully\"})\n    except sqlite3.IntegrityError:\n        logger.warning(f\"Registration failed - duplicate username or email: {username}\")\n        return response.json({\"error\": \"Username or email already exists\"}, status=400)\n    finally:\n        conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":36,"col":5,"offset":861},"end":{"line":55,"col":21,"offset":1693},"extra":{"metavars":{"$FUNC":{"start":{"line":33,"col":11,"offset":750},"end":{"line":33,"col":19,"offset":758},"abstract_content":"register"},"$DATA":{"start":{"line":36,"col":5,"offset":861},"end":{"line":36,"col":10,"offset":866},"abstract_content":"email"},"$W":{"start":{"line":36,"col":21,"offset":877},"end":{"line":36,"col":25,"offset":881},"abstract_content":"json"},"$INTERM":{"start":{"line":45,"col":5,"offset":1150},"end":{"line":45,"col":10,"offset":1155},"abstract_content":"query"},"$CURSOR":{"start":{"line":47,"col":9,"offset":1278},"end":{"line":47,"col":15,"offset":1284},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":44,"col":14,"offset":1132},"svalue_end":{"line":44,"col":27,"offset":1145},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"d7750e7cfb8669d0caa72d36e7605b128dccc125ed400f2884675a8f0c491bd7aaf6ed2c7936e5ebd2f94e80470bf15107c04dde44512c82709964f8fc1337be_0","lines":"    email = request.json.get('email')\n    \n    if not all([username, password, email]):\n        return response.json({\"error\": \"Missing required fields\"}, status=400)\n    \n    hashed_password = hash_password(password)\n    \n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\"\n    try:\n        cursor.execute(query)\n        conn.commit()\n        logger.info(f\"User registered: {username}\")\n        return response.json({\"message\": \"User registered successfully\"})\n    except sqlite3.IntegrityError:\n        logger.warning(f\"Registration failed - duplicate username or email: {username}\")\n        return response.json({\"error\": \"Username or email already exists\"}, status=400)\n    finally:\n        conn.close()","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":45,"col":13,"offset":1158},"end":{"line":45,"col":115,"offset":1260},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"INSERT"},"$ANYTHING":{"start":{"line":34,"col":24,"offset":792},"end":{"line":34,"col":28,"offset":796},"abstract_content":"json"},"$SQLSTR":{"start":{"line":45,"col":15,"offset":1160},"end":{"line":45,"col":70,"offset":1215},"abstract_content":"INSERT INTO users (username, password, email) VALUES ('"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"42e3982e24d4972928ba7af983073301668500a2902747229ddcbea8eda1855b50f0f4a2aff810a7b98920aaa5b1b3a06e853ec5ac3ed7d4a96d47871df8bd53_0","lines":"    query = f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":34,"col":16,"offset":784},"end":{"line":34,"col":28,"offset":796}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":34,"col":5,"offset":773},"end":{"line":34,"col":13,"offset":781}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":45,"col":13,"offset":1158},"end":{"line":45,"col":115,"offset":1260}},"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":45,"col":13,"offset":1158},"end":{"line":45,"col":115,"offset":1260},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"INSERT"},"$APP":{"start":{"line":32,"col":2,"offset":699},"end":{"line":32,"col":5,"offset":702},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":140},"svalue_end":{"line":9,"col":23,"offset":156},"svalue_abstract_content":"Sanic(\"UserApp\")"}},"$FUNC":{"start":{"line":33,"col":11,"offset":750},"end":{"line":33,"col":19,"offset":758},"abstract_content":"register"},"$ROUTEVAR":{"start":{"line":34,"col":16,"offset":784},"end":{"line":34,"col":23,"offset":791},"abstract_content":"request"},"$SQLSTR":{"start":{"line":45,"col":15,"offset":1160},"end":{"line":45,"col":70,"offset":1215},"abstract_content":"INSERT INTO users (username, password, email) VALUES ('"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"aee843c407d6d4739835e7fd18d92445631d8b84f7fc9a3ba8dd6ed66135ed1e88cb5ab7638e7db38955ce60986016c73057a59f72464cde2b6edd5a045103f1_0","lines":"    query = f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":34,"col":16,"offset":784},"end":{"line":34,"col":23,"offset":791}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":34,"col":5,"offset":773},"end":{"line":34,"col":13,"offset":781}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":45,"col":13,"offset":1158},"end":{"line":45,"col":115,"offset":1260}},"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":47,"col":9,"offset":1278},"end":{"line":47,"col":30,"offset":1299},"extra":{"metavars":{"$X":{"start":{"line":45,"col":71,"offset":1216},"end":{"line":45,"col":79,"offset":1224},"abstract_content":"username","propagated_value":{"svalue_start":{"line":34,"col":16,"offset":784},"svalue_end":{"line":34,"col":44,"offset":812},"svalue_abstract_content":"request.json.get('username')"}},"$DB":{"start":{"line":47,"col":9,"offset":1278},"end":{"line":47,"col":15,"offset":1284},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":44,"col":14,"offset":1132},"svalue_end":{"line":44,"col":27,"offset":1145},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":47,"col":24,"offset":1293},"end":{"line":47,"col":29,"offset":1298},"abstract_content":"query","propagated_value":{"svalue_start":{"line":45,"col":13,"offset":1158},"svalue_end":{"line":45,"col":115,"offset":1260},"svalue_abstract_content":"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f87126617cf511de642f7f2faafaa4df192c3a027e37f45cd178b92fecae6979f641658bde585dc8dfccd332ba2826abc68fa138280321ec189fb400127596ae_0","lines":"        cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":47,"col":9,"offset":1278},"end":{"line":47,"col":30,"offset":1299},"extra":{"metavars":{"$CONNECTION":{"start":{"line":47,"col":9,"offset":1278},"end":{"line":47,"col":15,"offset":1284},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":44,"col":14,"offset":1132},"svalue_end":{"line":44,"col":27,"offset":1145},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":47,"col":24,"offset":1293},"end":{"line":47,"col":29,"offset":1298},"abstract_content":"query","propagated_value":{"svalue_start":{"line":45,"col":13,"offset":1158},"svalue_end":{"line":45,"col":115,"offset":1260},"svalue_abstract_content":"f\"INSERT INTO users (username, password, email) VALUES ('{username}', '{hashed_password}', '{email}')\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ce06f439a40b2e30ffb945c5005ccdecd2c53cf7872d4ba4bd37b42972fc1b1e702b13bbc45d8916c8ee5f861dbe4fc8fb68074313b75d351241cb2a1ddec682_0","lines":"        cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":59,"col":5,"offset":1764},"end":{"line":70,"col":26,"offset":2218},"extra":{"metavars":{"$FUNC":{"start":{"line":58,"col":11,"offset":1744},"end":{"line":58,"col":16,"offset":1749},"abstract_content":"login"},"$DATA":{"start":{"line":59,"col":5,"offset":1764},"end":{"line":59,"col":13,"offset":1772},"abstract_content":"username"},"$W":{"start":{"line":59,"col":24,"offset":1783},"end":{"line":59,"col":28,"offset":1787},"abstract_content":"json"},"$INTERM":{"start":{"line":69,"col":5,"offset":2096},"end":{"line":69,"col":10,"offset":2101},"abstract_content":"query"},"$CURSOR":{"start":{"line":70,"col":5,"offset":2197},"end":{"line":70,"col":11,"offset":2203},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":68,"col":14,"offset":2078},"svalue_end":{"line":68,"col":27,"offset":2091},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"850c8cd37446cfcb948ea3681322b6ee25b82d718080fd65dd2a22a6afdf902736b13af6b019142910543d90ab3d55b74e204722aa672709feb3c663fa43be1f_0","lines":"    username = request.json.get('username')\n    password = request.json.get('password')\n    \n    if not all([username, password]):\n        return response.json({\"error\": \"Missing required fields\"}, status=400)\n    \n    hashed_password = hash_password(password)\n    \n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\"\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":69,"col":13,"offset":2104},"end":{"line":69,"col":101,"offset":2192},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":59,"col":24,"offset":1783},"end":{"line":59,"col":28,"offset":1787},"abstract_content":"json"},"$SQLSTR":{"start":{"line":69,"col":15,"offset":2106},"end":{"line":69,"col":54,"offset":2145},"abstract_content":"SELECT id FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0c6964a3b2f76bb4fa6f8e8c91853fe78a08f87502642eefaed733e3ecd17ec84a33c8042f278ab8a96dba7087b79f7c4cdc35edddb00c49642dba099965b8c4_0","lines":"    query = f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":59,"col":16,"offset":1775},"end":{"line":59,"col":28,"offset":1787}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":59,"col":5,"offset":1764},"end":{"line":59,"col":13,"offset":1772}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":69,"col":13,"offset":2104},"end":{"line":69,"col":101,"offset":2192}},"f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":69,"col":13,"offset":2104},"end":{"line":69,"col":101,"offset":2192},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$APP":{"start":{"line":57,"col":2,"offset":1696},"end":{"line":57,"col":5,"offset":1699},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":140},"svalue_end":{"line":9,"col":23,"offset":156},"svalue_abstract_content":"Sanic(\"UserApp\")"}},"$FUNC":{"start":{"line":58,"col":11,"offset":1744},"end":{"line":58,"col":16,"offset":1749},"abstract_content":"login"},"$ROUTEVAR":{"start":{"line":59,"col":16,"offset":1775},"end":{"line":59,"col":23,"offset":1782},"abstract_content":"request"},"$SQLSTR":{"start":{"line":69,"col":15,"offset":2106},"end":{"line":69,"col":54,"offset":2145},"abstract_content":"SELECT id FROM users WHERE username = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"e459f21ab1b9b231b9340348ee4f2f22c347c3b00d57b85538a4bb033c8513bd8e59fc743448e7957a89ab8ee30e6c7f340bf36062d3d841f1275e0706ef32da_0","lines":"    query = f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":59,"col":16,"offset":1775},"end":{"line":59,"col":23,"offset":1782}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":59,"col":5,"offset":1764},"end":{"line":59,"col":13,"offset":1772}},"content":"username"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":69,"col":13,"offset":2104},"end":{"line":69,"col":101,"offset":2192}},"f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":70,"col":5,"offset":2197},"end":{"line":70,"col":26,"offset":2218},"extra":{"metavars":{"$X":{"start":{"line":69,"col":55,"offset":2146},"end":{"line":69,"col":63,"offset":2154},"abstract_content":"username","propagated_value":{"svalue_start":{"line":59,"col":16,"offset":1775},"svalue_end":{"line":59,"col":44,"offset":1803},"svalue_abstract_content":"request.json.get('username')"}},"$DB":{"start":{"line":70,"col":5,"offset":2197},"end":{"line":70,"col":11,"offset":2203},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":68,"col":14,"offset":2078},"svalue_end":{"line":68,"col":27,"offset":2091},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":70,"col":20,"offset":2212},"end":{"line":70,"col":25,"offset":2217},"abstract_content":"query","propagated_value":{"svalue_start":{"line":69,"col":13,"offset":2104},"svalue_end":{"line":69,"col":101,"offset":2192},"svalue_abstract_content":"f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f87126617cf511de642f7f2faafaa4df192c3a027e37f45cd178b92fecae6979f641658bde585dc8dfccd332ba2826abc68fa138280321ec189fb400127596ae_1","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":70,"col":5,"offset":2197},"end":{"line":70,"col":26,"offset":2218},"extra":{"metavars":{"$CONNECTION":{"start":{"line":70,"col":5,"offset":2197},"end":{"line":70,"col":11,"offset":2203},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":68,"col":14,"offset":2078},"svalue_end":{"line":68,"col":27,"offset":2091},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":70,"col":20,"offset":2212},"end":{"line":70,"col":25,"offset":2217},"abstract_content":"query","propagated_value":{"svalue_start":{"line":69,"col":13,"offset":2104},"svalue_end":{"line":69,"col":101,"offset":2192},"svalue_abstract_content":"f\"SELECT id FROM users WHERE username = '{username}' AND password = '{hashed_password}'\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ce06f439a40b2e30ffb945c5005ccdecd2c53cf7872d4ba4bd37b42972fc1b1e702b13bbc45d8916c8ee5f861dbe4fc8fb68074313b75d351241cb2a1ddec682_1","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":86,"col":13,"offset":2741},"end":{"line":86,"col":58,"offset":2786},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$ANYTHING":{"start":{"line":83,"col":23,"offset":2638},"end":{"line":83,"col":27,"offset":2642},"abstract_content":"args"},"$SQLSTR":{"start":{"line":86,"col":15,"offset":2743},"end":{"line":86,"col":47,"offset":2775},"abstract_content":"SELECT * FROM users WHERE id = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"844dc40bfd99aac65ee47573061f74fb32597aaf0bcda817e547ca074dc18947aee79a652ede20e1d5b65a4dc625c9181e1e2486ccf26280e76610021426afe4_0","lines":"    query = f\"SELECT * FROM users WHERE id = '{user_id}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":83,"col":15,"offset":2630},"end":{"line":83,"col":27,"offset":2642}},"request.args"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":83,"col":5,"offset":2620},"end":{"line":83,"col":12,"offset":2627}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":86,"col":13,"offset":2741},"end":{"line":86,"col":58,"offset":2786}},"f\"SELECT * FROM users WHERE id = '{user_id}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":86,"col":13,"offset":2741},"end":{"line":86,"col":58,"offset":2786},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"SELECT"},"$APP":{"start":{"line":81,"col":2,"offset":2564},"end":{"line":81,"col":5,"offset":2567},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":140},"svalue_end":{"line":9,"col":23,"offset":156},"svalue_abstract_content":"Sanic(\"UserApp\")"}},"$FUNC":{"start":{"line":82,"col":11,"offset":2597},"end":{"line":82,"col":19,"offset":2605},"abstract_content":"get_user"},"$ROUTEVAR":{"start":{"line":83,"col":15,"offset":2630},"end":{"line":83,"col":22,"offset":2637},"abstract_content":"request"},"$SQLSTR":{"start":{"line":86,"col":15,"offset":2743},"end":{"line":86,"col":47,"offset":2775},"abstract_content":"SELECT * FROM users WHERE id = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"44c2370d181bc4ac1f27f45ba72e8ed4c518ca14359971bb9b05792c7c1187d4d717026d86733b09ec82bfff28314ce7f1cf36025fbb40cd394101a1fcc5a453_0","lines":"    query = f\"SELECT * FROM users WHERE id = '{user_id}'\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":83,"col":15,"offset":2630},"end":{"line":83,"col":22,"offset":2637}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":83,"col":5,"offset":2620},"end":{"line":83,"col":12,"offset":2627}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":86,"col":13,"offset":2741},"end":{"line":86,"col":58,"offset":2786}},"f\"SELECT * FROM users WHERE id = '{user_id}'\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":87,"col":5,"offset":2791},"end":{"line":87,"col":26,"offset":2812},"extra":{"metavars":{"$X":{"start":{"line":86,"col":48,"offset":2776},"end":{"line":86,"col":55,"offset":2783},"abstract_content":"user_id","propagated_value":{"svalue_start":{"line":83,"col":15,"offset":2630},"svalue_end":{"line":83,"col":45,"offset":2660},"svalue_abstract_content":"request.args.get('user_id')[0]"}},"$DB":{"start":{"line":87,"col":5,"offset":2791},"end":{"line":87,"col":11,"offset":2797},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":85,"col":14,"offset":2715},"svalue_end":{"line":85,"col":27,"offset":2728},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":87,"col":20,"offset":2806},"end":{"line":87,"col":25,"offset":2811},"abstract_content":"query","propagated_value":{"svalue_start":{"line":86,"col":13,"offset":2741},"svalue_end":{"line":86,"col":58,"offset":2786},"svalue_abstract_content":"f\"SELECT * FROM users WHERE id = '{user_id}'\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8784c68f97bdfc077974c8cbe48ae49f1629dc57b31eed83c337344fdf9ede338a390ed68ae7cb267ee816d6d5b9c5506cbbddeeee06481d00e1e23f2131386d_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":87,"col":5,"offset":2791},"end":{"line":87,"col":26,"offset":2812},"extra":{"metavars":{"$CONNECTION":{"start":{"line":87,"col":5,"offset":2791},"end":{"line":87,"col":11,"offset":2797},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":85,"col":14,"offset":2715},"svalue_end":{"line":85,"col":27,"offset":2728},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":87,"col":20,"offset":2806},"end":{"line":87,"col":25,"offset":2811},"abstract_content":"query","propagated_value":{"svalue_start":{"line":86,"col":13,"offset":2741},"svalue_end":{"line":86,"col":58,"offset":2786},"svalue_abstract_content":"f\"SELECT * FROM users WHERE id = '{user_id}'\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ce06f439a40b2e30ffb945c5005ccdecd2c53cf7872d4ba4bd37b42972fc1b1e702b13bbc45d8916c8ee5f861dbe4fc8fb68074313b75d351241cb2a1ddec682_2","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":103,"col":5,"offset":3313},"end":{"line":112,"col":26,"offset":3690},"extra":{"metavars":{"$FUNC":{"start":{"line":102,"col":11,"offset":3286},"end":{"line":102,"col":23,"offset":3298},"abstract_content":"update_email"},"$DATA":{"start":{"line":103,"col":5,"offset":3313},"end":{"line":103,"col":12,"offset":3320},"abstract_content":"user_id"},"$W":{"start":{"line":103,"col":23,"offset":3331},"end":{"line":103,"col":27,"offset":3335},"abstract_content":"json"},"$INTERM":{"start":{"line":111,"col":5,"offset":3594},"end":{"line":111,"col":10,"offset":3599},"abstract_content":"query"},"$CURSOR":{"start":{"line":112,"col":5,"offset":3669},"end":{"line":112,"col":11,"offset":3675},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":110,"col":14,"offset":3576},"svalue_end":{"line":110,"col":27,"offset":3589},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"4efce38d1289819ac2cf05a812136b67de65d86df0ef4da40aca3b3512d2edfa3c676e77b469b55f3e4550199f28dcbe51370913870e04522a7f307a4668711b_0","lines":"    user_id = request.json.get('user_id')\n    new_email = request.json.get('new_email')\n    \n    if not all([user_id, new_email]):\n        return response.json({\"error\": \"Missing required fields\"}, status=400)\n    \n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\"\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":104,"col":5,"offset":3355},"end":{"line":112,"col":26,"offset":3690},"extra":{"metavars":{"$FUNC":{"start":{"line":102,"col":11,"offset":3286},"end":{"line":102,"col":23,"offset":3298},"abstract_content":"update_email"},"$DATA":{"start":{"line":104,"col":5,"offset":3355},"end":{"line":104,"col":14,"offset":3364},"abstract_content":"new_email"},"$W":{"start":{"line":104,"col":25,"offset":3375},"end":{"line":104,"col":29,"offset":3379},"abstract_content":"json"},"$INTERM":{"start":{"line":111,"col":5,"offset":3594},"end":{"line":111,"col":10,"offset":3599},"abstract_content":"query"},"$CURSOR":{"start":{"line":112,"col":5,"offset":3669},"end":{"line":112,"col":11,"offset":3675},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":110,"col":14,"offset":3576},"svalue_end":{"line":110,"col":27,"offset":3589},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"a076e849f3c604e73897b734bd755f79644a6ce7737336fb9504f154c8cb16c2058cc5d0f2bc46a15100e2a07916a7afc6bb9410be50298f5281e7951019d6c0_0","lines":"    new_email = request.json.get('new_email')\n    \n    if not all([user_id, new_email]):\n        return response.json({\"error\": \"Missing required fields\"}, status=400)\n    \n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\"\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":111,"col":13,"offset":3602},"end":{"line":111,"col":75,"offset":3664},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$ANYTHING":{"start":{"line":103,"col":23,"offset":3331},"end":{"line":103,"col":27,"offset":3335},"abstract_content":"json"},"$SQLSTR":{"start":{"line":111,"col":15,"offset":3604},"end":{"line":111,"col":41,"offset":3630},"abstract_content":"UPDATE users SET email = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"94f2418d21b381b24af5120e20427d2e6015357955fa8ebf614c84fc168c7f62222ca5613001f9f067ff668bb0a951631f04855516108215bb57424462560f01_0","lines":"    query = f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":103,"col":15,"offset":3323},"end":{"line":103,"col":27,"offset":3335}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":103,"col":5,"offset":3313},"end":{"line":103,"col":12,"offset":3320}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":111,"col":13,"offset":3602},"end":{"line":111,"col":75,"offset":3664}},"f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":111,"col":13,"offset":3602},"end":{"line":111,"col":75,"offset":3664},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"UPDATE"},"$APP":{"start":{"line":101,"col":2,"offset":3232},"end":{"line":101,"col":5,"offset":3235},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":140},"svalue_end":{"line":9,"col":23,"offset":156},"svalue_abstract_content":"Sanic(\"UserApp\")"}},"$FUNC":{"start":{"line":102,"col":11,"offset":3286},"end":{"line":102,"col":23,"offset":3298},"abstract_content":"update_email"},"$ROUTEVAR":{"start":{"line":103,"col":15,"offset":3323},"end":{"line":103,"col":22,"offset":3330},"abstract_content":"request"},"$SQLSTR":{"start":{"line":111,"col":15,"offset":3604},"end":{"line":111,"col":41,"offset":3630},"abstract_content":"UPDATE users SET email = '"}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"05cf61289872fc009c69d2f55f7fac2e9784718071090b87dd50b751f731cf8a6f381f8dae45beb7c26e987d928bdcfe1bcf843c52a6fbb2295c3300445008d2_0","lines":"    query = f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":103,"col":15,"offset":3323},"end":{"line":103,"col":22,"offset":3330}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":103,"col":5,"offset":3313},"end":{"line":103,"col":12,"offset":3320}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":111,"col":13,"offset":3602},"end":{"line":111,"col":75,"offset":3664}},"f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":112,"col":5,"offset":3669},"end":{"line":112,"col":26,"offset":3690},"extra":{"metavars":{"$X":{"start":{"line":111,"col":42,"offset":3631},"end":{"line":111,"col":51,"offset":3640},"abstract_content":"new_email","propagated_value":{"svalue_start":{"line":104,"col":17,"offset":3367},"svalue_end":{"line":104,"col":46,"offset":3396},"svalue_abstract_content":"request.json.get('new_email')"}},"$DB":{"start":{"line":112,"col":5,"offset":3669},"end":{"line":112,"col":11,"offset":3675},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":110,"col":14,"offset":3576},"svalue_end":{"line":110,"col":27,"offset":3589},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":112,"col":20,"offset":3684},"end":{"line":112,"col":25,"offset":3689},"abstract_content":"query","propagated_value":{"svalue_start":{"line":111,"col":13,"offset":3602},"svalue_end":{"line":111,"col":75,"offset":3664},"svalue_abstract_content":"f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"f055f99f71d259833486b6f3d4fa61f3ac35e1d666f58529e9d4a8f9ce2860bb4e3e366305089e16968baea395572f1d953ef04a2ff89c43969c46254ee78339_0","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":112,"col":5,"offset":3669},"end":{"line":112,"col":26,"offset":3690},"extra":{"metavars":{"$CONNECTION":{"start":{"line":112,"col":5,"offset":3669},"end":{"line":112,"col":11,"offset":3675},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":110,"col":14,"offset":3576},"svalue_end":{"line":110,"col":27,"offset":3589},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":112,"col":20,"offset":3684},"end":{"line":112,"col":25,"offset":3689},"abstract_content":"query","propagated_value":{"svalue_start":{"line":111,"col":13,"offset":3602},"svalue_end":{"line":111,"col":75,"offset":3664},"svalue_abstract_content":"f\"UPDATE users SET email = '{new_email}' WHERE id = {user_id}\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ce06f439a40b2e30ffb945c5005ccdecd2c53cf7872d4ba4bd37b42972fc1b1e702b13bbc45d8916c8ee5f861dbe4fc8fb68074313b75d351241cb2a1ddec682_3","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":121,"col":5,"offset":3940},"end":{"line":129,"col":26,"offset":4224},"extra":{"metavars":{"$FUNC":{"start":{"line":120,"col":11,"offset":3914},"end":{"line":120,"col":22,"offset":3925},"abstract_content":"delete_user"},"$DATA":{"start":{"line":121,"col":5,"offset":3940},"end":{"line":121,"col":12,"offset":3947},"abstract_content":"user_id"},"$W":{"start":{"line":121,"col":23,"offset":3958},"end":{"line":121,"col":27,"offset":3962},"abstract_content":"json"},"$INTERM":{"start":{"line":128,"col":5,"offset":4149},"end":{"line":128,"col":10,"offset":4154},"abstract_content":"query"},"$CURSOR":{"start":{"line":129,"col":5,"offset":4203},"end":{"line":129,"col":11,"offset":4209},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":127,"col":14,"offset":4131},"svalue_end":{"line":127,"col":27,"offset":4144},"svalue_abstract_content":"conn.cursor()"}}},"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","shortlink":"https://sg.run/qx7y","semgrep.dev":{"rule":{"origin":"community","r_id":9512,"rule_id":"2ZUbDL","rule_name":"python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","rv_id":946186,"url":"https://semgrep.dev/playground/r/X0TL8rA/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","version_id":"X0TL8rA"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"579e2c7b798d6ee6db4481e0d0de53cbbaa45f6321365b5c5b06821e69e0680172b4c277c21eacf9627deed8dfdae6272b2fe788dea45cb3e0afe7b1a7d86a37_0","lines":"    user_id = request.json.get('user_id')\n    \n    if not user_id:\n        return response.json({\"error\": \"Missing user_id\"}, status=400)\n    \n    conn = sqlite3.connect('users.db')\n    cursor = conn.cursor()\n    query = f\"DELETE FROM users WHERE id = {user_id}\"\n    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.django.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":128,"col":13,"offset":4157},"end":{"line":128,"col":54,"offset":4198},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"DELETE"},"$ANYTHING":{"start":{"line":121,"col":23,"offset":3958},"end":{"line":121,"col":27,"offset":3962},"abstract_content":"json"},"$SQLSTR":{"start":{"line":128,"col":15,"offset":4159},"end":{"line":128,"col":44,"offset":4188},"abstract_content":"DELETE FROM users WHERE id = "}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Mass Assignment"],"source":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/PbZp","semgrep.dev":{"rule":{"origin":"community","r_id":14701,"rule_id":"lBU8Ad","rule_name":"python.django.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946190,"url":"https://semgrep.dev/playground/r/yeT0nKx/python.django.security.injection.tainted-sql-string.tainted-sql-string","version_id":"yeT0nKx"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"beb586c4ffab1d7a0937d1cdd72e0802a047be428a9aedbdc0ffb1bc18b075d92f9d0e8aa88a98dbdccb37c5cf91932a59c55a54bb0482e3190937c48f0f75ef_0","lines":"    query = f\"DELETE FROM users WHERE id = {user_id}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":121,"col":15,"offset":3950},"end":{"line":121,"col":27,"offset":3962}},"request.json"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":121,"col":5,"offset":3940},"end":{"line":121,"col":12,"offset":3947}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":128,"col":13,"offset":4157},"end":{"line":128,"col":54,"offset":4198}},"f\"DELETE FROM users WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":128,"col":13,"offset":4157},"end":{"line":128,"col":54,"offset":4198},"extra":{"metavars":{"$1":{"start":{"line":1,"col":1,"offset":0},"end":{"line":1,"col":7,"offset":6},"abstract_content":"DELETE"},"$APP":{"start":{"line":119,"col":2,"offset":3858},"end":{"line":119,"col":5,"offset":3861},"abstract_content":"app","propagated_value":{"svalue_start":{"line":9,"col":7,"offset":140},"svalue_end":{"line":9,"col":23,"offset":156},"svalue_abstract_content":"Sanic(\"UserApp\")"}},"$FUNC":{"start":{"line":120,"col":11,"offset":3914},"end":{"line":120,"col":22,"offset":3925},"abstract_content":"delete_user"},"$ROUTEVAR":{"start":{"line":121,"col":15,"offset":3950},"end":{"line":121,"col":22,"offset":3957},"abstract_content":"request"},"$SQLSTR":{"start":{"line":128,"col":15,"offset":4159},"end":{"line":128,"col":44,"offset":4188},"abstract_content":"DELETE FROM users WHERE id = "}},"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Validation"],"source":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","shortlink":"https://sg.run/JxZj","semgrep.dev":{"rule":{"origin":"community","r_id":14702,"rule_id":"YGUDKQ","rule_name":"python.flask.security.injection.tainted-sql-string.tainted-sql-string","rv_id":946228,"url":"https://semgrep.dev/playground/r/pZTNO7z/python.flask.security.injection.tainted-sql-string.tainted-sql-string","version_id":"pZTNO7z"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"0e4206f1f6739637369a3d9215c98b778f9506914dc7cec7d4551526bf644ee80fa16cbc47e7b81a7f32a32620f73676d130c51e81808ee16dd4917a02f591d9_0","lines":"    query = f\"DELETE FROM users WHERE id = {user_id}\"","is_ignored":false,"validation_state":"NO_VALIDATOR","dataflow_trace":{"taint_source":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":121,"col":15,"offset":3950},"end":{"line":121,"col":22,"offset":3957}},"request"]],"intermediate_vars":[{"location":{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":121,"col":5,"offset":3940},"end":{"line":121,"col":12,"offset":3947}},"content":"user_id"}],"taint_sink":["CliLoc",[{"path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":128,"col":13,"offset":4157},"end":{"line":128,"col":54,"offset":4198}},"f\"DELETE FROM users WHERE id = {user_id}\""]]},"engine_kind":"PRO"}},{"check_id":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":129,"col":5,"offset":4203},"end":{"line":129,"col":26,"offset":4224},"extra":{"metavars":{"$X":{"start":{"line":128,"col":45,"offset":4189},"end":{"line":128,"col":52,"offset":4196},"abstract_content":"user_id","propagated_value":{"svalue_start":{"line":121,"col":15,"offset":3950},"svalue_end":{"line":121,"col":42,"offset":3977},"svalue_abstract_content":"request.json.get('user_id')"}},"$DB":{"start":{"line":129,"col":5,"offset":4203},"end":{"line":129,"col":11,"offset":4209},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":127,"col":14,"offset":4131},"svalue_end":{"line":127,"col":27,"offset":4144},"svalue_abstract_content":"conn.cursor()"}},"$SQL":{"start":{"line":129,"col":20,"offset":4218},"end":{"line":129,"col":25,"offset":4223},"abstract_content":"query","propagated_value":{"svalue_start":{"line":128,"col":13,"offset":4157},"svalue_end":{"line":128,"col":54,"offset":4198},"svalue_abstract_content":"f\"DELETE FROM users WHERE id = {user_id}\""}}},"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","shortlink":"https://sg.run/EkWw","semgrep.dev":{"rule":{"origin":"community","r_id":9637,"rule_id":"3qUP9k","rule_name":"python.lang.security.audit.formatted-sql-query.formatted-sql-query","rv_id":946343,"url":"https://semgrep.dev/playground/r/e1T98KK/python.lang.security.audit.formatted-sql-query.formatted-sql-query","version_id":"e1T98KK"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"WARNING","fingerprint":"8784c68f97bdfc077974c8cbe48ae49f1629dc57b31eed83c337344fdf9ede338a390ed68ae7cb267ee816d6d5b9c5506cbbddeeee06481d00e1e23f2131386d_1","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":129,"col":5,"offset":4203},"end":{"line":129,"col":26,"offset":4224},"extra":{"metavars":{"$CONNECTION":{"start":{"line":129,"col":5,"offset":4203},"end":{"line":129,"col":11,"offset":4209},"abstract_content":"cursor","propagated_value":{"svalue_start":{"line":127,"col":14,"offset":4131},"svalue_end":{"line":127,"col":27,"offset":4144},"svalue_abstract_content":"conn.cursor()"}},"$QUERY":{"start":{"line":129,"col":20,"offset":4218},"end":{"line":129,"col":25,"offset":4223},"abstract_content":"query","propagated_value":{"svalue_start":{"line":128,"col":13,"offset":4157},"svalue_end":{"line":128,"col":54,"offset":4198},"svalue_abstract_content":"f\"DELETE FROM users WHERE id = {user_id}\""}}},"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["SQL Injection"],"source":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","shortlink":"https://sg.run/2b1L","semgrep.dev":{"rule":{"origin":"community","r_id":10563,"rule_id":"oqUz5y","rule_name":"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","rv_id":946452,"url":"https://semgrep.dev/playground/r/8KTKj19/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","version_id":"8KTKj19"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query","semgrep.ruleset":"default","semgrep.ruleset_id":3471},"severity":"ERROR","fingerprint":"ce06f439a40b2e30ffb945c5005ccdecd2c53cf7872d4ba4bd37b42972fc1b1e702b13bbc45d8916c8ee5f861dbe4fc8fb68074313b75d351241cb2a1ddec682_4","lines":"    cursor.execute(query)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}},{"check_id":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","path":"vulnerability_samples/CWE-Unknown/sample_96_original.py","start":{"line":166,"col":5,"offset":5550},"end":{"line":166,"col":39,"offset":5584},"extra":{"metavars":{},"message":"Running flask app with host 0.0.0.0 could expose the server publicly.","metadata":{"cwe":["CWE-668: Exposure of Resource to Wrong Sphere"],"owasp":["A01:2021 - Broken Access Control"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"HIGH","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Other"],"source":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","shortlink":"https://sg.run/eLby","semgrep.dev":{"rule":{"origin":"community","r_id":9532,"rule_id":"L1Uy1n","rule_name":"python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","rv_id":946204,"url":"https://semgrep.dev/playground/r/7ZTrQkG/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","version_id":"7ZTrQkG"},"src":"new-rule"},"dev.semgrep.actions":["monitor"],"semgrep.policy":{"id":174377,"name":"Rule Board - Audit column","slug":"rule-board-audit"},"semgrep.url":"https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host","semgrep.ruleset":"comment","semgrep.ruleset_id":9381},"severity":"WARNING","fingerprint":"ed7ec3c66075df9de0d3ed63d883a5c25807d41238204c53c608bfe747e69ed44ba6ff5b6f0f263cc17669337524d84e889413b7415df8d61d4f560a0356ca36_0","lines":"    app.run(host=\"0.0.0.0\", port=8000)","is_ignored":false,"validation_state":"NO_VALIDATOR","engine_kind":"PRO"}}],"errors":[],"paths":{"scanned":[".gitattributes",".gitignore","vulnerability_samples/CWE-1004/sample_189_original.py","vulnerability_samples/CWE-1004/sample_190_original.py","vulnerability_samples/CWE-116/sample_152_original.py","vulnerability_samples/CWE-116/sample_153_original.py","vulnerability_samples/CWE-117/sample_55_original.py","vulnerability_samples/CWE-117/sample_59_original.py","vulnerability_samples/CWE-1236/sample_154_original.py","vulnerability_samples/CWE-1236/sample_155_original.py","vulnerability_samples/CWE-1275/sample_102_original.py","vulnerability_samples/CWE-1275/sample_103_original.py","vulnerability_samples/CWE-1275/sample_104_original.py","vulnerability_samples/CWE-1275/sample_105_original.py","vulnerability_samples/CWE-20/sample_156_original.py","vulnerability_samples/CWE-20/sample_157_original.py","vulnerability_samples/CWE-200/sample_0_original.py","vulnerability_samples/CWE-200/sample_106_original.py","vulnerability_samples/CWE-200/sample_107_original.py","vulnerability_samples/CWE-200/sample_108_original.py","vulnerability_samples/CWE-200/sample_3_original.py","vulnerability_samples/CWE-200/sample_4_original.py","vulnerability_samples/CWE-22/sample_109_original.py","vulnerability_samples/CWE-22/sample_110_original.py","vulnerability_samples/CWE-22/sample_111_original.py","vulnerability_samples/CWE-22/sample_112_original.py","vulnerability_samples/CWE-22/sample_113_original.py","vulnerability_samples/CWE-276/sample_114_original.py","vulnerability_samples/CWE-276/sample_115_original.py","vulnerability_samples/CWE-276/sample_116_original.py","vulnerability_samples/CWE-276/sample_6_original.py","vulnerability_samples/CWE-276/sample_7_original.py","vulnerability_samples/CWE-276/sample_8_original.py","vulnerability_samples/CWE-276/sample_9_original.py","vulnerability_samples/CWE-287/sample_10_original.py","vulnerability_samples/CWE-287/sample_11_original.py","vulnerability_samples/CWE-287/sample_12_original.py","vulnerability_samples/CWE-287/sample_137_original.py","vulnerability_samples/CWE-287/sample_138_original.py","vulnerability_samples/CWE-287/sample_139_original.py","vulnerability_samples/CWE-287/sample_13_original.py","vulnerability_samples/CWE-287/sample_14_original.py","vulnerability_samples/CWE-295/sample_140_original.py","vulnerability_samples/CWE-295/sample_141_original.py","vulnerability_samples/CWE-295/sample_142_original.py","vulnerability_samples/CWE-295/sample_15_original.py","vulnerability_samples/CWE-295/sample_16_original.py","vulnerability_samples/CWE-295/sample_17_original.py","vulnerability_samples/CWE-295/sample_18_original.py","vulnerability_samples/CWE-295/sample_19_original.py","vulnerability_samples/CWE-295/sample_20_original.py","vulnerability_samples/CWE-319/sample_126_original.py","vulnerability_samples/CWE-319/sample_127_original.py","vulnerability_samples/CWE-319/sample_128_original.py","vulnerability_samples/CWE-319/sample_21_original.py","vulnerability_samples/CWE-319/sample_22_original.py","vulnerability_samples/CWE-319/sample_23_original.py","vulnerability_samples/CWE-319/sample_24_original.py","vulnerability_samples/CWE-319/sample_25_original.py","vulnerability_samples/CWE-319/sample_26_original.py","vulnerability_samples/CWE-319/sample_27_original.py","vulnerability_samples/CWE-319/sample_28_original.py","vulnerability_samples/CWE-319/sample_29_original.py","vulnerability_samples/CWE-319/sample_30_original.py","vulnerability_samples/CWE-326/sample_129_original.py","vulnerability_samples/CWE-326/sample_130_original.py","vulnerability_samples/CWE-326/sample_131_original.py","vulnerability_samples/CWE-326/sample_31_original.py","vulnerability_samples/CWE-326/sample_32_original.py","vulnerability_samples/CWE-326/sample_33_original.py","vulnerability_samples/CWE-326/sample_34_original.py","vulnerability_samples/CWE-326/sample_35_original.py","vulnerability_samples/CWE-326/sample_36_original.py","vulnerability_samples/CWE-326/sample_37_original.py","vulnerability_samples/CWE-326/sample_38_original.py","vulnerability_samples/CWE-327/sample_132_original.py","vulnerability_samples/CWE-327/sample_133_original.py","vulnerability_samples/CWE-327/sample_134_original.py","vulnerability_samples/CWE-327/sample_135_original.py","vulnerability_samples/CWE-327/sample_136_original.py","vulnerability_samples/CWE-327/sample_39_original.py","vulnerability_samples/CWE-327/sample_40_original.py","vulnerability_samples/CWE-327/sample_41_original.py","vulnerability_samples/CWE-327/sample_42_original.py","vulnerability_samples/CWE-327/sample_43_original.py","vulnerability_samples/CWE-327/sample_44_original.py","vulnerability_samples/CWE-327/sample_45_original.py","vulnerability_samples/CWE-327/sample_46_original.py","vulnerability_samples/CWE-327/sample_47_original.py","vulnerability_samples/CWE-327/sample_48_original.py","vulnerability_samples/CWE-352/sample_117_original.py","vulnerability_samples/CWE-352/sample_118_original.py","vulnerability_samples/CWE-352/sample_119_original.py","vulnerability_samples/CWE-489/sample_191_original.py","vulnerability_samples/CWE-489/sample_192_original.py","vulnerability_samples/CWE-502/sample_197_original.py","vulnerability_samples/CWE-502/sample_198_original.py","vulnerability_samples/CWE-502/sample_199_original.py","vulnerability_samples/CWE-502/sample_200_original.py","vulnerability_samples/CWE-502/sample_49_original.py","vulnerability_samples/CWE-502/sample_50_original.py","vulnerability_samples/CWE-502/sample_51_original.py","vulnerability_samples/CWE-502/sample_52_original.py","vulnerability_samples/CWE-502/sample_53_original.py","vulnerability_samples/CWE-502/sample_54_original.py","vulnerability_samples/CWE-521/sample_143_original.py","vulnerability_samples/CWE-521/sample_144_original.py","vulnerability_samples/CWE-521/sample_145_original.py","vulnerability_samples/CWE-532/sample_186_original.py","vulnerability_samples/CWE-532/sample_187_original.py","vulnerability_samples/CWE-532/sample_188_original.py","vulnerability_samples/CWE-532/sample_56_original.py","vulnerability_samples/CWE-532/sample_57_original.py","vulnerability_samples/CWE-532/sample_58_original.py","vulnerability_samples/CWE-532/sample_60_original.py","vulnerability_samples/CWE-532/sample_61_original.py","vulnerability_samples/CWE-532/sample_62_original.py","vulnerability_samples/CWE-601/sample_120_original.py","vulnerability_samples/CWE-601/sample_121_original.py","vulnerability_samples/CWE-601/sample_122_original.py","vulnerability_samples/CWE-611/sample_193_original.py","vulnerability_samples/CWE-611/sample_194_original.py","vulnerability_samples/CWE-611/sample_63_original.py","vulnerability_samples/CWE-611/sample_64_original.py","vulnerability_samples/CWE-611/sample_65_original.py","vulnerability_samples/CWE-611/sample_66_original.py","vulnerability_samples/CWE-611/sample_68_original.py","vulnerability_samples/CWE-611/sample_69_original.py","vulnerability_samples/CWE-611/sample_70_original.py","vulnerability_samples/CWE-614/sample_195_original.py","vulnerability_samples/CWE-614/sample_196_original.py","vulnerability_samples/CWE-668/sample_123_original.py","vulnerability_samples/CWE-668/sample_124_original.py","vulnerability_samples/CWE-668/sample_125_original.py","vulnerability_samples/CWE-668/sample_5_original.py","vulnerability_samples/CWE-704/sample_164_original.py","vulnerability_samples/CWE-78/sample_168_original.py","vulnerability_samples/CWE-78/sample_169_original.py","vulnerability_samples/CWE-78/sample_170_original.py","vulnerability_samples/CWE-78/sample_171_original.py","vulnerability_samples/CWE-78/sample_71_original.py","vulnerability_samples/CWE-78/sample_72_original.py","vulnerability_samples/CWE-78/sample_73_original.py","vulnerability_samples/CWE-78/sample_74_original.py","vulnerability_samples/CWE-78/sample_75_original.py","vulnerability_samples/CWE-78/sample_77_original.py","vulnerability_samples/CWE-79/sample_166_original.py","vulnerability_samples/CWE-79/sample_167_original.py","vulnerability_samples/CWE-79/sample_172_original.py","vulnerability_samples/CWE-79/sample_173_original.py","vulnerability_samples/CWE-79/sample_174_original.py","vulnerability_samples/CWE-79/sample_175_original.py","vulnerability_samples/CWE-79/sample_176_original.py","vulnerability_samples/CWE-79/sample_78_original.py","vulnerability_samples/CWE-79/sample_79_original.py","vulnerability_samples/CWE-79/sample_80_original.py","vulnerability_samples/CWE-79/sample_81_original.py","vulnerability_samples/CWE-79/sample_82_original.py","vulnerability_samples/CWE-79/sample_83_original.py","vulnerability_samples/CWE-79/sample_84_original.py","vulnerability_samples/CWE-798/sample_146_original.py","vulnerability_samples/CWE-798/sample_147_original.py","vulnerability_samples/CWE-798/sample_148_original.py","vulnerability_samples/CWE-798/sample_149_original.py","vulnerability_samples/CWE-798/sample_150_original.py","vulnerability_samples/CWE-798/sample_85_original.py","vulnerability_samples/CWE-798/sample_86_original.py","vulnerability_samples/CWE-798/sample_87_original.py","vulnerability_samples/CWE-798/sample_88_original.py","vulnerability_samples/CWE-798/sample_89_original.py","vulnerability_samples/CWE-798/sample_90_original.py","vulnerability_samples/CWE-798/sample_91_original.py","vulnerability_samples/CWE-798/sample_92_original.py","vulnerability_samples/CWE-89/sample_158_original.py","vulnerability_samples/CWE-89/sample_159_original.py","vulnerability_samples/CWE-89/sample_160_original.py","vulnerability_samples/CWE-89/sample_161_original.py","vulnerability_samples/CWE-89/sample_163_original.py","vulnerability_samples/CWE-89/sample_177_original.py","vulnerability_samples/CWE-89/sample_179_original.py","vulnerability_samples/CWE-89/sample_180_original.py","vulnerability_samples/CWE-89/sample_181_original.py","vulnerability_samples/CWE-89/sample_93_original.py","vulnerability_samples/CWE-89/sample_95_original.py","vulnerability_samples/CWE-89/sample_97_original.py","vulnerability_samples/CWE-93/sample_101_original.py","vulnerability_samples/CWE-93/sample_182_original.py","vulnerability_samples/CWE-93/sample_183_original.py","vulnerability_samples/CWE-93/sample_98_original.py","vulnerability_samples/CWE-93/sample_99_original.py","vulnerability_samples/CWE-943/sample_184_original.py","vulnerability_samples/CWE-95/sample_185_original.py","vulnerability_samples/CWE-Unknown/sample_100_original.py","vulnerability_samples/CWE-Unknown/sample_151_original.py","vulnerability_samples/CWE-Unknown/sample_162_original.py","vulnerability_samples/CWE-Unknown/sample_165_original.py","vulnerability_samples/CWE-Unknown/sample_178_original.py","vulnerability_samples/CWE-Unknown/sample_1_original.py","vulnerability_samples/CWE-Unknown/sample_2_original.py","vulnerability_samples/CWE-Unknown/sample_67_original.py","vulnerability_samples/CWE-Unknown/sample_76_original.py","vulnerability_samples/CWE-Unknown/sample_94_original.py","vulnerability_samples/CWE-Unknown/sample_96_original.py"]},"interfile_languages_used":[],"skipped_rules":[]}